{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ServicePropertiesPropertyName } from \"../common.speech/Exports.js\";\nimport { PropertyId } from \"../sdk/Exports.js\";\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\nexport class ConnectionFactoryBase {\n  static getHostSuffix(region) {\n    if (!!region) {\n      if (region.toLowerCase().startsWith(\"china\")) {\n        return \".azure.cn\";\n      }\n      if (region.toLowerCase().startsWith(\"usgov\")) {\n        return \".azure.us\";\n      }\n    }\n    return \".microsoft.com\";\n  }\n  setCommonUrlParams(config, queryParams, endpoint) {\n    const propertyIdToParameterMap = new Map([[PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs], [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging], [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs], [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs], [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing], [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity], [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps], [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold]]);\n    propertyIdToParameterMap.forEach((parameterName, propertyId) => {\n      this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\n    });\n    const serviceProperties = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    Object.keys(serviceProperties).forEach(value => {\n      queryParams[value] = serviceProperties[value];\n    });\n  }\n  setUrlParameter(propId, parameterName, config, queryParams, endpoint) {\n    const value = config.parameters.getProperty(propId, undefined);\n    // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\n    //        including e.g. the path portion, or even as a substring of other query parameters\n    if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n      queryParams[parameterName] = value.toLocaleLowerCase();\n    }\n  }\n}","map":{"version":3,"names":["ServicePropertiesPropertyName","PropertyId","QueryParameterNames","ConnectionFactoryBase","getHostSuffix","region","toLowerCase","startsWith","setCommonUrlParams","config","queryParams","endpoint","propertyIdToParameterMap","Map","Speech_SegmentationSilenceTimeoutMs","SegmentationSilenceTimeoutMs","SpeechServiceConnection_EnableAudioLogging","EnableAudioLogging","SpeechServiceConnection_EndSilenceTimeoutMs","EndSilenceTimeoutMs","SpeechServiceConnection_InitialSilenceTimeoutMs","InitialSilenceTimeoutMs","SpeechServiceResponse_PostProcessingOption","Postprocessing","SpeechServiceResponse_ProfanityOption","Profanity","SpeechServiceResponse_RequestWordLevelTimestamps","EnableWordLevelTimestamps","SpeechServiceResponse_StablePartialResultThreshold","StableIntermediateThreshold","forEach","parameterName","propertyId","setUrlParameter","serviceProperties","JSON","parse","parameters","getProperty","Object","keys","value","propId","undefined","search","toLocaleLowerCase"],"sources":["src/common.speech/ConnectionFactoryBase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SACIA,6BAA6B,QAC1B,6BAA6B;AAEpC,SAASC,UAAU,QAAQ,mBAAmB;AAE9C,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D,OAAM,MAAgBC,qBAAqB;EAEhC,OAAOC,aAAaA,CAACC,MAAc;IACtC,IAAI,CAAC,CAACA,MAAM,EAAE;MACV,IAAIA,MAAM,CAACC,WAAW,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;QAC1C,OAAO,WAAW;;MAEtB,IAAIF,MAAM,CAACC,WAAW,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;QAC1C,OAAO,WAAW;;;IAG1B,OAAO,gBAAgB;EAC3B;EAOUC,kBAAkBA,CACxBC,MAAwB,EACxBC,WAAsC,EACtCC,QAAgB;IAEhB,MAAMC,wBAAwB,GAAwB,IAAIC,GAAG,CAAC,CAC1D,CAACZ,UAAU,CAACa,mCAAmC,EAAEZ,mBAAmB,CAACa,4BAA4B,CAAC,EAClG,CAACd,UAAU,CAACe,0CAA0C,EAAEd,mBAAmB,CAACe,kBAAkB,CAAC,EAC/F,CAAChB,UAAU,CAACiB,2CAA2C,EAAEhB,mBAAmB,CAACiB,mBAAmB,CAAC,EACjG,CAAClB,UAAU,CAACmB,+CAA+C,EAAElB,mBAAmB,CAACmB,uBAAuB,CAAC,EACzG,CAACpB,UAAU,CAACqB,0CAA0C,EAAEpB,mBAAmB,CAACqB,cAAc,CAAC,EAC3F,CAACtB,UAAU,CAACuB,qCAAqC,EAAEtB,mBAAmB,CAACuB,SAAS,CAAC,EACjF,CAACxB,UAAU,CAACyB,gDAAgD,EAAExB,mBAAmB,CAACyB,yBAAyB,CAAC,EAC5G,CAAC1B,UAAU,CAAC2B,kDAAkD,EAAE1B,mBAAmB,CAAC2B,2BAA2B,CAAC,CACnH,CAAC;IAEFjB,wBAAwB,CAACkB,OAAO,CAAC,CAACC,aAAqB,EAAEC,UAAsB,KAAU;MACrF,IAAI,CAACC,eAAe,CAACD,UAAU,EAAED,aAAa,EAAEtB,MAAM,EAAEC,WAAW,EAAEC,QAAQ,CAAC;IAClF,CAAC,CAAC;IAGF,MAAMuB,iBAAiB,GAA8BC,IAAI,CAACC,KAAK,CAAC3B,MAAM,CAAC4B,UAAU,CAACC,WAAW,CAACtC,6BAA6B,EAAE,IAAI,CAAC,CAA8B;IAEhKuC,MAAM,CAACC,IAAI,CAACN,iBAAiB,CAAC,CAACJ,OAAO,CAAEW,KAAa,IAAU;MAC3D/B,WAAW,CAAC+B,KAAK,CAAC,GAAGP,iBAAiB,CAACO,KAAK,CAAC;IACjD,CAAC,CAAC;EACN;EAEUR,eAAeA,CACrBS,MAAkB,EAClBX,aAAqB,EACrBtB,MAAwB,EACxBC,WAAsC,EACtCC,QAAgB;IAEhB,MAAM8B,KAAK,GAAWhC,MAAM,CAAC4B,UAAU,CAACC,WAAW,CAACI,MAAM,EAAEC,SAAS,CAAC;IAEtE;IACA;IACA,IAAIF,KAAK,KAAK,CAAC9B,QAAQ,IAAIA,QAAQ,CAACiC,MAAM,CAACb,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;MAC/DrB,WAAW,CAACqB,aAAa,CAAC,GAAGU,KAAK,CAACI,iBAAiB,EAAE;;EAE9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}