{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports.js\";\nimport { PropertyId } from \"../sdk/Exports.js\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\nimport { WebsocketMessageFormatter } from \"./Exports.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\n      endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\n    }\n    const queryParams = {\n      format: \"simple\",\n      language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage)\n    };\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n  getSpeechRegionFromIntentRegion(intentRegion) {\n    switch (intentRegion) {\n      case \"West US\":\n      case \"US West\":\n      case \"westus\":\n        return \"uswest\";\n      case \"West US 2\":\n      case \"US West 2\":\n      case \"westus2\":\n        return \"uswest2\";\n      case \"South Central US\":\n      case \"US South Central\":\n      case \"southcentralus\":\n        return \"ussouthcentral\";\n      case \"West Central US\":\n      case \"US West Central\":\n      case \"westcentralus\":\n        return \"uswestcentral\";\n      case \"East US\":\n      case \"US East\":\n      case \"eastus\":\n        return \"useast\";\n      case \"East US 2\":\n      case \"US East 2\":\n      case \"eastus2\":\n        return \"useast2\";\n      case \"West Europe\":\n      case \"Europe West\":\n      case \"westeurope\":\n        return \"europewest\";\n      case \"North Europe\":\n      case \"Europe North\":\n      case \"northeurope\":\n        return \"europenorth\";\n      case \"Brazil South\":\n      case \"South Brazil\":\n      case \"southbrazil\":\n        return \"brazilsouth\";\n      case \"Australia East\":\n      case \"East Australia\":\n      case \"eastaustralia\":\n        return \"australiaeast\";\n      case \"Southeast Asia\":\n      case \"Asia Southeast\":\n      case \"southeastasia\":\n        return \"asiasoutheast\";\n      case \"East Asia\":\n      case \"Asia East\":\n      case \"eastasia\":\n        return \"asiaeast\";\n      default:\n        return intentRegion;\n    }\n  }\n}","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","IntentConnectionFactory","create","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","region","SpeechServiceConnection_IntentRegion","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","queryParams","format","language","SpeechServiceConnection_RecoLanguage","setCommonUrlParams","headers","token","undefined","headerName","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig","getSpeechRegionFromIntentRegion","intentRegion"],"sources":["src/common.speech/IntentConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SACIA,SAAS,EACTC,mBAAmB,QAChB,8BAA8B;AAKrC,SACIC,UAAU,QACP,mBAAmB;AAC1B,SACIC,qBAAqB,QAClB,4BAA4B;AACnC,SAGIC,yBAAyB,QACtB,cAAc;AACrB,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAM,MAAOC,uBAAwB,SAAQH,qBAAqB;EAEvDI,MAAMA,CACTC,MAAwB,EACxBC,QAAkB,EAClBC,YAAqB;IAErB,IAAIC,QAAQ,GAAWH,MAAM,CAACI,UAAU,CAACC,WAAW,CAACX,UAAU,CAACY,gCAAgC,CAAC;IACjG,IAAI,CAACH,QAAQ,EAAE;MACX,MAAMI,MAAM,GAAWP,MAAM,CAACI,UAAU,CAACC,WAAW,CAACX,UAAU,CAACc,oCAAoC,CAAC;MACrG,MAAMC,UAAU,GAAWd,qBAAqB,CAACe,aAAa,CAACH,MAAM,CAAC;MACtE,MAAMI,IAAI,GAAWX,MAAM,CAACI,UAAU,CAACC,WAAW,CAACX,UAAU,CAACkB,4BAA4B,EAAE,QAAQ,GAAGL,MAAM,GAAG,YAAY,GAAGE,UAAU,CAAC;MAC1IN,QAAQ,GAAGQ,IAAI,GAAG,sDAAsD;;IAG5E,MAAME,WAAW,GAA8B;MAC3CC,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAEf,MAAM,CAACI,UAAU,CAACC,WAAW,CAACX,UAAU,CAACsB,oCAAoC;KAC1F;IAED,IAAI,CAACC,kBAAkB,CAACjB,MAAM,EAAEa,WAAW,EAAEV,QAAQ,CAAC;IAEtD,MAAMe,OAAO,GAA8B,EAAE;IAC7C,IAAIjB,QAAQ,CAACkB,KAAK,KAAKC,SAAS,IAAInB,QAAQ,CAACkB,KAAK,KAAK,EAAE,EAAE;MACvDD,OAAO,CAACjB,QAAQ,CAACoB,UAAU,CAAC,GAAGpB,QAAQ,CAACkB,KAAK;;IAEjDD,OAAO,CAACrB,WAAW,CAACyB,YAAY,CAAC,GAAGpB,YAAY;IAEhDF,MAAM,CAACI,UAAU,CAACmB,WAAW,CAAC7B,UAAU,CAAC8B,2BAA2B,EAAErB,QAAQ,CAAC;IAE/E,MAAMsB,iBAAiB,GAAYzB,MAAM,CAACI,UAAU,CAACC,WAAW,CAAC,mCAAmC,EAAE,OAAO,CAAC,KAAK,MAAM;IACzH,OAAO,IAAIZ,mBAAmB,CAACU,QAAQ,EAAEU,WAAW,EAAEK,OAAO,EAAE,IAAItB,yBAAyB,EAAE,EAAEJ,SAAS,CAACkC,oBAAoB,CAAC1B,MAAM,CAAC,EAAEyB,iBAAiB,EAAEvB,YAAY,CAAC;EAC5K;EAEQyB,+BAA+BA,CAACC,YAAoB;IACxD,QAAQA,YAAY;MAChB,KAAK,SAAS;MACd,KAAK,SAAS;MACd,KAAK,QAAQ;QACT,OAAO,QAAQ;MACnB,KAAK,WAAW;MAChB,KAAK,WAAW;MAChB,KAAK,SAAS;QACV,OAAO,SAAS;MACpB,KAAK,kBAAkB;MACvB,KAAK,kBAAkB;MACvB,KAAK,gBAAgB;QACjB,OAAO,gBAAgB;MAC3B,KAAK,iBAAiB;MACtB,KAAK,iBAAiB;MACtB,KAAK,eAAe;QAChB,OAAO,eAAe;MAC1B,KAAK,SAAS;MACd,KAAK,SAAS;MACd,KAAK,QAAQ;QACT,OAAO,QAAQ;MACnB,KAAK,WAAW;MAChB,KAAK,WAAW;MAChB,KAAK,SAAS;QACV,OAAO,SAAS;MACpB,KAAK,aAAa;MAClB,KAAK,aAAa;MAClB,KAAK,YAAY;QACb,OAAO,YAAY;MACvB,KAAK,cAAc;MACnB,KAAK,cAAc;MACnB,KAAK,aAAa;QACd,OAAO,aAAa;MACxB,KAAK,cAAc;MACnB,KAAK,cAAc;MACnB,KAAK,aAAa;QACd,OAAO,aAAa;MACxB,KAAK,gBAAgB;MACrB,KAAK,gBAAgB;MACrB,KAAK,eAAe;QAChB,OAAO,eAAe;MAC1B,KAAK,gBAAgB;MACrB,KAAK,gBAAgB;MACrB,KAAK,eAAe;QAChB,OAAO,eAAe;MAC1B,KAAK,WAAW;MAChB,KAAK,WAAW;MAChB,KAAK,UAAU;QACX,OAAO,UAAU;MACrB;QACI,OAAOA,YAAY;;EAE/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}