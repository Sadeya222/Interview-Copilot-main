{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { AddedLmIntent, IntentConnectionFactory, IntentServiceRecognizer, RecognitionMode, RecognizerConfig } from \"../common.speech/Exports.js\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\nimport { Contracts } from \"./Contracts.js\";\nimport { PropertyId, Recognizer } from \"./Exports.js\";\n/**\n * Intent recognizer.\n * @class\n */\nexport class IntentRecognizer extends Recognizer {\n  /**\n   * Initializes an instance of the IntentRecognizer.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - The set of configuration properties.\n   * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    const configImpl = speechConfig;\n    Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new IntentConnectionFactory());\n    this.privAddedIntents = [];\n    this.privAddedLmIntents = {};\n    this.privDisposedIntentRecognizer = false;\n    this.privProperties = configImpl.properties;\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\n   * Gets the spoken language of recognition.\n   * @member IntentRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} the spoken language of recognition.\n   */\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member IntentRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\n   * @member IntentRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - Authorization token.\n   */\n  set authorizationToken(value) {\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\n   * The collection of properties and their values defined for this IntentRecognizer.\n   * @member IntentRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their\n   * values defined for this IntentRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts intent recognition, and stops after the first utterance is recognized.\n   * The task returns the recognition text and intent as result.\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n   * so it is suitable only for single shot recognition like command or query.\n   * For long-running recognition, use StartContinuousRecognitionAsync() instead.\n   * @member IntentRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\n   * @param err - Callback invoked in case of an error.\n   */\n  recognizeOnceAsync(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      const context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      const intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\n  }\n  /**\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startContinuousRecognitionAsync(cb, err) {\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      const context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      const intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops continuous intent recognition.\n   * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n   * This functionality is currently not included in the SDK itself.\n   * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startKeywordRecognitionAsync(model, cb, err) {\n    Contracts.throwIfNull(model, \"model\");\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  }\n  /**\n   * Stops continuous speech recognition.\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n   * This functionality is currently not included in the SDK itself.\n   * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopKeywordRecognitionAsync(cb, err) {\n    if (!!cb) {\n      try {\n        cb();\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    }\n  }\n  /**\n   * Adds a phrase that should be recognized as intent.\n   * @member IntentRecognizer.prototype.addIntent\n   * @function\n   * @public\n   * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\n   * @param {string} phrase - A String that specifies the phrase representing the intent.\n   */\n  addIntent(simplePhrase, intentId) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\n    this.privAddedIntents.push([intentId, simplePhrase]);\n  }\n  /**\n   * Adds an intent from Language Understanding service for recognition.\n   * @member IntentRecognizer.prototype.addIntentWithLanguageModel\n   * @function\n   * @public\n   * @param {string} intentId - A String that represents the identifier of the intent\n   * to be recognized. Ignored if intentName is empty.\n   * @param {string} model - The intent model from Language Understanding service.\n   * @param {string} intentName - The intent name defined in the intent model. If it\n   * is empty, all intent names defined in the model will be added.\n   */\n  addIntentWithLanguageModel(intentId, model, intentName) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts.throwIfNull(model, \"model\");\n    const modelImpl = model;\n    Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\n  }\n  /**\n   * @summary Adds all intents from the specified Language Understanding Model.\n   * @member IntentRecognizer.prototype.addAllIntents\n   * @function\n   * @public\n   * @function\n   * @public\n   * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\n   * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\n   */\n  addAllIntents(model, intentId) {\n    Contracts.throwIfNull(model, \"model\");\n    const modelImpl = model;\n    Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member IntentRecognizer.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioImpl = audioConfig;\n    return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  }\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedIntentRecognizer) {\n        return;\n      }\n      if (disposing) {\n        this.privDisposedIntentRecognizer = true;\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  buildSpeechContext() {\n    let appId;\n    let region;\n    let subscriptionKey;\n    const refGrammers = [];\n    if (undefined !== this.privUmbrellaIntent) {\n      appId = this.privUmbrellaIntent.modelImpl.appId;\n      region = this.privUmbrellaIntent.modelImpl.region;\n      subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\n    }\n    // Build the reference grammer array.\n    for (const intentId of Object.keys(this.privAddedLmIntents)) {\n      const addedLmIntent = this.privAddedLmIntents[intentId];\n      // validate all the same model, region, and key...\n      if (appId === undefined) {\n        appId = addedLmIntent.modelImpl.appId;\n      } else {\n        if (appId !== addedLmIntent.modelImpl.appId) {\n          throw new Error(\"Intents must all be from the same LUIS model\");\n        }\n      }\n      if (region === undefined) {\n        region = addedLmIntent.modelImpl.region;\n      } else {\n        if (region !== addedLmIntent.modelImpl.region) {\n          throw new Error(\"Intents must all be from the same LUIS model in a single region\");\n        }\n      }\n      if (subscriptionKey === undefined) {\n        subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\n      } else {\n        if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\n          throw new Error(\"Intents must all use the same subscription key\");\n        }\n      }\n      const grammer = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\n      refGrammers.push(grammer);\n    }\n    return {\n      Intent: {\n        id: appId,\n        key: subscriptionKey === undefined ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\n        provider: \"LUIS\"\n      },\n      ReferenceGrammars: undefined === this.privUmbrellaIntent ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"]\n    };\n  }\n}","map":{"version":3,"names":["AddedLmIntent","IntentConnectionFactory","IntentServiceRecognizer","RecognitionMode","RecognizerConfig","marshalPromiseToCallbacks","Contracts","PropertyId","Recognizer","IntentRecognizer","constructor","speechConfig","audioConfig","throwIfNullOrUndefined","configImpl","properties","privAddedIntents","privAddedLmIntents","privDisposedIntentRecognizer","privProperties","throwIfNullOrWhitespace","getProperty","SpeechServiceConnection_RecoLanguage","speechRecognitionLanguage","throwIfDisposed","authorizationToken","SpeechServiceAuthorization_Token","value","setProperty","recognizeOnceAsync","cb","err","Object","keys","length","undefined","privUmbrellaIntent","context","buildSpeechContext","privReco","speechContext","setSection","Intent","dynamicGrammar","addReferenceGrammar","ReferenceGrammars","intentReco","setIntents","recognizeOnceAsyncImpl","Interactive","startContinuousRecognitionAsync","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","startKeywordRecognitionAsync","model","throwIfNull","stopKeywordRecognitionAsync","e","addIntent","simplePhrase","intentId","push","addIntentWithLanguageModel","intentName","modelImpl","appId","addAllIntents","close","errorCb","dispose","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioImpl","disposing","_super","call","region","subscriptionKey","refGrammers","addedLmIntent","Error","grammer","id","key","SpeechServiceConnection_Key","provider"],"sources":["src/sdk/IntentRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}