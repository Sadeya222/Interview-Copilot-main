{"ast":null,"code":"'use strict';\n\n/* global fetch, btoa, Headers */\nrequire(\"core-js/modules/web.url-search-params.delete.js\");\nrequire(\"core-js/modules/web.url-search-params.has.js\");\nrequire(\"core-js/modules/web.url-search-params.size.js\");\nrequire(\"core-js/modules/web.dom-exception.stack.js\");\nconst core = require('./core');\nclass StatusError extends Error {\n  constructor(res, ...params) {\n    super(...params);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError);\n    }\n    this.name = 'StatusError';\n    this.message = res.statusMessage;\n    this.statusCode = res.status;\n    this.res = res;\n    this.json = res.json.bind(res);\n    this.text = res.text.bind(res);\n    this.arrayBuffer = res.arrayBuffer.bind(res);\n    let buffer;\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer();\n      return buffer;\n    };\n    Object.defineProperty(this, 'responseBody', {\n      get\n    });\n    // match Node.js headers object\n    this.headers = {};\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value;\n    }\n  }\n}\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '');\n  let parsed = new URL(_url);\n  if (!headers) headers = {};\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password);\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search);\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`);\n  }\n  if (body) {\n    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body) || typeof body === 'string') {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body);\n      headers['Content-Type'] = 'application/json';\n    } else {\n      throw new Error('Unknown body type.');\n    }\n  }\n  _headers = new Headers({\n    ...(headers || {}),\n    ..._headers\n  });\n  const resp = await fetch(parsed, {\n    method,\n    headers: _headers,\n    body\n  });\n  resp.statusCode = resp.status;\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp);\n  }\n  if (encoding === 'json') return resp.json();else if (encoding === 'buffer') return resp.arrayBuffer();else if (encoding === 'string') return resp.text();else return resp;\n};\nmodule.exports = core(mkrequest);","map":{"version":3,"names":["require","core","StatusError","Error","constructor","res","params","captureStackTrace","name","message","statusMessage","statusCode","status","json","bind","text","arrayBuffer","buffer","get","Object","defineProperty","headers","key","value","entries","toLowerCase","mkrequest","statusCodes","method","encoding","baseurl","_url","body","_headers","parsed","URL","username","Authorization","btoa","password","protocol","host","pathname","search","ArrayBuffer","isView","JSON","stringify","Headers","resp","fetch","has","module","exports"],"sources":["C:/Users/Perfect/Interview-Copilot-main/Interview-Copilot-main/node_modules/bent/src/browser.js"],"sourcesContent":["'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}