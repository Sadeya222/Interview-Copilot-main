{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { CancellationErrorCode, OutputFormat, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionCanceledEventArgs, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports.js\";\nimport { CancellationErrorCodePropertyName, DetailedSpeechPhrase, EnumTranslation, OutputFormatPropertyName, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports.js\";\n// eslint-disable-next-line max-classes-per-file\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\n    this.privSpeechRecognizer = speechRecognizer;\n  }\n  processTypeSpecificMessages(connectionMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n      const resultProps = new PropertyCollection();\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      let processed = false;\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"speech.hypothesis\":\n        case \"speech.fragment\":\n          const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n          const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n          result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined,\n          // Speaker Id\n          undefined, connectionMessage.textBody, resultProps);\n          this.privRequestSession.onHypothesis(offset);\n          const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n          if (!!this.privSpeechRecognizer.recognizing) {\n            try {\n              this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n              /* eslint-disable no-empty */\n            } catch (error) {\n              // Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n          processed = true;\n          break;\n        case \"speech.phrase\":\n          const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n          const resultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n          this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n          if (ResultReason.Canceled === resultReason) {\n            const cancelReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            const cancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\n            yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\n          } else {\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined,\n                // Speaker Id\n                undefined, connectionMessage.textBody, resultProps);\n              } else {\n                const detailed = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                const totalOffset = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\n                const offsetCorrectedJson = detailed.getJsonWithCorrectedOffsets(totalOffset);\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, totalOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined,\n                // Speaker Id\n                undefined, offsetCorrectedJson, resultProps);\n              }\n              const event = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n              if (!!this.privSpeechRecognizer.recognized) {\n                try {\n                  this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\n                  /* eslint-disable no-empty */\n                } catch (error) {\n                  // Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              }\n              // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }\n          processed = true;\n          break;\n        default:\n          break;\n      }\n      return processed;\n    });\n  }\n  // Cancels recognition.\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n    if (!!this.privSpeechRecognizer.canceled) {\n      const cancelEvent = new SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n      try {\n        this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n        /* eslint-disable no-empty */\n      } catch (_a) {}\n    }\n    if (!!this.privSuccessCallback) {\n      const result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined,\n      // Text\n      undefined,\n      // Duration\n      undefined,\n      // Offset\n      undefined,\n      // Language\n      undefined,\n      // Language Detection Confidence\n      undefined,\n      // Speaker Id\n      error, undefined,\n      // Json\n      properties);\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* eslint-disable no-empty */\n      } catch (_b) {}\n    }\n  }\n}","map":{"version":3,"names":["CancellationErrorCode","OutputFormat","PropertyCollection","PropertyId","ResultReason","SpeechRecognitionCanceledEventArgs","SpeechRecognitionEventArgs","SpeechRecognitionResult","CancellationErrorCodePropertyName","DetailedSpeechPhrase","EnumTranslation","OutputFormatPropertyName","RecognitionStatus","ServiceRecognizerBase","SimpleSpeechPhrase","SpeechHypothesis","SpeechServiceRecognizer","constructor","authentication","connectionFactory","audioSource","recognizerConfig","speechRecognizer","privSpeechRecognizer","processTypeSpecificMessages","connectionMessage","result","resultProps","setProperty","SpeechServiceResponse_JsonResult","textBody","processed","path","toLowerCase","hypothesis","fromJSON","offset","Offset","privRequestSession","currentTurnAudioOffset","requestId","RecognizingSpeech","Text","Duration","Language","LanguageDetectionConfidence","undefined","onHypothesis","ev","sessionId","recognizing","error","simple","resultReason","implTranslateRecognitionResult","onPhraseRecognized","Canceled","cancelReason","implTranslateCancelResult","cancellationErrorCode","implTranslateCancelErrorCode","cancelRecognitionLocal","implTranslateErrorDetails","isSpeechEnded","NoMatch","InitialSilenceTimeout","privRecognizerConfig","parameters","getProperty","Simple","DisplayText","detailed","totalOffset","offsetCorrectedJson","getJsonWithCorrectedOffsets","Success","NBest","Display","event","recognized","privSuccessCallback","e","privErrorCallback","cancelRecognition","cancellationReason","errorCode","properties","canceled","cancelEvent","_a","_b"],"sources":["src/common.speech/SpeechServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}