{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { createNoDashGuid, Deferred } from \"../../common/Exports.js\";\n/**\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\n * TODO: define what telemetry is required.\n */\nexport class ConversationRequestSession {\n  constructor(sessionId) {\n    this.privIsDisposed = false;\n    this.privDetachables = new Array();\n    this.privSessionId = sessionId;\n    this.privRequestId = createNoDashGuid();\n    this.privRequestCompletionDeferral = new Deferred();\n  }\n  get sessionId() {\n    return this.privSessionId;\n  }\n  get requestId() {\n    return this.privRequestId;\n  }\n  get completionPromise() {\n    return this.privRequestCompletionDeferral.promise;\n  }\n  onPreConnectionStart(authFetchEventId, connectionId) {\n    this.privSessionId = connectionId;\n  }\n  onAuthCompleted(isError) {\n    if (isError) {\n      this.onComplete();\n    }\n  }\n  onConnectionEstablishCompleted(statusCode) {\n    if (statusCode === 200) {\n      return;\n    } else if (statusCode === 403) {\n      this.onComplete();\n    }\n  }\n  onServiceTurnEndResponse(continuousRecognition) {\n    if (!continuousRecognition) {\n      this.onComplete();\n    } else {\n      this.privRequestId = createNoDashGuid();\n    }\n  }\n  dispose() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privIsDisposed) {\n        // we should have completed by now. If we did not its an unknown error.\n        this.privIsDisposed = true;\n        for (const detachable of this.privDetachables) {\n          yield detachable.detach();\n        }\n      }\n    });\n  }\n  onComplete() {\n    //\n  }\n}","map":{"version":3,"names":["createNoDashGuid","Deferred","ConversationRequestSession","constructor","sessionId","privIsDisposed","privDetachables","Array","privSessionId","privRequestId","privRequestCompletionDeferral","requestId","completionPromise","promise","onPreConnectionStart","authFetchEventId","connectionId","onAuthCompleted","isError","onComplete","onConnectionEstablishCompleted","statusCode","onServiceTurnEndResponse","continuousRecognition","dispose","detachable","detach"],"sources":["src/common.speech/Transcription/ConversationRequestSession.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports.js\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SACIA,gBAAgB,EAChBC,QAAQ,QAEL,yBAAyB;AAEhC;;;;AAIA,OAAM,MAAOC,0BAA0B;EAOnCC,YAAmBC,SAAiB;IAN5B,KAAAC,cAAc,GAAY,KAAK;IAC/B,KAAAC,eAAe,GAAkB,IAAIC,KAAK,EAAe;IAM7D,IAAI,CAACC,aAAa,GAAGJ,SAAS;IAC9B,IAAI,CAACK,aAAa,GAAGT,gBAAgB,EAAE;IACvC,IAAI,CAACU,6BAA6B,GAAG,IAAIT,QAAQ,EAAQ;EAC7D;EAEA,IAAWG,SAASA,CAAA;IAChB,OAAO,IAAI,CAACI,aAAa;EAC7B;EAEA,IAAWG,SAASA,CAAA;IAChB,OAAO,IAAI,CAACF,aAAa;EAC7B;EAEA,IAAWG,iBAAiBA,CAAA;IACxB,OAAO,IAAI,CAACF,6BAA6B,CAACG,OAAO;EACrD;EAEOC,oBAAoBA,CAACC,gBAAwB,EAAEC,YAAoB;IACtE,IAAI,CAACR,aAAa,GAAGQ,YAAY;EACrC;EAEOC,eAAeA,CAACC,OAAgB;IACnC,IAAIA,OAAO,EAAE;MACT,IAAI,CAACC,UAAU,EAAE;;EAEzB;EAEOC,8BAA8BA,CAACC,UAAkB;IACpD,IAAIA,UAAU,KAAK,GAAG,EAAE;MACpB;KACH,MAAM,IAAIA,UAAU,KAAK,GAAG,EAAE;MAC3B,IAAI,CAACF,UAAU,EAAE;;EAEzB;EAEOG,wBAAwBA,CAACC,qBAA8B;IAC1D,IAAI,CAACA,qBAAqB,EAAE;MACxB,IAAI,CAACJ,UAAU,EAAE;KACpB,MAAM;MACH,IAAI,CAACV,aAAa,GAAGT,gBAAgB,EAAE;;EAE/C;EAEawB,OAAOA,CAAA;;MAChB,IAAI,CAAC,IAAI,CAACnB,cAAc,EAAE;QACtB;QACA,IAAI,CAACA,cAAc,GAAG,IAAI;QAC1B,KAAK,MAAMoB,UAAU,IAAI,IAAI,CAACnB,eAAe,EAAE;UAC3C,MAAMmB,UAAU,CAACC,MAAM,EAAE;;;IAGrC,CAAC;;EAEOP,UAAUA,CAAA;IACd;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}