{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { PropertyId } from \"./Exports.js\";\n/**\n * Represents collection of properties and their values.\n * @class PropertyCollection\n */\nexport class PropertyCollection {\n  constructor() {\n    this.privKeys = [];\n    this.privValues = [];\n  }\n  /**\n   * Returns the property value in type String.\n   * Currently only String, int and bool are allowed.\n   * If the name is not available, the specified defaultValue is returned.\n   * @member PropertyCollection.prototype.getProperty\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string | number | boolean} def - The default value which is returned if the parameter\n   * is not available in the collection.\n   * @returns {string} value of the parameter.\n   */\n  getProperty(key, def) {\n    let keyToUse;\n    if (typeof key === \"string\") {\n      keyToUse = key;\n    } else {\n      keyToUse = PropertyId[key];\n    }\n    for (let n = 0; n < this.privKeys.length; n++) {\n      if (this.privKeys[n] === keyToUse) {\n        return this.privValues[n];\n      }\n    }\n    if (def === undefined) {\n      return undefined;\n    }\n    return String(def);\n  }\n  /**\n   * Sets the String value of the parameter specified by name.\n   * @member PropertyCollection.prototype.setProperty\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string} value - The value of the parameter.\n   */\n  setProperty(key, value) {\n    let keyToUse;\n    if (typeof key === \"string\") {\n      keyToUse = key;\n    } else {\n      keyToUse = PropertyId[key];\n    }\n    for (let n = 0; n < this.privKeys.length; n++) {\n      if (this.privKeys[n] === keyToUse) {\n        this.privValues[n] = value;\n        return;\n      }\n    }\n    this.privKeys.push(keyToUse);\n    this.privValues.push(value);\n  }\n  /**\n   * Clones the collection.\n   * @member PropertyCollection.prototype.clone\n   * @function\n   * @public\n   * @returns {PropertyCollection} A copy of the collection.\n   */\n  clone() {\n    const clonedMap = new PropertyCollection();\n    for (let n = 0; n < this.privKeys.length; n++) {\n      clonedMap.privKeys.push(this.privKeys[n]);\n      clonedMap.privValues.push(this.privValues[n]);\n    }\n    return clonedMap;\n  }\n  /**\n   * Merges this set of properties into another, no overwrites.\n   * @member PropertyCollection.prototype.mergeTo\n   * @function\n   * @public\n   * @param {PropertyCollection}  destinationCollection - The collection to merge into.\n   */\n  mergeTo(destinationCollection) {\n    this.privKeys.forEach(key => {\n      if (destinationCollection.getProperty(key, undefined) === undefined) {\n        const value = this.getProperty(key);\n        destinationCollection.setProperty(key, value);\n      }\n    });\n  }\n  /**\n   * Get the keys in Property Collection.\n   * @member PropertyCollection.prototype.keys\n   * @function\n   * @public\n   * @returns {string []} Keys in the collection.\n   */\n  get keys() {\n    return this.privKeys;\n  }\n}","map":{"version":3,"names":["PropertyId","PropertyCollection","constructor","privKeys","privValues","getProperty","key","def","keyToUse","n","length","undefined","String","setProperty","value","push","clone","clonedMap","mergeTo","destinationCollection","forEach","keys"],"sources":["src/sdk/PropertyCollection.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n"],"mappings":";AAAA;AACA;AAEA,SAASA,UAAU,QAAQ,cAAc;AAEzC;;;;AAIA,OAAM,MAAOC,kBAAkB;EAA/BC,YAAA;IACY,KAAAC,QAAQ,GAAa,EAAc;IACnC,KAAAC,UAAU,GAAa,EAAc;EA4GjD;EA1GI;;;;;;;;;;;;EAYOC,WAAWA,CAACC,GAAwB,EAAEC,GAA+B;IACxE,IAAIC,QAAgB;IAEpB,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;MACzBE,QAAQ,GAAGF,GAAG;KACjB,MAAM;MACHE,QAAQ,GAAGR,UAAU,CAACM,GAAG,CAAC;;IAG9B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACN,QAAQ,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3C,IAAI,IAAI,CAACN,QAAQ,CAACM,CAAC,CAAC,KAAKD,QAAQ,EAAE;QAC/B,OAAO,IAAI,CAACJ,UAAU,CAACK,CAAC,CAAC;;;IAIjC,IAAIF,GAAG,KAAKI,SAAS,EAAE;MACnB,OAAOA,SAAS;;IAGpB,OAAOC,MAAM,CAACL,GAAG,CAAC;EACtB;EAEA;;;;;;;;EAQOM,WAAWA,CAACP,GAAwB,EAAEQ,KAAa;IACtD,IAAIN,QAAgB;IAEpB,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;MACzBE,QAAQ,GAAGF,GAAG;KACjB,MAAM;MACHE,QAAQ,GAAGR,UAAU,CAACM,GAAG,CAAC;;IAG9B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACN,QAAQ,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3C,IAAI,IAAI,CAACN,QAAQ,CAACM,CAAC,CAAC,KAAKD,QAAQ,EAAE;QAC/B,IAAI,CAACJ,UAAU,CAACK,CAAC,CAAC,GAAGK,KAAK;QAC1B;;;IAIR,IAAI,CAACX,QAAQ,CAACY,IAAI,CAACP,QAAQ,CAAC;IAC5B,IAAI,CAACJ,UAAU,CAACW,IAAI,CAACD,KAAK,CAAC;EAC/B;EAEA;;;;;;;EAOOE,KAAKA,CAAA;IACR,MAAMC,SAAS,GAAG,IAAIhB,kBAAkB,EAAE;IAE1C,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACN,QAAQ,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3CQ,SAAS,CAACd,QAAQ,CAACY,IAAI,CAAC,IAAI,CAACZ,QAAQ,CAACM,CAAC,CAAC,CAAC;MACzCQ,SAAS,CAACb,UAAU,CAACW,IAAI,CAAC,IAAI,CAACX,UAAU,CAACK,CAAC,CAAC,CAAC;;IAGjD,OAAOQ,SAAS;EACpB;EAEA;;;;;;;EAOOC,OAAOA,CAACC,qBAAyC;IACpD,IAAI,CAAChB,QAAQ,CAACiB,OAAO,CAAEd,GAAwB,IAAU;MACrD,IAAIa,qBAAqB,CAACd,WAAW,CAACC,GAAG,EAAEK,SAAS,CAAC,KAAKA,SAAS,EAAE;QACjE,MAAMG,KAAK,GAAG,IAAI,CAACT,WAAW,CAACC,GAAG,CAAC;QACnCa,qBAAqB,CAACN,WAAW,CAACP,GAAG,EAAEQ,KAAK,CAAC;;IAErD,CAAC,CAAC;EACN;EAEA;;;;;;;EAOA,IAAWO,IAAIA,CAAA;IACX,OAAO,IAAI,CAAClB,QAAQ;EACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}