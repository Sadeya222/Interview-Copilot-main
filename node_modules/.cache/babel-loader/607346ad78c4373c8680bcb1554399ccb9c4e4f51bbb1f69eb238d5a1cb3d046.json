{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { RecognizerConfig, SpeakerRecognitionConnectionFactory, SpeakerServiceRecognizer } from \"../common.speech/Exports.js\";\nimport { Contracts } from \"./Contracts.js\";\nimport { PropertyId, Recognizer } from \"./Exports.js\";\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\nexport class SpeakerRecognizer extends Recognizer {\n  /**\n   * Initializes an instance of the SpeakerRecognizer.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - The set of configuration properties.\n   * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    const configImpl = speechConfig;\n    Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\n    this.privAudioConfigImpl = audioConfig;\n    Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n    this.privDisposedSpeakerRecognizer = false;\n    this.privProperties = configImpl.properties;\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this SpeakerRecognizer.\n   * @member SpeakerRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Get recognition result for model using given audio\n   * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @async\n   * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\n   * @param cb - Callback invoked once result is returned.\n   * @param err - Callback invoked in case of an error.\n   */\n  recognizeOnceAsync(model) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n      return this.recognizeSpeakerOnceAsyncImpl(model);\n    });\n  }\n  /**\n   * Included for compatibility\n   * @member SpeakerRecognizer.prototype.close\n   * @function\n   * @public\n   * @async\n   */\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n      yield this.dispose(true);\n    });\n  }\n  recognizeSpeakerOnceAsyncImpl(model) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n      yield this.implRecognizerStop();\n      const result = yield this.privReco.recognizeSpeaker(model);\n      yield this.implRecognizerStop();\n      return result;\n    });\n  }\n  implRecognizerStop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privReco) {\n        yield this.privReco.stopRecognizing();\n      }\n      return;\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioImpl = audioConfig;\n    return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  }\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedSpeakerRecognizer) {\n        return;\n      }\n      if (disposing) {\n        this.privDisposedSpeakerRecognizer = true;\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n}","map":{"version":3,"names":["RecognizerConfig","SpeakerRecognitionConnectionFactory","SpeakerServiceRecognizer","Contracts","PropertyId","Recognizer","SpeakerRecognizer","constructor","speechConfig","audioConfig","throwIfNullOrUndefined","configImpl","properties","privAudioConfigImpl","throwIfNull","privDisposedSpeakerRecognizer","privProperties","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","recognizeOnceAsync","model","throwIfDisposed","recognizeSpeakerOnceAsyncImpl","close","dispose","implRecognizerStop","result","privReco","recognizeSpeaker","stopRecognizing","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioImpl","disposing","_super","call"],"sources":["src/sdk/SpeakerRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAGIA,gBAAgB,EAEhBC,mCAAmC,EACnCC,wBAAwB,QAErB,6BAA6B;AAGpC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAEIC,UAAU,EACVC,UAAU,QAIP,cAAc;AAGrB;;;;;AAKA,OAAM,MAAOC,iBAAkB,SAAQD,UAAU;EAI7C;;;;;;EAMAE,YAAmBC,YAA0B,EAAEC,WAAwB;IACnEN,SAAS,CAACO,sBAAsB,CAACF,YAAY,EAAE,cAAc,CAAC;IAC9D,MAAMG,UAAU,GAAqBH,YAAgC;IACrEL,SAAS,CAACO,sBAAsB,CAACC,UAAU,EAAE,cAAc,CAAC;IAE5D,KAAK,CAACF,WAAW,EAAEE,UAAU,CAACC,UAAU,EAAE,IAAIX,mCAAmC,EAAE,CAAC;IACpF,IAAI,CAACY,mBAAmB,GAAGJ,WAA8B;IACzDN,SAAS,CAACW,WAAW,CAAC,IAAI,CAACD,mBAAmB,EAAE,aAAa,CAAC;IAE9D,IAAI,CAACE,6BAA6B,GAAG,KAAK;IAC1C,IAAI,CAACC,cAAc,GAAGL,UAAU,CAACC,UAAU;EAC/C;EAEA;;;;;;;EAOA,IAAWK,kBAAkBA,CAAA;IACzB,OAAO,IAAI,CAACL,UAAU,CAACM,WAAW,CAACd,UAAU,CAACe,gCAAgC,CAAC;EACnF;EAEA;;;;;;;EAOA,IAAWF,kBAAkBA,CAACG,KAAa;IACvCjB,SAAS,CAACkB,uBAAuB,CAACD,KAAK,EAAE,OAAO,CAAC;IACjD,IAAI,CAACR,UAAU,CAACU,WAAW,CAAClB,UAAU,CAACe,gCAAgC,EAAEC,KAAK,CAAC;EACnF;EAEA;;;;;;;EAOA,IAAWR,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACI,cAAc;EAC9B;EAEA;;;;;;;;;;EAUaO,kBAAkBA,CAACC,KAA4D;;MACxFrB,SAAS,CAACsB,eAAe,CAAC,IAAI,CAACV,6BAA6B,CAAC;MAE7D,OAAO,IAAI,CAACW,6BAA6B,CAACF,KAAK,CAAC;IACpD,CAAC;;EAED;;;;;;;EAOaG,KAAKA,CAAA;;MACdxB,SAAS,CAACsB,eAAe,CAAC,IAAI,CAACV,6BAA6B,CAAC;MAC7D,MAAM,IAAI,CAACa,OAAO,CAAC,IAAI,CAAC;IAC5B,CAAC;;EAEeF,6BAA6BA,CAACF,KAA8B;;MACxErB,SAAS,CAACsB,eAAe,CAAC,IAAI,CAACV,6BAA6B,CAAC;MAE7D,MAAM,IAAI,CAACc,kBAAkB,EAAE;MAC/B,MAAMC,MAAM,GAA6B,MAAM,IAAI,CAACC,QAAQ,CAACC,gBAAgB,CAACR,KAAK,CAAC;MACpF,MAAM,IAAI,CAACK,kBAAkB,EAAE;MAE/B,OAAOC,MAAM;IACjB,CAAC;;EAEeD,kBAAkBA,CAAA;;MAC9B,IAAI,IAAI,CAACE,QAAQ,EAAE;QACf,MAAM,IAAI,CAACA,QAAQ,CAACE,eAAe,EAAE;;MAEzC;IACJ,CAAC;;EAESC,sBAAsBA,CAAC1B,YAAiC;IAC9D,OAAO,IAAIR,gBAAgB,CAACQ,YAAY,EAAE,IAAI,CAACQ,cAAc,CAAC;EAClE;EAEUmB,uBAAuBA,CAACC,cAA+B,EAAEC,iBAAqC,EAAE5B,WAAwB,EAAE6B,gBAAkC;IAClK,MAAMC,SAAS,GAAoB9B,WAA8B;IACjE,OAAO,IAAIP,wBAAwB,CAACkC,cAAc,EAAEC,iBAAiB,EAAEE,SAAS,EAAED,gBAAgB,EAAE,IAAI,CAAC;EAC7G;EAEgBV,OAAOA,CAACY,SAAkB;;;;;;;MACtC,IAAI,IAAI,CAACzB,6BAA6B,EAAE;QACpC;;MAGJ,IAAIyB,SAAS,EAAE;QACX,IAAI,CAACzB,6BAA6B,GAAG,IAAI;QACzC,MAAM0B,MAAA,CAAMb,OAAO,CAAAc,IAAA,OAACF,SAAS,CAAC;;IAEtC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}