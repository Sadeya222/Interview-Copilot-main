{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file */\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports.js\";\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\nimport { WebsocketMessageFormatter } from \"./Exports.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    const applicationId = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\n    const dialogType = config.parameters.getProperty(PropertyId.Conversation_DialogType);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n    const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\n    const requestTurnStatus = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\n    const queryParams = {};\n    queryParams[HeaderNames.ConnectionId] = connectionId;\n    queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n    queryParams[QueryParameterNames.Language] = language;\n    queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\n    if (applicationId) {\n      queryParams[QueryParameterNames.BotId] = applicationId;\n      if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\n        queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\n      }\n    }\n    const resourceInfix = dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\" : \"\";\n    const version = dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\" : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\" : \"v0\";\n    const headers = {};\n    if (authInfo.token != null && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    // The URL used for connection is chosen in a priority order of specification:\n    //  1. If a custom endpoint is provided, that URL is used verbatim.\n    //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\n    //  3. If no custom connection details are provided, a URL is constructed from default values.\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\n    if (!endpoint) {\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\n      const standardizedHost = host.endsWith(\"/\") ? host : host + \"/\";\n      endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\n    }\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n}\nDialogConnectionFactory.ApiKey = \"api\";\nDialogConnectionFactory.BaseUrl = \"convai.speech\";","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","OutputFormatPropertyName","DialogServiceConfig","OutputFormat","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","DialogConnectionFactory","create","config","authInfo","connectionId","applicationId","parameters","getProperty","Conversation_ApplicationId","dialogType","Conversation_DialogType","region","SpeechServiceConnection_Region","language","SpeechServiceConnection_RecoLanguage","requestTurnStatus","Conversation_Request_Bot_Status_Messages","queryParams","ConnectionId","Format","Simple","toLowerCase","Language","RequestBotStatusMessages","BotId","DialogTypes","CustomCommands","CustomCommandsAppId","resourceInfix","version","BotFramework","headers","token","headerName","endpoint","SpeechServiceConnection_Endpoint","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","BaseUrl","standardizedHost","endsWith","ApiKey","setCommonUrlParams","enableCompression","fromRecognizerConfig"],"sources":["src/common.speech/DialogConnectorFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}