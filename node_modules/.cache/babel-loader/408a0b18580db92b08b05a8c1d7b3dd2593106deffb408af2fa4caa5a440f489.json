{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports.js\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports.js\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\nimport { OutputFormatPropertyName, WebsocketMessageFormatter } from \"./Exports.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.multiaudioRelativeUri = \"/speech/recognition/multiaudio\";\n  }\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    const hostDefault = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\n    const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\n    const queryParams = {};\n    this.setQueryParams(queryParams, config, endpoint);\n    if (!endpoint) {\n      endpoint = host;\n    }\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n  setQueryParams(queryParams, config, endpointUrl) {\n    const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n    const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n    if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\n      queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n    }\n    if (language && !(QueryParameterNames.Language in queryParams)) {\n      queryParams[QueryParameterNames.Language] = language;\n    }\n    const wordLevelTimings = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\n    const detailed = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\n    if (wordLevelTimings || detailed) {\n      queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\n    }\n    this.setCommonUrlParams(config, queryParams, endpointUrl);\n  }\n}","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","OutputFormat","PropertyId","ConnectionFactoryBase","OutputFormatPropertyName","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","TranscriberConnectionFactory","constructor","multiaudioRelativeUri","create","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","hostDefault","host","SpeechServiceConnection_Host","queryParams","setQueryParams","headers","token","headerName","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig","endpointUrl","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","CustomSpeechDeploymentId","Language","wordLevelTimings","SpeechServiceResponse_RequestWordLevelTimestamps","toLowerCase","detailed","Simple","Format","Detailed","setCommonUrlParams"],"sources":["src/common.speech/TranscriberConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}