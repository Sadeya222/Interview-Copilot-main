{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory.js\";\nimport { DialogServiceAdapter, RecognitionMode, RecognizerConfig } from \"../common.speech/Exports.js\";\nimport { Deferred, marshalPromiseToCallbacks } from \"../common/Exports.js\";\nimport { Contracts } from \"./Contracts.js\";\nimport { Recognizer } from \"./Exports.js\";\nimport { PropertyId } from \"./PropertyId.js\";\n/**\n * Dialog Service Connector\n * @class DialogServiceConnector\n */\nexport class DialogServiceConnector extends Recognizer {\n  /**\n   * Initializes an instance of the DialogServiceConnector.\n   * @constructor\n   * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n  constructor(dialogConfig, audioConfig) {\n    const dialogServiceConfigImpl = dialogConfig;\n    Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n    super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\n    this.isTurnComplete = true;\n    this.privIsDisposed = false;\n    this.privProperties = dialogServiceConfigImpl.properties.clone();\n    const agentConfig = this.buildAgentConfig();\n    this.privReco.agentConfig.set(agentConfig);\n  }\n  /**\n   * Starts a connection to the service.\n   * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\n   *\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n   * be notified when the connection is established.\n   * @member DialogServiceConnector.prototype.connect\n   * @function\n   * @public\n   */\n  connect(cb, err) {\n    marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\n  }\n  /**\n   * Closes the connection the service.\n   * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\n   *\n   * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\n   */\n  disconnect(cb, err) {\n    marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member DialogServiceConnector.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Sets the authorization token used to communicate with the service.\n   * @member DialogServiceConnector.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this DialogServiceConnector.\n   * @member DialogServiceConnector.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /** Gets the template for the activity generated by service from speech.\n   * Properties from the template will be stamped on the generated activity.\n   * It can be empty\n   */\n  get speechActivityTemplate() {\n    return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n  }\n  /** Sets the template for the activity generated by service from speech.\n   * Properties from the template will be stamped on the generated activity.\n   * It can be null or empty.\n   * Note: it has to be a valid Json object.\n   */\n  set speechActivityTemplate(speechActivityTemplate) {\n    this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n  }\n  /**\n   * Starts recognition and stops after the first utterance is recognized.\n   * @member DialogServiceConnector.prototype.listenOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the reco has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n  listenOnceAsync(cb, err) {\n    if (this.isTurnComplete) {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      const callbackHolder = () => __awaiter(this, void 0, void 0, function* () {\n        yield this.privReco.connect();\n        yield this.implRecognizerStop();\n        this.isTurnComplete = false;\n        const ret = new Deferred();\n        yield this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\n        const e = yield ret.promise;\n        yield this.implRecognizerStop();\n        return e;\n      });\n      const retPromise = callbackHolder();\n      retPromise.catch(() => {\n        // Destroy the recognizer.\n        // We've done all we can here.\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.dispose(true).catch(() => {});\n      });\n      marshalPromiseToCallbacks(retPromise.finally(() => {\n        this.isTurnComplete = true;\n      }), cb, err);\n    }\n  }\n  sendActivityAsync(activity, cb, errCb) {\n    marshalPromiseToCallbacks(this.privReco.sendMessage(activity), cb, errCb);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member DialogServiceConnector.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, err) {\n    Contracts.throwIfDisposed(this.privIsDisposed);\n    marshalPromiseToCallbacks(this.dispose(true), cb, err);\n  }\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privIsDisposed) {\n        return;\n      }\n      if (disposing) {\n        this.privIsDisposed = true;\n        yield this.implRecognizerStop();\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioSource = audioConfig;\n    return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  }\n  buildAgentConfig() {\n    const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n    return {\n      botInfo: {\n        commType: communicationType,\n        commandsCulture: undefined,\n        connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\n        conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\n        fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\n        ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\n      },\n      version: 0.2\n    };\n  }\n}","map":{"version":3,"names":["DialogConnectionFactory","DialogServiceAdapter","RecognitionMode","RecognizerConfig","Deferred","marshalPromiseToCallbacks","Contracts","Recognizer","PropertyId","DialogServiceConnector","constructor","dialogConfig","audioConfig","dialogServiceConfigImpl","throwIfNull","properties","isTurnComplete","privIsDisposed","privProperties","clone","agentConfig","buildAgentConfig","privReco","set","connect","cb","err","disconnect","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","speechActivityTemplate","Conversation_Speech_Activity_Template","listenOnceAsync","throwIfDisposed","callbackHolder","__awaiter","implRecognizerStop","ret","recognize","Conversation","resolve","reject","e","promise","retPromise","catch","dispose","finally","sendActivityAsync","activity","errCb","sendMessage","close","disposing","_super","call","createRecognizerConfig","speechConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioSource","communicationType","botInfo","commType","commandsCulture","undefined","connectionId","Conversation_Agent_Connection_Id","conversationId","Conversation_Conversation_Id","fromId","Conversation_From_Id","ttsAudioFormat","SpeechServiceConnection_SynthOutputFormat","version"],"sources":["src/sdk/DialogServiceConnector.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory.js\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}