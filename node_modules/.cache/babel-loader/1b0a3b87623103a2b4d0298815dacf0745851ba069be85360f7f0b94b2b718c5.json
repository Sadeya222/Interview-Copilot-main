{"ast":null,"code":"//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n// eslint-disable-next-line max-classes-per-file\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\nimport { MessageType } from \"../common/Exports.js\";\nimport { PropertyCollection } from \"./PropertyCollection.js\";\nimport { PropertyId } from \"./PropertyId.js\";\n/**\n * ConnectionMessage represents implementation specific messages sent to and received from\n * the speech service. These messages are provided for debugging purposes and should not\n * be used for production use cases with the Azure Cognitive Services Speech Service.\n * Messages sent to and received from the Speech Service are subject to change without\n * notice. This includes message contents, headers, payloads, ordering, etc.\n * Added in version 1.11.0.\n */\nexport class ConnectionMessage {}\nexport class ConnectionMessageImpl {\n  constructor(message) {\n    this.privConnectionMessage = message;\n    this.privProperties = new PropertyCollection();\n    if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\n      this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\n    }\n    Object.keys(this.privConnectionMessage.headers).forEach(header => {\n      this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\n    });\n  }\n  /**\n   * The message path.\n   */\n  get path() {\n    return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find(key => key.toLowerCase() === \"path\".toLowerCase())];\n  }\n  /**\n   * Checks to see if the ConnectionMessage is a text message.\n   * See also IsBinaryMessage().\n   */\n  get isTextMessage() {\n    return this.privConnectionMessage.messageType === MessageType.Text;\n  }\n  /**\n   * Checks to see if the ConnectionMessage is a binary message.\n   * See also GetBinaryMessage().\n   */\n  get isBinaryMessage() {\n    return this.privConnectionMessage.messageType === MessageType.Binary;\n  }\n  /**\n   * Gets the text message payload. Typically the text message content-type is\n   * application/json. To determine other content-types use\n   * Properties.GetProperty(\"Content-Type\").\n   */\n  get TextMessage() {\n    return this.privConnectionMessage.textBody;\n  }\n  /**\n   * Gets the binary message payload.\n   */\n  get binaryMessage() {\n    return this.privConnectionMessage.binaryBody;\n  }\n  /**\n   * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n   * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Returns a string that represents the connection message.\n   */\n  toString() {\n    return \"\";\n  }\n}","map":{"version":3,"names":["HeaderNames","MessageType","PropertyCollection","PropertyId","ConnectionMessage","ConnectionMessageImpl","constructor","message","privConnectionMessage","privProperties","headers","ConnectionId","setProperty","Speech_SessionId","Object","keys","forEach","header","path","find","key","toLowerCase","isTextMessage","messageType","Text","isBinaryMessage","Binary","TextMessage","textBody","binaryMessage","binaryBody","properties","toString"],"sources":["src/sdk/ConnectionMessage.ts"],"sourcesContent":["//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA,SAASA,WAAW,QAAQ,iCAAiC;AAC7D,SAEIC,WAAW,QACR,sBAAsB;AAC7B,SACIC,kBAAkB,QACf,yBAAyB;AAChC,SAASC,UAAU,QAAQ,iBAAiB;AAE5C;;;;;;;;AAQA,OAAM,MAAgBC,iBAAiB;AA0CvC,OAAM,MAAOC,qBAAqB;EAK9BC,YAAmBC,OAA6B;IAC5C,IAAI,CAACC,qBAAqB,GAAGD,OAAO;IACpC,IAAI,CAACE,cAAc,GAAG,IAAIP,kBAAkB,EAAE;IAC9C,IAAI,CAAC,CAAC,IAAI,CAACM,qBAAqB,CAACE,OAAO,CAACV,WAAW,CAACW,YAAY,CAAC,EAAE;MAChE,IAAI,CAACF,cAAc,CAACG,WAAW,CAACT,UAAU,CAACU,gBAAgB,EAAE,IAAI,CAACL,qBAAqB,CAACE,OAAO,CAACV,WAAW,CAACW,YAAY,CAAC,CAAC;;IAG9HG,MAAM,CAACC,IAAI,CAAC,IAAI,CAACP,qBAAqB,CAACE,OAAO,CAAC,CAACM,OAAO,CAAEC,MAAc,IAAU;MAC7E,IAAI,CAACR,cAAc,CAACG,WAAW,CAACK,MAAM,EAAE,IAAI,CAACT,qBAAqB,CAACE,OAAO,CAACO,MAAM,CAAC,CAAC;IACvF,CAAC,CAAC;EACN;EAEA;;;EAGA,IAAWC,IAAIA,CAAA;IACX,OAAO,IAAI,CAACV,qBAAqB,CAACE,OAAO,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,CAACP,qBAAqB,CAACE,OAAO,CAAC,CAACS,IAAI,CAAEC,GAAW,IAAcA,GAAG,CAACC,WAAW,EAAE,KAAK,MAAM,CAACA,WAAW,EAAE,CAAC,CAAC;EACzK;EAEA;;;;EAIA,IAAWC,aAAaA,CAAA;IACpB,OAAO,IAAI,CAACd,qBAAqB,CAACe,WAAW,KAAKtB,WAAW,CAACuB,IAAI;EACtE;EAEA;;;;EAIA,IAAWC,eAAeA,CAAA;IACtB,OAAO,IAAI,CAACjB,qBAAqB,CAACe,WAAW,KAAKtB,WAAW,CAACyB,MAAM;EACxE;EAEA;;;;;EAKA,IAAWC,WAAWA,CAAA;IAClB,OAAO,IAAI,CAACnB,qBAAqB,CAACoB,QAAQ;EAC9C;EAEA;;;EAGA,IAAWC,aAAaA,CAAA;IACpB,OAAO,IAAI,CAACrB,qBAAqB,CAACsB,UAAU;EAChD;EAEA;;;;EAIA,IAAWC,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACtB,cAAc;EAC9B;EAEA;;;EAGOuB,QAAQA,CAAA;IACX,OAAO,EAAE;EACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}