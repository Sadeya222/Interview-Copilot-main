{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat.js\";\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\n/**\n * @private\n * @class AudioOutputFormatImpl\n * Updated in version 1.17.0\n */\n// eslint-disable-next-line max-classes-per-file\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\n  /**\n   * Creates an instance with the given values.\n   * @constructor\n   * @param formatTag\n   * @param {number} channels - Number of channels.\n   * @param {number} samplesPerSec - Samples per second.\n   * @param {number} avgBytesPerSec - Average bytes per second.\n   * @param {number} blockAlign - Block alignment.\n   * @param {number} bitsPerSample - Bits per sample.\n   * @param {string} audioFormatString - Audio format string\n   * @param {string} requestAudioFormatString - Audio format string sent to service.\n   * @param {boolean} hasHeader - If the format has header or not.\n   */\n  constructor(formatTag, channels, samplesPerSec, avgBytesPerSec, blockAlign, bitsPerSample, audioFormatString, requestAudioFormatString, hasHeader) {\n    super(samplesPerSec, bitsPerSample, channels, formatTag);\n    this.formatTag = formatTag;\n    this.avgBytesPerSec = avgBytesPerSec;\n    this.blockAlign = blockAlign;\n    this.priAudioFormatString = audioFormatString;\n    this.priRequestAudioFormatString = requestAudioFormatString;\n    this.priHasHeader = hasHeader;\n  }\n  static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat) {\n    if (speechSynthesisOutputFormat === undefined) {\n      return AudioOutputFormatImpl.getDefaultOutputFormat();\n    }\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\n  }\n  static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString) {\n    switch (speechSynthesisOutputFormatString) {\n      case \"raw-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"riff-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, \"audio-16khz-16kbps-mono-siren\", true);\n      case \"audio-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-16khz-32kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 32 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-16khz-128kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 128 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-16khz-64kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 64 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-24khz-48kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 48 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-24khz-96kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-24khz-160kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 160 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"raw-16khz-16bit-mono-truesilk\":\n        return new AudioOutputFormatImpl(AudioFormatTag.SILKSkype, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"riff-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", true);\n      case \"riff-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", true);\n      case \"riff-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-mulaw\", true);\n      case \"raw-16khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, \"raw-16khz-16bit-mono-pcm\", false);\n      case \"raw-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", false);\n      case \"raw-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", false);\n      case \"ogg-16khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 16000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"ogg-24khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 24000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"raw-48khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, \"raw-48khz-16bit-mono-pcm\", false);\n      case \"riff-48khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, \"raw-48khz-16bit-mono-pcm\", true);\n      case \"audio-48khz-96kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 48000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-48khz-192kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 48000, 192 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"ogg-48khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 48000, 12000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"webm-16khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 16000, 4000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"webm-24khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 24000, 6000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"webm-24khz-16bit-24kbps-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 24000, 3000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-16khz-16bit-32kbps-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 16000, 4000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-24khz-16bit-48kbps-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 24000, 6000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-24khz-16bit-24kbps-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 24000, 3000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-24khz-16bit-mono-flac\":\n        return new AudioOutputFormatImpl(AudioFormatTag.FLAC, 1, 24000, 24000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"audio-48khz-16bit-mono-flac\":\n        return new AudioOutputFormatImpl(AudioFormatTag.FLAC, 1, 48000, 30000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"raw-24khz-16bit-mono-truesilk\":\n        return new AudioOutputFormatImpl(AudioFormatTag.SILKSkype, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"raw-8khz-8bit-mono-alaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"riff-8khz-8bit-mono-alaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-alaw\", true);\n      case \"raw-22050hz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 22050, 44100, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"riff-22050hz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 22050, 44100, 2, 16, speechSynthesisOutputFormatString, \"raw-22050hz-16bit-mono-pcm\", true);\n      case \"raw-44100hz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 44100, 88200, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n      case \"riff-44100hz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 44100, 88200, 2, 16, speechSynthesisOutputFormatString, \"raw-44100hz-16bit-mono-pcm\", true);\n      case \"riff-16khz-16bit-mono-pcm\":\n      default:\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, \"riff-16khz-16bit-mono-pcm\", \"raw-16khz-16bit-mono-pcm\", true);\n    }\n  }\n  static getDefaultOutputFormat() {\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(typeof window !== \"undefined\" ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\n  }\n  /**\n   * Specifies if this audio output format has a header\n   * @boolean AudioOutputFormatImpl.prototype.hasHeader\n   * @function\n   * @public\n   */\n  get hasHeader() {\n    return this.priHasHeader;\n  }\n  /**\n   * Specifies the header of this format\n   * @ArrayBuffer AudioOutputFormatImpl.prototype.header\n   * @function\n   * @public\n   */\n  get header() {\n    if (this.hasHeader) {\n      return this.privHeader;\n    }\n    return undefined;\n  }\n  /**\n   * Updates the header based on the audio length\n   * @member AudioOutputFormatImpl.updateHeader\n   * @function\n   * @public\n   * @param {number} audioLength - the audio length\n   */\n  updateHeader(audioLength) {\n    if (this.priHasHeader) {\n      const view = new DataView(this.privHeader);\n      view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\n      view.setUint32(40, audioLength, true);\n    }\n  }\n  /**\n   * Specifies the audio format string to be sent to the service\n   * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\n   * @function\n   * @public\n   */\n  get requestAudioFormatString() {\n    return this.priRequestAudioFormatString;\n  }\n  /**\n   * Adds audio header\n   * @param audio the raw audio without header\n   * @returns the audio with header if applicable\n   */\n  addHeader(audio) {\n    if (!this.hasHeader) {\n      return audio;\n    }\n    this.updateHeader(audio.byteLength);\n    const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\n    tmp.set(new Uint8Array(this.header), 0);\n    tmp.set(new Uint8Array(audio), this.header.byteLength);\n    return tmp.buffer;\n  }\n}\nAudioOutputFormatImpl.SpeechSynthesisOutputFormatToString = {\n  [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\n  [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\n  [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\n  [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\n  [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\n  [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\n  [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\n  [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\n  [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\n  [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\n  [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\n  [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\n  [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\"\n};","map":{"version":3,"names":["SpeechSynthesisOutputFormat","AudioFormatTag","AudioStreamFormatImpl","AudioOutputFormatImpl","constructor","formatTag","channels","samplesPerSec","avgBytesPerSec","blockAlign","bitsPerSample","audioFormatString","requestAudioFormatString","hasHeader","priAudioFormatString","priRequestAudioFormatString","priHasHeader","fromSpeechSynthesisOutputFormat","speechSynthesisOutputFormat","undefined","getDefaultOutputFormat","fromSpeechSynthesisOutputFormatString","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","MuLaw","Siren","MP3","SILKSkype","PCM","OGG_OPUS","WEBM_OPUS","OPUS","FLAC","ALaw","window","header","privHeader","updateHeader","audioLength","view","DataView","setUint32","byteLength","addHeader","audio","tmp","Uint8Array","set","buffer","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff24Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","Webm24Khz16Bit24KbpsMonoOpus","Raw24Khz16BitMonoTrueSilk","Raw8Khz8BitMonoALaw","Riff8Khz8BitMonoALaw","Audio16Khz16Bit32KbpsMonoOpus","Audio24Khz16Bit48KbpsMonoOpus","Audio24Khz16Bit24KbpsMonoOpus","Raw22050Hz16BitMonoPcm","Riff22050Hz16BitMonoPcm","Raw44100Hz16BitMonoPcm","Riff44100Hz16BitMonoPcm"],"sources":["src/sdk/Audio/AudioOutputFormat.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports.js\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat.js\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n    /**\r\n     * Adds audio header\r\n     * @param audio the raw audio without header\r\n     * @returns the audio with header if applicable\r\n     */\r\n\r\n    public addHeader(audio: ArrayBuffer): ArrayBuffer {\r\n        if (!this.hasHeader) {\r\n            return audio;\r\n        }\r\n        this.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\r\n        tmp.set(new Uint8Array(this.header), 0);\r\n        tmp.set(new Uint8Array(audio), this.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}