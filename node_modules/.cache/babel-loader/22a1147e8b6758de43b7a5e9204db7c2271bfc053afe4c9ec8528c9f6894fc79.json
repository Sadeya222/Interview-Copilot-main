{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file */\n// The config is serialized and sent as the Speech.Config\nexport class SpeechServiceConfig {\n  constructor(context) {\n    this.context = context;\n  }\n  serialize() {\n    return JSON.stringify(this, (key, value) => {\n      if (value && typeof value === \"object\" && !Array.isArray(value)) {\n        const replacement = {};\n        for (const k in value) {\n          if (Object.hasOwnProperty.call(value, k)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n          }\n        }\n        return replacement;\n      }\n      return value;\n    });\n  }\n  get Context() {\n    return this.context;\n  }\n  get Recognition() {\n    return this.recognition;\n  }\n  set Recognition(value) {\n    this.recognition = value.toLowerCase();\n  }\n}\nexport class Context {\n  constructor(os) {\n    this.system = new System();\n    this.os = os;\n  }\n}\nexport class System {\n  constructor() {\n    // Note: below will be patched for official builds.\n    const SPEECHSDK_CLIENTSDK_VERSION = \"1.33.1\";\n    this.name = \"SpeechSDK\";\n    this.version = SPEECHSDK_CLIENTSDK_VERSION;\n    this.build = \"JavaScript\";\n    this.lang = \"JavaScript\";\n  }\n}\nexport class OS {\n  constructor(platform, name, version) {\n    this.platform = platform;\n    this.name = name;\n    this.version = version;\n  }\n}\nexport class Device {\n  constructor(manufacturer, model, version) {\n    this.manufacturer = manufacturer;\n    this.model = model;\n    this.version = version;\n  }\n}\nexport var connectivity;\n(function (connectivity) {\n  connectivity[\"Bluetooth\"] = \"Bluetooth\";\n  connectivity[\"Wired\"] = \"Wired\";\n  connectivity[\"WiFi\"] = \"WiFi\";\n  connectivity[\"Cellular\"] = \"Cellular\";\n  connectivity[\"InBuilt\"] = \"InBuilt\";\n  connectivity[\"Unknown\"] = \"Unknown\";\n})(connectivity || (connectivity = {}));\nexport var type;\n(function (type) {\n  type[\"Phone\"] = \"Phone\";\n  type[\"Speaker\"] = \"Speaker\";\n  type[\"Car\"] = \"Car\";\n  type[\"Headset\"] = \"Headset\";\n  type[\"Thermostat\"] = \"Thermostat\";\n  type[\"Microphones\"] = \"Microphones\";\n  type[\"Deskphone\"] = \"Deskphone\";\n  type[\"RemoteControl\"] = \"RemoteControl\";\n  type[\"Unknown\"] = \"Unknown\";\n  type[\"File\"] = \"File\";\n  type[\"Stream\"] = \"Stream\";\n})(type || (type = {}));","map":{"version":3,"names":["SpeechServiceConfig","constructor","context","serialize","JSON","stringify","key","value","Array","isArray","replacement","k","Object","hasOwnProperty","call","charAt","toLowerCase","substring","Context","Recognition","recognition","os","system","System","SPEECHSDK_CLIENTSDK_VERSION","name","version","build","lang","OS","platform","Device","manufacturer","model","connectivity","type"],"sources":["src/common.speech/SpeechServiceConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\" && !Array.isArray(value)) {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n    public synthesis: {\r\n        video: ISynthesisSectionVideo;\r\n    };\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.33.1\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n\r\nexport interface ICoordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n// For avatar synthesis\r\nexport interface ISynthesisSectionVideo {\r\n    protocol: {\r\n        name: string;\r\n        webrtcConfig: {\r\n            clientDescription: string;\r\n            iceServers: {\r\n                urls: string[];\r\n                username: string;\r\n                credential: string;\r\n            }[];\r\n        };\r\n    };\r\n    format: {\r\n        bitrate: number;\r\n        codec: string;\r\n        crop: {\r\n            topLeft: ICoordinate;\r\n            bottomRight: ICoordinate;\r\n        };\r\n        resolution: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n    talkingAvatar: {\r\n        character: string;\r\n        customized: boolean;\r\n        style: string;\r\n        background: {\r\n            color: string;\r\n        };\r\n    };\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA;AAEA;AACA,OAAM,MAAOA,mBAAmB;EAI5BC,YAAmBC,OAAgB;IAC/B,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EAEOC,SAASA,CAAA;IACZ,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,EAAE,CAACC,GAAQ,EAAEC,KAA2B,KAAS;MACvE,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;QAC7D,MAAMG,WAAW,GAA0B,EAAE;QAC7C,KAAK,MAAMC,CAAC,IAAIJ,KAAK,EAAE;UACnB,IAAIK,MAAM,CAACC,cAAc,CAACC,IAAI,CAACP,KAAK,EAAEI,CAAC,CAAC,EAAE;YACtC;YACAD,WAAW,CAACC,CAAC,IAAIA,CAAC,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGL,CAAC,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC,GAAGV,KAAK,CAACI,CAAC,CAAC;;;QAG/E,OAAOD,WAAW;;MAEtB,OAAOH,KAAK;IAChB,CAAC,CAAC;EACN;EAEA,IAAWW,OAAOA,CAAA;IACd,OAAO,IAAI,CAAChB,OAAO;EACvB;EAEA,IAAWiB,WAAWA,CAAA;IAClB,OAAO,IAAI,CAACC,WAAW;EAC3B;EAEA,IAAWD,WAAWA,CAACZ,KAAa;IAChC,IAAI,CAACa,WAAW,GAAGb,KAAK,CAACS,WAAW,EAAE;EAC1C;;AAGJ,OAAM,MAAOE,OAAO;EAQhBjB,YAAmBoB,EAAM;IACrB,IAAI,CAACC,MAAM,GAAG,IAAIC,MAAM,EAAE;IAC1B,IAAI,CAACF,EAAE,GAAGA,EAAE;EAChB;;AAGJ,OAAM,MAAOE,MAAM;EAMftB,YAAA;IACI;IACA,MAAMuB,2BAA2B,GAAG,QAAQ;IAE5C,IAAI,CAACC,IAAI,GAAG,WAAW;IACvB,IAAI,CAACC,OAAO,GAAGF,2BAA2B;IAC1C,IAAI,CAACG,KAAK,GAAG,YAAY;IACzB,IAAI,CAACC,IAAI,GAAG,YAAY;EAC5B;;AAGJ,OAAM,MAAOC,EAAE;EAKX5B,YAAmB6B,QAAgB,EAAEL,IAAY,EAAEC,OAAe;IAC9D,IAAI,CAACI,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACL,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;;AAGJ,OAAM,MAAOK,MAAM;EAKf9B,YAAmB+B,YAAoB,EAAEC,KAAa,EAAEP,OAAe;IACnE,IAAI,CAACM,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACP,OAAO,GAAGA,OAAO;EAC1B;;AAkBJ,WAAYQ,YAOX;AAPD,WAAYA,YAAY;EACpBA,YAAA,2BAAuB;EACvBA,YAAA,mBAAe;EACfA,YAAA,iBAAa;EACbA,YAAA,yBAAqB;EACrBA,YAAA,uBAAmB;EACnBA,YAAA,uBAAmB;AACvB,CAAC,EAPWA,YAAY,KAAZA,YAAY;AASxB,WAAYC,IAYX;AAZD,WAAYA,IAAI;EACZA,IAAA,mBAAe;EACfA,IAAA,uBAAmB;EACnBA,IAAA,eAAW;EACXA,IAAA,uBAAmB;EACnBA,IAAA,6BAAyB;EACzBA,IAAA,+BAA2B;EAC3BA,IAAA,2BAAuB;EACvBA,IAAA,mCAA+B;EAC/BA,IAAA,uBAAmB;EACnBA,IAAA,iBAAa;EACbA,IAAA,qBAAiB;AACrB,CAAC,EAZWA,IAAI,KAAJA,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}