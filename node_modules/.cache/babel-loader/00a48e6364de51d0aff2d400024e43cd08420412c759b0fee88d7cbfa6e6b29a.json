{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, RestConfigBase, WebsocketConnection } from \"../../common.browser/Exports.js\";\nimport { StringUtils } from \"../../common/StringUtils.js\";\nimport { Contracts } from \"../../sdk/Contracts.js\";\nimport { PropertyId } from \"../../sdk/Exports.js\";\nimport { HeaderNames } from \"../HeaderNames.js\";\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\nimport { ConnectionFactoryBase } from \"./../ConnectionFactoryBase.js\";\nimport { TranscriberConnectionFactory, TranslationConnectionFactory, WebsocketMessageFormatter } from \"./../Exports.js\";\n/**\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\n * as well as the virtual microphone array transcription endpoint\n */\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\n  constructor(convGetter) {\n    super();\n    Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\n    this.privConvGetter = convGetter;\n  }\n  create(config, authInfo, connectionId) {\n    const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\n    const convInfo = this.privConvGetter().room;\n    const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\n    const replacementValues = {\n      hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\n      path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\n      region: encodeURIComponent(region)\n    };\n    replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\n    replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\n    replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\n    replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : \"&\" + QueryParameterNames.CtsIsParticipant;\n    let endpointUrl = \"\";\n    const queryParams = {};\n    const headers = {};\n    if (isVirtMicArrayEndpoint) {\n      // connecting to the conversation transcription virtual microphone array endpoint\n      endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n      if (!endpointUrl) {\n        const hostName = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"transcribe.{region}.cts.speech{hostSuffix}\");\n        endpointUrl = \"wss://\" + hostName + \"{path}\";\n      }\n      // because the region can change during a session, we support being passed a format string which we can then\n      // replace with the correct information.\n      endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\n      const parsedUrl = new URL(endpointUrl);\n      parsedUrl.searchParams.forEach((val, key) => {\n        queryParams[key] = val;\n      });\n      const connFactory = new TranscriberConnectionFactory();\n      connFactory.setQueryParams(queryParams, config, endpointUrl);\n      // Some query parameters are required for the CTS endpoint, let's explicity set them here\n      queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\n      queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\n      if (!convInfo.isHost) {\n        queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\n      }\n\n      if (!(QueryParameterNames.Format in queryParams)) {\n        queryParams[QueryParameterNames.Format] = \"simple\";\n      }\n      parsedUrl.searchParams.forEach((val, key) => {\n        parsedUrl.searchParams.set(key, queryParams[key]);\n        delete queryParams[key];\n      });\n      endpointUrl = parsedUrl.toString();\n    } else {\n      // connecting to regular translation endpoint\n      const connFactory = new TranslationConnectionFactory();\n      endpointUrl = connFactory.getEndpointUrl(config, true);\n      endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\n      connFactory.setQueryParams(queryParams, config, endpointUrl);\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    headers[RestConfigBase.configParams.token] = convInfo.token;\n    if (!!authInfo.token) {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\n    return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n}\nConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH = \"/speech/recognition/dynamicaudio\";","map":{"version":3,"names":["ProxyInfo","RestConfigBase","WebsocketConnection","StringUtils","Contracts","PropertyId","HeaderNames","QueryParameterNames","ConnectionFactoryBase","TranscriberConnectionFactory","TranslationConnectionFactory","WebsocketMessageFormatter","ConversationTranslatorConnectionFactory","constructor","convGetter","throwIfNullOrUndefined","privConvGetter","create","config","authInfo","connectionId","isVirtMicArrayEndpoint","parameters","getProperty","toUpperCase","convInfo","room","region","cognitiveSpeechRegion","SpeechServiceConnection_Region","replacementValues","hostSuffix","getHostSuffix","path","CTS_VIRT_MIC_PATH","encodeURIComponent","Language","SpeechServiceConnection_RecoLanguage","CtsMeetingId","roomId","CtsDeviceId","participantId","CtsIsParticipant","isHost","endpointUrl","queryParams","headers","SpeechServiceConnection_Endpoint","hostName","SpeechServiceConnection_Host","formatString","parsedUrl","URL","searchParams","forEach","val","key","connFactory","setQueryParams","Format","set","toString","getEndpointUrl","ConnectionId","configParams","token","headerName","enableCompression","fromRecognizerConfig"],"sources":["src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports.js\";\r\nimport { StringUtils } from \"../../common/StringUtils.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation.js\";\r\nimport { HeaderNames } from \"../HeaderNames.js\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports.js\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}