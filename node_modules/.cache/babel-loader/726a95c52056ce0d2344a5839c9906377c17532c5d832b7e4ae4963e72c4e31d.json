{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognitionResult } from \"./Exports.js\";\n/**\n * Defines result of speech recognition.\n * @class SpeechRecognitionResult\n */\nexport class SpeechRecognitionResult extends RecognitionResult {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @public\n   * @param {string} resultId - The result id.\n   * @param {ResultReason} reason - The reason.\n   * @param {string} text - The recognized text.\n   * @param {number} duration - The duration.\n   * @param {number} offset - The offset into the stream.\n   * @param {string} language - Primary Language detected, if provided.\n   * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\n   * @param {string} speakerId - speaker id for conversation transcription, if provided.\n   * @param {string} errorDetails - Error details, if provided.\n   * @param {string} json - Additional Json, if provided.\n   * @param {PropertyCollection} properties - Additional properties, if provided.\n   */\n  constructor(resultId, reason, text, duration, offset, language, languageDetectionConfidence, speakerId, errorDetails, json, properties) {\n    super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\n    this.privSpeakerId = speakerId;\n  }\n  /**\n   * speaker id from conversation transcription/id scenarios\n   * @member SpeechRecognitionResult.prototype.speakerId\n   * @function\n   * @public\n   * @returns {string} id of speaker in given result\n   */\n  get speakerId() {\n    return this.privSpeakerId;\n  }\n}","map":{"version":3,"names":["RecognitionResult","SpeechRecognitionResult","constructor","resultId","reason","text","duration","offset","language","languageDetectionConfidence","speakerId","errorDetails","json","properties","privSpeakerId"],"sources":["src/sdk/SpeechRecognitionResult.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SAA6BA,iBAAiB,QAAsB,cAAc;AAElF;;;;AAIA,OAAM,MAAOC,uBAAwB,SAAQD,iBAAiB;EAE1D;;;;;;;;;;;;;;;;EAgBAE,YAAmBC,QAAiB,EAAEC,MAAqB,EAAEC,IAAa,EACvDC,QAAiB,EAAEC,MAAe,EAAEC,QAAiB,EACrDC,2BAAoC,EAAEC,SAAkB,EAAEC,YAAqB,EAC/EC,IAAa,EAAEC,UAA+B;IAC7D,KAAK,CAACV,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,2BAA2B,EAAEE,YAAY,EAAEC,IAAI,EAAEC,UAAU,CAAC;IACtH,IAAI,CAACC,aAAa,GAAGJ,SAAS;EAClC;EAEA;;;;;;;EAOA,IAAWA,SAASA,CAAA;IAChB,OAAO,IAAI,CAACI,aAAa;EAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}