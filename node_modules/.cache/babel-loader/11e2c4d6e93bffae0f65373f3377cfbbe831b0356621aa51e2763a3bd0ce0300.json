{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ArgumentNullError, createNoDashGuid } from \"../common/Exports.js\";\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter.js\";\nexport class WebsocketConnection {\n  constructor(uri, queryParameters, headers, messageFormatter, proxyInfo, enableCompression = false, connectionId) {\n    this.privIsDisposed = false;\n    if (!uri) {\n      throw new ArgumentNullError(\"uri\");\n    }\n    if (!messageFormatter) {\n      throw new ArgumentNullError(\"messageFormatter\");\n    }\n    this.privMessageFormatter = messageFormatter;\n    let queryParams = \"\";\n    let i = 0;\n    if (queryParameters) {\n      for (const paramName in queryParameters) {\n        if (paramName) {\n          queryParams += i === 0 && uri.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n          const key = encodeURIComponent(paramName);\n          queryParams += key;\n          let val = queryParameters[paramName];\n          if (val) {\n            val = encodeURIComponent(val);\n            queryParams += `=${val}`;\n          }\n          i++;\n        }\n      }\n    }\n    if (headers) {\n      for (const headerName in headers) {\n        if (headerName) {\n          queryParams += i === 0 && uri.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n          const val = encodeURIComponent(headers[headerName]);\n          queryParams += `${headerName}=${val}`;\n          i++;\n        }\n      }\n    }\n    this.privUri = uri + queryParams;\n    this.privId = connectionId ? connectionId : createNoDashGuid();\n    this.privConnectionMessageAdapter = new WebsocketMessageAdapter(this.privUri, this.id, this.privMessageFormatter, proxyInfo, headers, enableCompression);\n  }\n  dispose() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privIsDisposed = true;\n      if (this.privConnectionMessageAdapter) {\n        yield this.privConnectionMessageAdapter.close();\n      }\n    });\n  }\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  get id() {\n    return this.privId;\n  }\n  get uri() {\n    return this.privUri;\n  }\n  state() {\n    return this.privConnectionMessageAdapter.state;\n  }\n  open() {\n    return this.privConnectionMessageAdapter.open();\n  }\n  send(message) {\n    return this.privConnectionMessageAdapter.send(message);\n  }\n  read() {\n    return this.privConnectionMessageAdapter.read();\n  }\n  get events() {\n    return this.privConnectionMessageAdapter.events;\n  }\n}","map":{"version":3,"names":["ArgumentNullError","createNoDashGuid","WebsocketMessageAdapter","WebsocketConnection","constructor","uri","queryParameters","headers","messageFormatter","proxyInfo","enableCompression","connectionId","privIsDisposed","privMessageFormatter","queryParams","i","paramName","indexOf","key","encodeURIComponent","val","headerName","privUri","privId","privConnectionMessageAdapter","id","dispose","close","isDisposed","state","open","send","message","read","events"],"sources":["src/common.browser/WebsocketConnection.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter.js\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}