{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nexport var AvatarEventTypes;\n(function (AvatarEventTypes) {\n  AvatarEventTypes[\"SwitchedToSpeaking\"] = \"SwitchedToSpeaking\";\n  AvatarEventTypes[\"SwitchedToIdle\"] = \"SwitchedToIdle\";\n  AvatarEventTypes[\"SessionClosed\"] = \"SessionClosed\";\n})(AvatarEventTypes || (AvatarEventTypes = {}));\n/**\n * Defines content for talking avatar events.\n * @class AvatarEventArgs\n * Added in version 1.33.0\n *\n * @experimental This feature is experimental and might change or have limited support.\n */\nexport class AvatarEventArgs {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {number} audioOffset - The audio offset.\n   * @param {string} description - The description of the event.\n   */\n  constructor(audioOffset, description) {\n    this.privOffset = audioOffset;\n    this.privDescription = description;\n  }\n  /**\n   * The type of the event.\n   * @public\n   * @returns {AvatarEventTypes} The type of the event.\n   */\n  get type() {\n    return this.privType;\n  }\n  /**\n   * The time offset associated with this event.\n   * @public\n   * @returns {number} The time offset associated with this event.\n   */\n  get offset() {\n    return this.privOffset;\n  }\n  /**\n   * The description of the event.\n   * @public\n   * @returns {string} The description of the event.\n   */\n  get description() {\n    return this.privDescription;\n  }\n}","map":{"version":3,"names":["AvatarEventTypes","AvatarEventArgs","constructor","audioOffset","description","privOffset","privDescription","type","privType","offset"],"sources":["src/sdk/AvatarEventArgs.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AvatarEventTypes {\r\n    SwitchedToSpeaking = \"SwitchedToSpeaking\",\r\n    SwitchedToIdle = \"SwitchedToIdle\",\r\n    SessionClosed = \"SessionClosed\",\r\n}\r\n\r\n/**\r\n * Defines content for talking avatar events.\r\n * @class AvatarEventArgs\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarEventArgs {\r\n    private privType: AvatarEventTypes;\r\n    private privOffset: number;\r\n    private privDescription: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} description - The description of the event.\r\n     */\r\n    public constructor(audioOffset: number, description: string) {\r\n        this.privOffset = audioOffset;\r\n        this.privDescription = description;\r\n    }\r\n\r\n    /**\r\n     * The type of the event.\r\n     * @public\r\n     * @returns {AvatarEventTypes} The type of the event.\r\n     */\r\n    public get type(): AvatarEventTypes {\r\n        return this.privType;\r\n    }\r\n\r\n    /**\r\n     * The time offset associated with this event.\r\n     * @public\r\n     * @returns {number} The time offset associated with this event.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * The description of the event.\r\n     * @public\r\n     * @returns {string} The description of the event.\r\n     */\r\n    public get description(): string {\r\n        return this.privDescription;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,WAAYA,gBAIX;AAJD,WAAYA,gBAAgB;EACxBA,gBAAA,6CAAyC;EACzCA,gBAAA,qCAAiC;EACjCA,gBAAA,mCAA+B;AACnC,CAAC,EAJWA,gBAAgB,KAAhBA,gBAAgB;AAM5B;;;;;;;AAOA,OAAM,MAAOC,eAAe;EAKxB;;;;;;EAMAC,YAAmBC,WAAmB,EAAEC,WAAmB;IACvD,IAAI,CAACC,UAAU,GAAGF,WAAW;IAC7B,IAAI,CAACG,eAAe,GAAGF,WAAW;EACtC;EAEA;;;;;EAKA,IAAWG,IAAIA,CAAA;IACX,OAAO,IAAI,CAACC,QAAQ;EACxB;EAEA;;;;;EAKA,IAAWC,MAAMA,CAAA;IACb,OAAO,IAAI,CAACJ,UAAU;EAC1B;EAEA;;;;;EAKA,IAAWD,WAAWA,CAAA;IAClB,OAAO,IAAI,CAACE,eAAe;EAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}