{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as MessagesAPI from 'openai/resources/beta/threads/messages/messages';\nimport * as FilesAPI from 'openai/resources/beta/threads/messages/files';\nimport { CursorPage } from 'openai/pagination';\nexport class Messages extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.files = new FilesAPI.Files(this._client);\n  }\n  /**\n   * Create a message.\n   */\n  create(threadId, body, options) {\n    return this._client.post(`/threads/${threadId}/messages`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieve a message.\n   */\n  retrieve(threadId, messageId, options) {\n    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies a message.\n   */\n  update(threadId, messageId, body, options) {\n    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  list(threadId, query = {}, options) {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/messages`, ThreadMessagesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n}\nexport class ThreadMessagesPage extends CursorPage {}\n(function (Messages) {\n  Messages.ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n  Messages.Files = FilesAPI.Files;\n  Messages.MessageFilesPage = FilesAPI.MessageFilesPage;\n})(Messages || (Messages = {}));","map":{"version":3,"names":["APIResource","isRequestOptions","MessagesAPI","FilesAPI","CursorPage","Messages","constructor","files","Files","_client","create","threadId","body","options","post","headers","retrieve","messageId","get","update","list","query","getAPIList","ThreadMessagesPage","MessageFilesPage"],"sources":["../../../../src/resources/beta/threads/messages/messages.ts"],"sourcesContent":[null],"mappings":"AAAA;SAGSA,WAAW,QAAQ,iBAAiB;SACpCC,gBAAgB,QAAQ,aAAa;OACvC,KAAKC,WAAW,MAAM,iDAAiD;OACvE,KAAKC,QAAQ,MAAM,8CAA8C;SAC/DC,UAAU,QAA+B,mBAAmB;AAErE,OAAM,MAAOC,QAAS,SAAQL,WAAW;EAAzCM,YAAA;;IACE,KAAAC,KAAK,GAAmB,IAAIJ,QAAQ,CAACK,KAAK,CAAC,IAAI,CAACC,OAAO,CAAC;EAsE1D;EApEE;;;EAGAC,MAAMA,CACJC,QAAgB,EAChBC,IAAyB,EACzBC,OAA6B;IAE7B,OAAO,IAAI,CAACJ,OAAO,CAACK,IAAI,CAAC,YAAYH,QAAQ,WAAW,EAAE;MACxDC,IAAI;MACJ,GAAGC,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;EAEA;;;EAGAC,QAAQA,CACNL,QAAgB,EAChBM,SAAiB,EACjBJ,OAA6B;IAE7B,OAAO,IAAI,CAACJ,OAAO,CAACS,GAAG,CAAC,YAAYP,QAAQ,aAAaM,SAAS,EAAE,EAAE;MACpE,GAAGJ,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;EAEA;;;EAGAI,MAAMA,CACJR,QAAgB,EAChBM,SAAiB,EACjBL,IAAyB,EACzBC,OAA6B;IAE7B,OAAO,IAAI,CAACJ,OAAO,CAACK,IAAI,CAAC,YAAYH,QAAQ,aAAaM,SAAS,EAAE,EAAE;MACrEL,IAAI;MACJ,GAAGC,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;EAWAK,IAAIA,CACFT,QAAgB,EAChBU,KAAA,GAAiD,EAAE,EACnDR,OAA6B;IAE7B,IAAIZ,gBAAgB,CAACoB,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACD,IAAI,CAACT,QAAQ,EAAE,EAAE,EAAEU,KAAK,CAAC;;IAEvC,OAAO,IAAI,CAACZ,OAAO,CAACa,UAAU,CAAC,YAAYX,QAAQ,WAAW,EAAEY,kBAAkB,EAAE;MAClFF,KAAK;MACL,GAAGR,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;;AAGF,OAAM,MAAOQ,kBAAmB,SAAQnB,UAAyB;AAuPjE,WAAiBC,QAAQ;EAKTA,QAAA,CAAAkB,kBAAkB,GAAGrB,WAAW,CAACqB,kBAAkB;EAInDlB,QAAA,CAAAG,KAAK,GAAGL,QAAQ,CAACK,KAAK;EAEtBH,QAAA,CAAAmB,gBAAgB,GAAGrB,QAAQ,CAACqB,gBAAgB;AAE5D,CAAC,EAbgBnB,QAAQ,KAARA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}