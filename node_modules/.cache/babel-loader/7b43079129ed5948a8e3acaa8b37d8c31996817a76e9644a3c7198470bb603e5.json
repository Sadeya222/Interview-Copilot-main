{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file */\nimport { Contracts } from \"./Contracts.js\";\nimport { PropertyId, SpeechConfigImpl } from \"./Exports.js\";\n/**\n * Class that defines base configurations for dialog service connector\n * @class DialogServiceConfig\n */\nexport class DialogServiceConfig {\n  /**\n   * Creates an instance of DialogService config.\n   * @constructor\n   */\n  constructor() {\n    return;\n  }\n  /**\n   * Sets the corresponding backend application identifier.\n   * @member DialogServiceConfig.prototype.Conversation_ApplicationId\n   * @function\n   * @public\n   * @param {string} value - The application identifier to set.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  set applicationId(value) {}\n  static get DialogTypes() {\n    return {\n      BotFramework: \"bot_framework\",\n      CustomCommands: \"custom_commands\"\n    };\n  }\n}\n/**\n * Dialog Service configuration.\n * @class DialogServiceConfigImpl\n */\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\n  /**\n   * Creates an instance of dialogService config.\n   */\n  constructor() {\n    super();\n    this.privSpeechConfig = new SpeechConfigImpl();\n  }\n  /**\n   * Provides access to custom properties.\n   * @member DialogServiceConfigImpl.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The properties.\n   */\n  get properties() {\n    return this.privSpeechConfig.properties;\n  }\n  /**\n   * Gets the speech recognition language.\n   * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   */\n  get speechRecognitionLanguage() {\n    return this.privSpeechConfig.speechRecognitionLanguage;\n  }\n  /**\n   * Sets the speech recognition language.\n   * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @param {string} value - The language to set.\n   */\n  set speechRecognitionLanguage(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechConfig.speechRecognitionLanguage = value;\n  }\n  get outputFormat() {\n    return this.privSpeechConfig.outputFormat;\n  }\n  set outputFormat(value) {\n    this.privSpeechConfig.outputFormat = value;\n  }\n  /**\n   * Sets a named property as value\n   * @member DialogServiceConfigImpl.prototype.setProperty\n   * @function\n   * @public\n   * @param {PropertyId | string} name - The property to set.\n   * @param {string} value - The value.\n   */\n  setProperty(name, value) {\n    this.privSpeechConfig.setProperty(name, value);\n  }\n  /**\n   * Sets a named property as value\n   * @member DialogServiceConfigImpl.prototype.getProperty\n   * @function\n   * @public\n   * @param {PropertyId | string} name - The property to get.\n   * @param {string} def - The default value to return in case the property is not known.\n   * @returns {string} The current value, or provided default, of the given property.\n   */\n  getProperty(name, def) {\n    void def;\n    return this.privSpeechConfig.getProperty(name);\n  }\n  /**\n   * Sets the proxy configuration.\n   * Only relevant in Node.js environments.\n   * Added in version 1.4.0.\n   * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n   * @param proxyPort The port number of the proxy server.\n   * @param proxyUserName The user name of the proxy server.\n   * @param proxyPassword The password of the proxy server.\n   */\n  setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\n    this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\n    if (proxyUserName) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\n    }\n    if (proxyPassword) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\n    }\n  }\n  setServiceProperty(name, value, channel) {\n    void channel;\n    this.privSpeechConfig.setServiceProperty(name, value);\n  }\n  /**\n   * Dispose of associated resources.\n   * @member DialogServiceConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    return;\n  }\n}","map":{"version":3,"names":["Contracts","PropertyId","SpeechConfigImpl","DialogServiceConfig","constructor","applicationId","value","DialogTypes","BotFramework","CustomCommands","DialogServiceConfigImpl","privSpeechConfig","properties","speechRecognitionLanguage","throwIfNullOrWhitespace","outputFormat","setProperty","name","getProperty","def","setProxy","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","setServiceProperty","channel","close"],"sources":["src/sdk/DialogServiceConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports.js\";\r\nimport { OutputFormat } from \"./OutputFormat.js\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA;AACA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAA6BC,UAAU,EAA0BC,gBAAgB,QAAQ,cAAc;AAGvG;;;;AAIA,OAAM,MAAgBC,mBAAmB;EAErC;;;;EAIAC,YAAA;IACI;EACJ;EAuEA;;;;;;;EAOA;EACA,IAAWC,aAAaA,CAACC,KAAa,GAAI;EAEnC,WAAWC,WAAWA,CAAA;IACzB,OAAO;MACHC,YAAY,EAAE,eAAe;MAC7BC,cAAc,EAAE;KACnB;EACL;;AAGJ;;;;AAIA,OAAM,MAAOC,uBAAwB,SAAQP,mBAAmB;EAI5D;;;EAGAC,YAAA;IACI,KAAK,EAAE;IACP,IAAI,CAACO,gBAAgB,GAAG,IAAIT,gBAAgB,EAAE;EAClD;EAEA;;;;;;;EAOA,IAAWU,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACD,gBAAgB,CAACC,UAAU;EAC3C;EAEA;;;;;;EAMA,IAAWC,yBAAyBA,CAAA;IAChC,OAAO,IAAI,CAACF,gBAAgB,CAACE,yBAAyB;EAC1D;EAEA;;;;;;;EAOA,IAAWA,yBAAyBA,CAACP,KAAa;IAC9CN,SAAS,CAACc,uBAAuB,CAACR,KAAK,EAAE,OAAO,CAAC;IACjD,IAAI,CAACK,gBAAgB,CAACE,yBAAyB,GAAGP,KAAK;EAC3D;EAEA,IAAWS,YAAYA,CAAA;IACnB,OAAO,IAAI,CAACJ,gBAAgB,CAACI,YAAY;EAC7C;EAEA,IAAWA,YAAYA,CAACT,KAAmB;IACvC,IAAI,CAACK,gBAAgB,CAACI,YAAY,GAAGT,KAAK;EAC9C;EAEA;;;;;;;;EAQOU,WAAWA,CAACC,IAAyB,EAAEX,KAAa;IACvD,IAAI,CAACK,gBAAgB,CAACK,WAAW,CAACC,IAAI,EAAEX,KAAK,CAAC;EAClD;EAEA;;;;;;;;;EASOY,WAAWA,CAACD,IAAyB,EAAEE,GAAY;IACtD,KAAKA,GAAG;IACR,OAAO,IAAI,CAACR,gBAAgB,CAACO,WAAW,CAACD,IAAI,CAAC;EAClD;EAEA;;;;;;;;;EASOG,QAAQA,CAACC,aAAqB,EAAEC,SAAiB,EAAEC,aAAsB,EAAEC,aAAsB;IACpG,IAAI,CAACR,WAAW,CAACf,UAAU,CAACwB,qCAAqC,EAAEJ,aAAa,CAAC;IACjF,IAAI,CAACL,WAAW,CAACf,UAAU,CAACyB,iCAAiC,EAAE,GAAGJ,SAAS,EAAE,CAAC;IAC9E,IAAIC,aAAa,EAAE;MACf,IAAI,CAACP,WAAW,CAACf,UAAU,CAAC0B,qCAAqC,EAAEJ,aAAa,CAAC;;IAErF,IAAIC,aAAa,EAAE;MACf,IAAI,CAACR,WAAW,CAACf,UAAU,CAAC2B,qCAAqC,EAAEJ,aAAa,CAAC;;EAEzF;EAEOK,kBAAkBA,CAACZ,IAAY,EAAEX,KAAa,EAAEwB,OAA+B;IAClF,KAAKA,OAAO;IACZ,IAAI,CAACnB,gBAAgB,CAACkB,kBAAkB,CAACZ,IAAI,EAAEX,KAAK,CAAC;EACzD;EAEA;;;;;;EAMOyB,KAAKA,CAAA;IACR;EACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}