{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// eslint-disable-next-line max-classes-per-file\nexport var AudioFormatTag;\n(function (AudioFormatTag) {\n  AudioFormatTag[AudioFormatTag[\"PCM\"] = 1] = \"PCM\";\n  AudioFormatTag[AudioFormatTag[\"MuLaw\"] = 2] = \"MuLaw\";\n  AudioFormatTag[AudioFormatTag[\"Siren\"] = 3] = \"Siren\";\n  AudioFormatTag[AudioFormatTag[\"MP3\"] = 4] = \"MP3\";\n  AudioFormatTag[AudioFormatTag[\"SILKSkype\"] = 5] = \"SILKSkype\";\n  AudioFormatTag[AudioFormatTag[\"OGG_OPUS\"] = 6] = \"OGG_OPUS\";\n  AudioFormatTag[AudioFormatTag[\"WEBM_OPUS\"] = 7] = \"WEBM_OPUS\";\n  AudioFormatTag[AudioFormatTag[\"ALaw\"] = 8] = \"ALaw\";\n  AudioFormatTag[AudioFormatTag[\"FLAC\"] = 9] = \"FLAC\";\n  AudioFormatTag[AudioFormatTag[\"OPUS\"] = 10] = \"OPUS\";\n})(AudioFormatTag || (AudioFormatTag = {}));\n/**\n * Represents audio stream format used for custom audio input configurations.\n * @class AudioStreamFormat\n */\nexport class AudioStreamFormat {\n  /**\n   * Creates an audio stream format object representing the default audio stream\n   * format (16KHz 16bit mono PCM).\n   * @member AudioStreamFormat.getDefaultInputFormat\n   * @function\n   * @public\n   * @returns {AudioStreamFormat} The audio stream format being created.\n   */\n  static getDefaultInputFormat() {\n    return AudioStreamFormatImpl.getDefaultInputFormat();\n  }\n  /**\n   * Creates an audio stream format object with the specified format characteristics.\n   * @member AudioStreamFormat.getWaveFormat\n   * @function\n   * @public\n   * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\n   * @param {number} bitsPerSample - Bits per sample, typically 16.\n   * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\n   * uses one channel and stereo data uses two channels.\n   * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\n   * @returns {AudioStreamFormat} The audio stream format being created.\n   */\n  static getWaveFormat(samplesPerSecond, bitsPerSample, channels, format) {\n    return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\n  }\n  /**\n   * Creates an audio stream format object with the specified pcm waveformat characteristics.\n   * @member AudioStreamFormat.getWaveFormatPCM\n   * @function\n   * @public\n   * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\n   * @param {number} bitsPerSample - Bits per sample, typically 16.\n   * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\n   * uses one channel and stereo data uses two channels.\n   * @returns {AudioStreamFormat} The audio stream format being created.\n   */\n  static getWaveFormatPCM(samplesPerSecond, bitsPerSample, channels) {\n    return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\n  }\n}\n/**\n * @private\n * @class AudioStreamFormatImpl\n */\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\n  /**\n   * Creates an instance with the given values.\n   * @constructor\n   * @param {number} samplesPerSec - Samples per second.\n   * @param {number} bitsPerSample - Bits per sample.\n   * @param {number} channels - Number of channels.\n   * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\n   */\n  constructor(samplesPerSec = 16000, bitsPerSample = 16, channels = 1, format = AudioFormatTag.PCM) {\n    super();\n    let isWavFormat = true;\n    /* 1 for PCM; 6 for alaw; 7 for mulaw */\n    switch (format) {\n      case AudioFormatTag.PCM:\n        this.formatTag = 1;\n        break;\n      case AudioFormatTag.ALaw:\n        this.formatTag = 6;\n        break;\n      case AudioFormatTag.MuLaw:\n        this.formatTag = 7;\n        break;\n      default:\n        isWavFormat = false;\n    }\n    this.bitsPerSample = bitsPerSample;\n    this.samplesPerSec = samplesPerSec;\n    this.channels = channels;\n    this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\n    this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\n    if (isWavFormat) {\n      this.privHeader = new ArrayBuffer(44);\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n      const view = new DataView(this.privHeader);\n      /* RIFF identifier */\n      this.setString(view, 0, \"RIFF\");\n      /* file length */\n      view.setUint32(4, 0, true);\n      /* RIFF type & Format */\n      this.setString(view, 8, \"WAVEfmt \");\n      /* format chunk length */\n      view.setUint32(16, 16, true);\n      /* audio format */\n      view.setUint16(20, this.formatTag, true);\n      /* channel count */\n      view.setUint16(22, this.channels, true);\n      /* sample rate */\n      view.setUint32(24, this.samplesPerSec, true);\n      /* byte rate (sample rate * block align) */\n      view.setUint32(28, this.avgBytesPerSec, true);\n      /* block align (channel count * bytes per sample) */\n      view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\n      /* bits per sample */\n      view.setUint16(34, this.bitsPerSample, true);\n      /* data chunk identifier */\n      this.setString(view, 36, \"data\");\n      /* data chunk length */\n      view.setUint32(40, 0, true);\n    }\n  }\n  /**\n   * Retrieves the default input format.\n   * @member AudioStreamFormatImpl.getDefaultInputFormat\n   * @function\n   * @public\n   * @returns {AudioStreamFormatImpl} The default input format.\n   */\n  static getDefaultInputFormat() {\n    return new AudioStreamFormatImpl();\n  }\n  /**\n   * Creates an audio context appropriate to current browser\n   * @member AudioStreamFormatImpl.getAudioContext\n   * @function\n   * @public\n   * @returns {AudioContext} An audio context instance\n   */\n  /* eslint-disable */\n  static getAudioContext(sampleRate) {\n    // Workaround for Speech SDK bug in Safari.\n    const AudioContext = window.AudioContext // our preferred impl\n    || window.webkitAudioContext // fallback, mostly when on Safari\n    || false; // could not find.\n    // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\n    if (!!AudioContext) {\n      if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\n        return new AudioContext({\n          sampleRate\n        });\n      } else {\n        return new AudioContext();\n      }\n    } else {\n      throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\n    }\n  }\n  /* eslint-enable */\n  /**\n   * Closes the configuration object.\n   * @member AudioStreamFormatImpl.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    return;\n  }\n  get header() {\n    return this.privHeader;\n  }\n  setString(view, offset, str) {\n    for (let i = 0; i < str.length; i++) {\n      view.setUint8(offset + i, str.charCodeAt(i));\n    }\n  }\n}","map":{"version":3,"names":["AudioFormatTag","AudioStreamFormat","getDefaultInputFormat","AudioStreamFormatImpl","getWaveFormat","samplesPerSecond","bitsPerSample","channels","format","getWaveFormatPCM","constructor","samplesPerSec","PCM","isWavFormat","formatTag","ALaw","MuLaw","avgBytesPerSec","blockAlign","Math","max","privHeader","ArrayBuffer","view","DataView","setString","setUint32","setUint16","getAudioContext","sampleRate","AudioContext","window","webkitAudioContext","undefined","navigator","mediaDevices","getSupportedConstraints","Error","close","header","offset","str","i","length","setUint8","charCodeAt"],"sources":["src/sdk/Audio/AudioStreamFormat.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}