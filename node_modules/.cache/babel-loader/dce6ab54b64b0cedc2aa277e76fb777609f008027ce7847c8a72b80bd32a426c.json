{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\nimport { Contracts } from \"../../sdk/Contracts.js\";\nimport { PropertyId, Recognizer } from \"../../sdk/Exports.js\";\nimport { RecognitionMode, RecognizerConfig, TranscriberConnectionFactory, TranscriptionServiceRecognizer } from \"../Exports.js\";\nexport class TranscriberRecognizer extends Recognizer {\n  /**\n   * TranscriberRecognizer constructor.\n   * @constructor\n   * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\n   * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\n   */\n  constructor(speechTranslationConfig, audioConfig) {\n    const speechTranslationConfigImpl = speechTranslationConfig;\n    Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\n    const audioConfigImpl = audioConfig;\n    Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\n    Contracts.throwIfNullOrWhitespace(speechTranslationConfigImpl.speechRecognitionLanguage, PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\n    this.privDisposedRecognizer = false;\n    this.isMeetingRecognizer = false;\n  }\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  get properties() {\n    return this.privProperties;\n  }\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  set conversation(c) {\n    Contracts.throwIfNullOrUndefined(c, \"Conversation\");\n    this.isMeetingRecognizer = false;\n    this.privConversation = c;\n  }\n  getConversationInfo() {\n    Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\n    return this.privConversation.conversationInfo;\n  }\n  set meeting(m) {\n    Contracts.throwIfNullOrUndefined(m, \"Meeting\");\n    this.isMeetingRecognizer = true;\n    this.privMeeting = m;\n  }\n  getMeetingInfo() {\n    Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\n    return this.privMeeting.meetingInfo;\n  }\n  IsMeetingRecognizer() {\n    return this.isMeetingRecognizer;\n  }\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privDisposedRecognizer) {\n        yield this.dispose(true);\n      }\n    });\n  }\n  // Push async join/leave conversation message via serviceRecognizer\n  pushConversationEvent(conversationInfo, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reco = this.privReco;\n      Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\n      yield reco.sendSpeechEventAsync(conversationInfo, command);\n    });\n  }\n  // Push async join/leave meeting message via serviceRecognizer\n  pushMeetingEvent(meetingInfo, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reco = this.privReco;\n      Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\n      yield reco.sendMeetingSpeechEventAsync(meetingInfo, command);\n    });\n  }\n  enforceAudioGating() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const audioConfigImpl = this.audioConfig;\n      const format = yield audioConfigImpl.format;\n      const channels = format.channels;\n      if (channels === 1) {\n        if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\n          throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\n        }\n      } else if (channels !== 8) {\n        throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\n      }\n      return;\n    });\n  }\n  connectMeetingCallbacks(transcriber) {\n    this.isMeetingRecognizer = true;\n    this.canceled = (s, e) => {\n      if (!!transcriber.canceled) {\n        transcriber.canceled(transcriber, e);\n      }\n    };\n    this.recognizing = (s, e) => {\n      if (!!transcriber.transcribing) {\n        transcriber.transcribing(transcriber, e);\n      }\n    };\n    this.recognized = (s, e) => {\n      if (!!transcriber.transcribed) {\n        transcriber.transcribed(transcriber, e);\n      }\n    };\n    this.sessionStarted = (s, e) => {\n      if (!!transcriber.sessionStarted) {\n        transcriber.sessionStarted(transcriber, e);\n      }\n    };\n    this.sessionStopped = (s, e) => {\n      if (!!transcriber.sessionStopped) {\n        transcriber.sessionStopped(transcriber, e);\n      }\n    };\n  }\n  disconnectCallbacks() {\n    this.canceled = undefined;\n    this.recognizing = undefined;\n    this.recognized = undefined;\n    this.sessionStarted = undefined;\n    this.sessionStopped = undefined;\n  }\n  /**\n   * Disposes any resources held by the object.\n   * @member ConversationTranscriber.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n        yield this.implRecognizerStop();\n      }\n      yield _super.dispose.call(this, disposing);\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n}","map":{"version":3,"names":["marshalPromiseToCallbacks","Contracts","PropertyId","Recognizer","RecognitionMode","RecognizerConfig","TranscriberConnectionFactory","TranscriptionServiceRecognizer","TranscriberRecognizer","constructor","speechTranslationConfig","audioConfig","speechTranslationConfigImpl","throwIfNull","audioConfigImpl","throwIfNullOrWhitespace","speechRecognitionLanguage","SpeechServiceConnection_RecoLanguage","properties","privDisposedRecognizer","isMeetingRecognizer","throwIfDisposed","getProperty","privProperties","authorizationToken","SpeechServiceAuthorization_Token","token","setProperty","conversation","c","throwIfNullOrUndefined","privConversation","getConversationInfo","conversationInfo","meeting","m","privMeeting","getMeetingInfo","meetingInfo","IsMeetingRecognizer","startContinuousRecognitionAsync","cb","err","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","close","dispose","pushConversationEvent","command","reco","privReco","sendSpeechEventAsync","pushMeetingEvent","sendMeetingSpeechEventAsync","enforceAudioGating","format","channels","toLowerCase","Error","connectMeetingCallbacks","transcriber","canceled","s","e","recognizing","transcribing","recognized","transcribed","sessionStarted","sessionStopped","disconnectCallbacks","undefined","disposing","implRecognizerStop","_super","call","createRecognizerConfig","speechConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","configImpl"],"sources":["src/common.speech/Transcription/TranscriberRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports.js\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}