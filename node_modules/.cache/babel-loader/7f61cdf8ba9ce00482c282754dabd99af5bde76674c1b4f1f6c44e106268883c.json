{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports.js\";\nimport { ForceDictationPropertyName, OutputFormatPropertyName } from \"../common.speech/Exports.js\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports.js\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\nimport { RecognitionMode, WebsocketMessageFormatter } from \"./Exports.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.interactiveRelativeUri = \"/speech/recognition/interactive/cognitiveservices/v1\";\n    this.conversationRelativeUri = \"/speech/recognition/conversation/cognitiveservices/v1\";\n    this.dictationRelativeUri = \"/speech/recognition/dictation/cognitiveservices/v1\";\n    this.universalUri = \"/speech/universal/v\";\n  }\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n    const queryParams = {};\n    const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n    const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n    if (endpointId) {\n      if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n        queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n      }\n    } else if (language) {\n      if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n        queryParams[QueryParameterNames.Language] = language;\n      }\n    }\n    if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\n      queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n    }\n    if (config.autoDetectSourceLanguages !== undefined) {\n      queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n    }\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    if (!endpoint) {\n      switch (config.recognitionMode) {\n        case RecognitionMode.Conversation:\n          if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\n            endpoint = host + this.dictationRelativeUri;\n          } else {\n            if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\n              endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\n            } else {\n              endpoint = host + this.conversationRelativeUri;\n            }\n          }\n          break;\n        case RecognitionMode.Dictation:\n          endpoint = host + this.dictationRelativeUri;\n          break;\n        default:\n          if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\n            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\n          } else {\n            endpoint = host + this.interactiveRelativeUri; // default is interactive\n          }\n\n          break;\n      }\n    }\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\n    // URI that was used to make the connection (including query parameters).\n    const uri = webSocketConnection.uri;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\n    return webSocketConnection;\n  }\n}","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","ForceDictationPropertyName","OutputFormatPropertyName","OutputFormat","PropertyId","ConnectionFactoryBase","RecognitionMode","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","SpeechConnectionFactory","constructor","interactiveRelativeUri","conversationRelativeUri","dictationRelativeUri","universalUri","create","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","queryParams","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","search","CustomSpeechDeploymentId","Language","Format","Simple","toLowerCase","autoDetectSourceLanguages","EnableLanguageId","setCommonUrlParams","recognitionMode","Conversation","recognitionEndpointVersion","parseInt","Dictation","headers","token","headerName","ConnectionId","enableCompression","webSocketConnection","fromRecognizerConfig","uri","setProperty","SpeechServiceConnection_Url"],"sources":["src/common.speech/SpeechConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}