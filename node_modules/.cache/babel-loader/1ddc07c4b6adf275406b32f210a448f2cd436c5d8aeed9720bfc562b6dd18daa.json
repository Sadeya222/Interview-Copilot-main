{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file */\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports.js\";\nimport { PropertyId } from \"../sdk/Exports.js\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\nimport { WebsocketMessageFormatter } from \"./Exports.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\n  create(config, authInfo, endpointPath, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\n      const scenario = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\n      endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\n    }\n    const queryParams = {\n      format: \"simple\",\n      language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage)\n    };\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n  scenarioToPath(mode) {\n    switch (mode) {\n      case \"TextIndependentVerification\":\n      case \"2\":\n        return \"verification/text-independent\";\n      case \"TextDependentVerification\":\n      case \"1\":\n        return \"verification/text-dependent\";\n      default:\n        return \"identification/text-independent\";\n    }\n  }\n}\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    return super.create(config, authInfo, \"recognition\", connectionId);\n  }\n}\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    return super.create(config, authInfo, \"profile\", connectionId);\n  }\n}","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","SpeakerRecognitionConnectionFactoryBase","create","config","authInfo","endpointPath","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","scenario","SpeechServiceConnection_SpeakerIdMode","scenarioToPath","queryParams","format","language","SpeechServiceConnection_RecoLanguage","setCommonUrlParams","headers","token","undefined","headerName","ConnectionId","SpIDAuthKey","SpeechServiceConnection_Key","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig","mode","SpeakerRecognitionConnectionFactory","VoiceProfileConnectionFactory"],"sources":["src/common.speech/SpeakerRecognitionConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}