{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognitionStatus } from \"../Exports.js\";\nexport class DetailedSpeechPhrase {\n  constructor(json) {\n    this.privDetailedSpeechPhrase = JSON.parse(json);\n    this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus];\n  }\n  static fromJSON(json) {\n    return new DetailedSpeechPhrase(json);\n  }\n  getJsonWithCorrectedOffsets(baseOffset) {\n    if (!!this.privDetailedSpeechPhrase.NBest) {\n      let firstWordOffset;\n      for (const phrase of this.privDetailedSpeechPhrase.NBest) {\n        if (!!phrase.Words && !!phrase.Words[0]) {\n          firstWordOffset = phrase.Words[0].Offset;\n          break;\n        }\n      }\n      if (!!firstWordOffset && firstWordOffset < baseOffset) {\n        const offset = baseOffset - firstWordOffset;\n        for (const details of this.privDetailedSpeechPhrase.NBest) {\n          if (!!details.Words) {\n            for (const word of details.Words) {\n              word.Offset += offset;\n            }\n          }\n          if (!!details.DisplayWords) {\n            for (const word of details.DisplayWords) {\n              word.Offset += offset;\n            }\n          }\n        }\n      }\n    }\n    return JSON.stringify(this.privDetailedSpeechPhrase);\n  }\n  get RecognitionStatus() {\n    return this.privDetailedSpeechPhrase.RecognitionStatus;\n  }\n  get NBest() {\n    return this.privDetailedSpeechPhrase.NBest;\n  }\n  get Duration() {\n    return this.privDetailedSpeechPhrase.Duration;\n  }\n  get Offset() {\n    return this.privDetailedSpeechPhrase.Offset;\n  }\n  get Language() {\n    return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\n  }\n  get LanguageDetectionConfidence() {\n    return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\n  }\n  get Text() {\n    if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\n      return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\n    }\n    return this.privDetailedSpeechPhrase.DisplayText;\n  }\n  get SpeakerId() {\n    return this.privDetailedSpeechPhrase.SpeakerId;\n  }\n}","map":{"version":3,"names":["RecognitionStatus","DetailedSpeechPhrase","constructor","json","privDetailedSpeechPhrase","JSON","parse","fromJSON","getJsonWithCorrectedOffsets","baseOffset","NBest","firstWordOffset","phrase","Words","Offset","offset","details","word","DisplayWords","stringify","Duration","Language","PrimaryLanguage","undefined","LanguageDetectionConfidence","Confidence","Text","Display","DisplayText","SpeakerId"],"sources":["src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                    if (!!details.DisplayWords) {\r\n                        for (const word of details.DisplayWords) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}