{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nexport class RiffPcmEncoder {\n  constructor(actualSampleRate, desiredSampleRate) {\n    this.privActualSampleRate = actualSampleRate;\n    this.privDesiredSampleRate = desiredSampleRate;\n  }\n  encode(actualAudioFrame) {\n    const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\n    if (!audioFrame) {\n      return null;\n    }\n    const audioLength = audioFrame.length * 2;\n    const buffer = new ArrayBuffer(audioLength);\n    const view = new DataView(buffer);\n    this.floatTo16BitPCM(view, 0, audioFrame);\n    return buffer;\n  }\n  setString(view, offset, str) {\n    for (let i = 0; i < str.length; i++) {\n      view.setUint8(offset + i, str.charCodeAt(i));\n    }\n  }\n  floatTo16BitPCM(view, offset, input) {\n    for (let i = 0; i < input.length; i++, offset += 2) {\n      const s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n    }\n  }\n  downSampleAudioFrame(srcFrame, srcRate, dstRate) {\n    if (!srcFrame) {\n      return null;\n    }\n    if (dstRate === srcRate || dstRate > srcRate) {\n      return srcFrame;\n    }\n    const ratio = srcRate / dstRate;\n    const dstLength = Math.round(srcFrame.length / ratio);\n    const dstFrame = new Float32Array(dstLength);\n    let srcOffset = 0;\n    let dstOffset = 0;\n    while (dstOffset < dstLength) {\n      const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\n      let accum = 0;\n      let count = 0;\n      while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\n        accum += srcFrame[srcOffset++];\n        count++;\n      }\n      dstFrame[dstOffset++] = accum / count;\n    }\n    return dstFrame;\n  }\n}","map":{"version":3,"names":["RiffPcmEncoder","constructor","actualSampleRate","desiredSampleRate","privActualSampleRate","privDesiredSampleRate","encode","actualAudioFrame","audioFrame","downSampleAudioFrame","audioLength","length","buffer","ArrayBuffer","view","DataView","floatTo16BitPCM","setString","offset","str","i","setUint8","charCodeAt","input","s","Math","max","min","setInt16","srcFrame","srcRate","dstRate","ratio","dstLength","round","dstFrame","Float32Array","srcOffset","dstOffset","nextSrcOffset","accum","count"],"sources":["src/common/RiffPcmEncoder.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n"],"mappings":";;;AAAA;AACA;AAEA,OAAM,MAAOA,cAAc;EAKvBC,YAAmBC,gBAAwB,EAAEC,iBAAyB;IAClE,IAAI,CAACC,oBAAoB,GAAGF,gBAAgB;IAC5C,IAAI,CAACG,qBAAqB,GAAGF,iBAAiB;EAClD;EAEOG,MAAMA,CAACC,gBAA8B;IAExC,MAAMC,UAAU,GAAG,IAAI,CAACC,oBAAoB,CAACF,gBAAgB,EAAE,IAAI,CAACH,oBAAoB,EAAE,IAAI,CAACC,qBAAqB,CAAC;IAErH,IAAI,CAACG,UAAU,EAAE;MACb,OAAO,IAAI;;IAGf,MAAME,WAAW,GAAGF,UAAU,CAACG,MAAM,GAAG,CAAC;IAEzC,MAAMC,MAAM,GAAG,IAAIC,WAAW,CAACH,WAAW,CAAC;IAC3C,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;IACjC,IAAI,CAACI,eAAe,CAACF,IAAI,EAAE,CAAC,EAAEN,UAAU,CAAC;IAEzC,OAAOI,MAAM;EACjB;EAEQK,SAASA,CAACH,IAAc,EAAEI,MAAc,EAAEC,GAAW;IACzD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACR,MAAM,EAAES,CAAC,EAAE,EAAE;MACjCN,IAAI,CAACO,QAAQ,CAACH,MAAM,GAAGE,CAAC,EAAED,GAAG,CAACG,UAAU,CAACF,CAAC,CAAC,CAAC;;EAEpD;EAEQJ,eAAeA,CAACF,IAAc,EAAEI,MAAc,EAAEK,KAAmB;IACvE,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACZ,MAAM,EAAES,CAAC,EAAE,EAAGF,MAAM,IAAI,CAAC,EAAE;MACjD,MAAMM,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEJ,KAAK,CAACH,CAAC,CAAC,CAAC,CAAC;MAC7CN,IAAI,CAACc,QAAQ,CAACV,MAAM,EAAEM,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG,MAAM,GAAGA,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC;;EAEpE;EAEQf,oBAAoBA,CACxBoB,QAAsB,EACtBC,OAAe,EACfC,OAAe;IAEf,IAAI,CAACF,QAAQ,EAAE;MACX,OAAO,IAAI;;IAGf,IAAIE,OAAO,KAAKD,OAAO,IAAIC,OAAO,GAAGD,OAAO,EAAE;MAC1C,OAAOD,QAAQ;;IAGnB,MAAMG,KAAK,GAAGF,OAAO,GAAGC,OAAO;IAC/B,MAAME,SAAS,GAAGR,IAAI,CAACS,KAAK,CAACL,QAAQ,CAAClB,MAAM,GAAGqB,KAAK,CAAC;IACrD,MAAMG,QAAQ,GAAG,IAAIC,YAAY,CAACH,SAAS,CAAC;IAC5C,IAAII,SAAS,GAAG,CAAC;IACjB,IAAIC,SAAS,GAAG,CAAC;IACjB,OAAOA,SAAS,GAAGL,SAAS,EAAE;MAC1B,MAAMM,aAAa,GAAGd,IAAI,CAACS,KAAK,CAAC,CAACI,SAAS,GAAG,CAAC,IAAIN,KAAK,CAAC;MACzD,IAAIQ,KAAK,GAAG,CAAC;MACb,IAAIC,KAAK,GAAG,CAAC;MACb,OAAOJ,SAAS,GAAGE,aAAa,IAAIF,SAAS,GAAGR,QAAQ,CAAClB,MAAM,EAAE;QAC7D6B,KAAK,IAAIX,QAAQ,CAACQ,SAAS,EAAE,CAAC;QAC9BI,KAAK,EAAE;;MAEXN,QAAQ,CAACG,SAAS,EAAE,CAAC,GAAGE,KAAK,GAAGC,KAAK;;IAGzC,OAAON,QAAQ;EACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}