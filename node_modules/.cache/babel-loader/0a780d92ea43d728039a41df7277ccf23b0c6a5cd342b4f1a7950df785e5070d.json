{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { FileAudioSource, MicAudioSource, PcmRecorder } from \"../../common.browser/Exports.js\";\nimport { Contracts } from \"../Contracts.js\";\nimport { AudioInputStream, PullAudioInputStreamCallback, PullAudioOutputStream, PushAudioOutputStream, PushAudioOutputStreamCallback, SpeakerAudioDestination } from \"../Exports.js\";\nimport { AudioFileWriter } from \"./AudioFileWriter.js\";\nimport { PullAudioInputStreamImpl } from \"./AudioInputStream.js\";\nimport { PushAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n * Updated in version 1.11.0\n */\nexport class AudioConfig {\n  /**\n   * Creates an AudioConfig object representing the default microphone on the system.\n   * @member AudioConfig.fromDefaultMicrophoneInput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromDefaultMicrophoneInput() {\n    const pcmRecorder = new PcmRecorder(true);\n    return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\n  }\n  /**\n   * Creates an AudioConfig object representing a microphone with the specified device ID.\n   * @member AudioConfig.fromMicrophoneInput\n   * @function\n   * @public\n   * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\n   * Default microphone is used the value is omitted.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromMicrophoneInput(deviceId) {\n    const pcmRecorder = new PcmRecorder(true);\n    return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\n  }\n  /**\n   * Creates an AudioConfig object representing the specified file.\n   * @member AudioConfig.fromWavFileInput\n   * @function\n   * @public\n   * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromWavFileInput(file, name = \"unnamedBuffer.wav\") {\n    return new AudioConfigImpl(new FileAudioSource(file, name));\n  }\n  /**\n   * Creates an AudioConfig object representing the specified stream.\n   * @member AudioConfig.fromStreamInput\n   * @function\n   * @public\n   * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\n   * stream. Currently, only WAV / PCM is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromStreamInput(audioStream) {\n    if (audioStream instanceof PullAudioInputStreamCallback) {\n      return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\n    }\n    if (audioStream instanceof AudioInputStream) {\n      return new AudioConfigImpl(audioStream);\n    }\n    if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\n      const pcmRecorder = new PcmRecorder(false);\n      return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\n    }\n    throw new Error(\"Not Supported Type\");\n  }\n  /**\n   * Creates an AudioConfig object representing the default speaker.\n   * @member AudioConfig.fromDefaultSpeakerOutput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n  static fromDefaultSpeakerOutput() {\n    return new AudioOutputConfigImpl(new SpeakerAudioDestination());\n  }\n  /**\n   * Creates an AudioConfig object representing the custom IPlayer object.\n   * You can use the IPlayer object to control pause, resume, etc.\n   * @member AudioConfig.fromSpeakerOutput\n   * @function\n   * @public\n   * @param {IPlayer} player - the IPlayer object for playback.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.12.0\n   */\n  static fromSpeakerOutput(player) {\n    if (player === undefined) {\n      return AudioConfig.fromDefaultSpeakerOutput();\n    }\n    if (player instanceof SpeakerAudioDestination) {\n      return new AudioOutputConfigImpl(player);\n    }\n    throw new Error(\"Not Supported Type\");\n  }\n  /**\n   * Creates an AudioConfig object representing a specified output audio file\n   * @member AudioConfig.fromAudioFileOutput\n   * @function\n   * @public\n   * @param {PathLike} filename - the filename of the output audio file\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n  static fromAudioFileOutput(filename) {\n    return new AudioOutputConfigImpl(new AudioFileWriter(filename));\n  }\n  /**\n   * Creates an AudioConfig object representing a specified audio output stream\n   * @member AudioConfig.fromStreamOutput\n   * @function\n   * @public\n   * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\n   * stream.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n  static fromStreamOutput(audioStream) {\n    if (audioStream instanceof PushAudioOutputStreamCallback) {\n      return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\n    }\n    if (audioStream instanceof PushAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n    if (audioStream instanceof PullAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n    throw new Error(\"Not Supported Type\");\n  }\n}\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\nexport class AudioConfigImpl extends AudioConfig {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioSource} source - An audio source.\n   */\n  constructor(source) {\n    super();\n    this.privSource = source;\n  }\n  /**\n   * Format information for the audio\n   */\n  get format() {\n    return this.privSource.format;\n  }\n  /**\n   * @member AudioConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, err) {\n    this.privSource.turnOff().then(() => {\n      if (!!cb) {\n        cb();\n      }\n    }, error => {\n      if (!!err) {\n        err(error);\n      }\n    });\n  }\n  /**\n   * @member AudioConfigImpl.prototype.id\n   * @function\n   * @public\n   */\n  id() {\n    return this.privSource.id();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.turnOn\n   * @function\n   * @public\n   * @returns {Promise<void>} A promise.\n   */\n  turnOn() {\n    return this.privSource.turnOn();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.attach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   * @returns {Promise<IAudioStreamNode>} A promise.\n   */\n  attach(audioNodeId) {\n    return this.privSource.attach(audioNodeId);\n  }\n  /**\n   * @member AudioConfigImpl.prototype.detach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   */\n  detach(audioNodeId) {\n    return this.privSource.detach(audioNodeId);\n  }\n  /**\n   * @member AudioConfigImpl.prototype.turnOff\n   * @function\n   * @public\n   * @returns {Promise<void>} A promise.\n   */\n  turnOff() {\n    return this.privSource.turnOff();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.events\n   * @function\n   * @public\n   * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n   */\n  get events() {\n    return this.privSource.events;\n  }\n  setProperty(name, value) {\n    Contracts.throwIfNull(value, \"value\");\n    if (undefined !== this.privSource.setProperty) {\n      this.privSource.setProperty(name, value);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n  }\n  getProperty(name, def) {\n    if (undefined !== this.privSource.getProperty) {\n      return this.privSource.getProperty(name, def);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n    return def;\n  }\n  get deviceInfo() {\n    return this.privSource.deviceInfo;\n  }\n}\nexport class AudioOutputConfigImpl extends AudioConfig {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioDestination} destination - An audio destination.\n   */\n  constructor(destination) {\n    super();\n    this.privDestination = destination;\n  }\n  set format(format) {\n    this.privDestination.format = format;\n  }\n  write(buffer) {\n    this.privDestination.write(buffer);\n  }\n  close() {\n    this.privDestination.close();\n  }\n  id() {\n    return this.privDestination.id();\n  }\n  setProperty() {\n    throw new Error(\"This AudioConfig instance does not support setting properties.\");\n  }\n  getProperty() {\n    throw new Error(\"This AudioConfig instance does not support getting properties.\");\n  }\n}","map":{"version":3,"names":["FileAudioSource","MicAudioSource","PcmRecorder","Contracts","AudioInputStream","PullAudioInputStreamCallback","PullAudioOutputStream","PushAudioOutputStream","PushAudioOutputStreamCallback","SpeakerAudioDestination","AudioFileWriter","PullAudioInputStreamImpl","PushAudioOutputStreamImpl","AudioConfig","fromDefaultMicrophoneInput","pcmRecorder","AudioConfigImpl","fromMicrophoneInput","deviceId","fromWavFileInput","file","name","fromStreamInput","audioStream","MediaStream","Error","fromDefaultSpeakerOutput","AudioOutputConfigImpl","fromSpeakerOutput","player","undefined","fromAudioFileOutput","filename","fromStreamOutput","constructor","source","privSource","format","close","cb","err","turnOff","then","error","id","turnOn","attach","audioNodeId","detach","events","setProperty","value","throwIfNull","getProperty","def","deviceInfo","destination","privDestination","write","buffer"],"sources":["src/sdk/Audio/AudioConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports.js\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports.js\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter.js\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream.js\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}