{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts.js\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\nimport { PropertyId } from \"./Exports.js\";\n/**\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\n * @class BotFrameworkConfig\n */\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\n  /**\n   * Creates an instance of BotFrameworkConfig.\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates a bot framework configuration instance with the provided subscription information.\n   * @member BotFrameworkConfig.fromSubscription\n   * @function\n   * @public\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n   * resource name.\n   * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n   */\n  static fromSubscription(subscription, region, botId) {\n    Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const botFrameworkConfig = new DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.BotFramework);\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    if (botId) {\n      botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\n    }\n    return botFrameworkConfig;\n  }\n  /**\n   * Creates a bot framework configuration instance for the specified authorization token and region.\n   * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\n   * caller must refresh it by setting the authorizationToken property on the corresponding\n   * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\n   * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\n   * original configuration's authorization token. Create a new configuration instance or set the\n   * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\n   * further DialogServiceConnectors.\n   * @member BotFrameworkConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param authorizationToken The authorization token associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n   * resource name.\n   * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n   */\n  static fromAuthorizationToken(authorizationToken, region, botId) {\n    Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const botFrameworkConfig = new DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.BotFramework);\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    if (botId) {\n      botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\n    }\n    return botFrameworkConfig;\n  }\n  /**\n   * Creates an instance of a BotFrameworkConfig.\n   * This method is intended only for users who use a non-default service host. The standard resource path will be\n   * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n   * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n   * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\n   * property on the created BotFrameworkConfig instance.\n   * Note: Added in version 1.15.0.\n   * @member BotFrameworkConfig.fromHost\n   * @function\n   * @public\n   * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\n   * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\n   * wss://{host}.convai.speech.azure.us.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\n   * token must be set.\n   * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n   * resource name.\n   * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n   */\n  static fromHost(host, subscriptionKey, botId) {\n    void botId;\n    Contracts.throwIfNullOrUndefined(host, \"host\");\n    const resolvedHost = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\n    Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\n    const botFrameworkConfig = new DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.BotFramework);\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\n    if (undefined !== subscriptionKey) {\n      botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n    return botFrameworkConfig;\n  }\n  /**\n   * Creates an instance of a BotFrameworkConfig.\n   * This method is intended only for users who use a non-standard service endpoint or parameters.\n   * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\n   * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n   * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\n   * use the authorization token.\n   * Note: Added in version 1.15.0.\n   * @member BotFrameworkConfig.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} endpoint - The service endpoint to connect to.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\n   * token must be set.\n   * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\n   */\n  static fromEndpoint(endpoint, subscriptionKey) {\n    Contracts.throwIfNull(endpoint, \"endpoint\");\n    const botFrameworkConfig = new DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.BotFramework);\n    botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\n    if (undefined !== subscriptionKey) {\n      botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n    return botFrameworkConfig;\n  }\n}","map":{"version":3,"names":["Contracts","DialogServiceConfig","DialogServiceConfigImpl","PropertyId","BotFrameworkConfig","constructor","fromSubscription","subscription","region","botId","throwIfNullOrWhitespace","botFrameworkConfig","setProperty","Conversation_DialogType","DialogTypes","BotFramework","SpeechServiceConnection_Key","SpeechServiceConnection_Region","Conversation_ApplicationId","fromAuthorizationToken","authorizationToken","SpeechServiceAuthorization_Token","fromHost","host","subscriptionKey","throwIfNullOrUndefined","resolvedHost","URL","SpeechServiceConnection_Host","toString","undefined","fromEndpoint","endpoint","throwIfNull","SpeechServiceConnection_Endpoint"],"sources":["src/sdk/BotFrameworkConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}