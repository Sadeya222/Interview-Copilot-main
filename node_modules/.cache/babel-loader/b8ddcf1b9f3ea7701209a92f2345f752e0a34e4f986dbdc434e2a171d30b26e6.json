{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable max-classes-per-file */\nimport { connectivity, type } from \"../../common.speech/Exports.js\";\nimport { AudioSourceInitializingEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, ChunkedArrayBufferStream, Events, EventSource } from \"../../common/Exports.js\";\nimport { createNoDashGuid } from \"../../common/Guid.js\";\nimport { AudioStreamFormat } from \"../Exports.js\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\nexport class AudioInputStream {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  constructor() {\n    return;\n  }\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member AudioInputStream.createPushStream\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The audio input stream being created.\n   */\n  static createPushStream(format) {\n    return PushAudioInputStream.create(format);\n  }\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n   * and close() methods.\n   * @member AudioInputStream.createPullStream\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n   * PullAudioInputStreamCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n   * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The audio input stream being created.\n   */\n  static createPullStream(callback, format) {\n    return PullAudioInputStream.create(callback, format);\n    // throw new Error(\"Oops\");\n  }\n}\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\nexport class PushAudioInputStream extends AudioInputStream {\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member PushAudioInputStream.create\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n   * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The push audio input stream being created.\n   */\n  static create(format) {\n    return new PushAudioInputStreamImpl(format);\n  }\n}\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\nexport class PushAudioInputStreamImpl extends PushAudioInputStream {\n  /**\n   * Creates and initalizes an instance with the given values.\n   * @constructor\n   * @param {AudioStreamFormat} format - The audio stream format.\n   */\n  constructor(format) {\n    super();\n    if (format === undefined) {\n      this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n    } else {\n      this.privFormat = format;\n    }\n    this.privEvents = new EventSource();\n    this.privId = createNoDashGuid();\n    this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\n  }\n  /**\n   * Format information for the audio\n   */\n  get format() {\n    return Promise.resolve(this.privFormat);\n  }\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PushAudioInputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n  write(dataBuffer) {\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  }\n  /**\n   * Closes the stream.\n   * @member PushAudioInputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    this.privStream.close();\n  }\n  id() {\n    return this.privId;\n  }\n  turnOn() {\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return;\n  }\n  attach(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      yield this.turnOn();\n      const stream = this.privStream;\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => __awaiter(this, void 0, void 0, function* () {\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          return this.turnOff();\n        }),\n        id: () => audioNodeId,\n        read: () => stream.read()\n      };\n    });\n  }\n  detach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  }\n  turnOff() {\n    return;\n  }\n  get events() {\n    return this.privEvents;\n  }\n  get deviceInfo() {\n    return Promise.resolve({\n      bitspersample: this.privFormat.bitsPerSample,\n      channelcount: this.privFormat.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"PushStream\",\n      samplerate: this.privFormat.samplesPerSec,\n      type: type.Stream\n    });\n  }\n  onEvent(event) {\n    this.privEvents.onEvent(event);\n    Events.instance.onEvent(event);\n  }\n  toBuffer(arrayBuffer) {\n    const buf = Buffer.alloc(arrayBuffer.byteLength);\n    const view = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < buf.length; ++i) {\n      buf[i] = view[i];\n    }\n    return buf;\n  }\n}\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\nexport class PullAudioInputStream extends AudioInputStream {\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @member PullAudioInputStream.create\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   * derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The push audio input stream being created.\n   */\n  static create(callback, format) {\n    return new PullAudioInputStreamImpl(callback, format);\n  }\n}\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\nexport class PullAudioInputStreamImpl extends PullAudioInputStream {\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @constructor\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   * derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   */\n  constructor(callback, format) {\n    super();\n    if (undefined === format) {\n      this.privFormat = AudioStreamFormat.getDefaultInputFormat();\n    } else {\n      this.privFormat = format;\n    }\n    this.privEvents = new EventSource();\n    this.privId = createNoDashGuid();\n    this.privCallback = callback;\n    this.privIsClosed = false;\n    this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\n  }\n  /**\n   * Format information for the audio\n   */\n  get format() {\n    return Promise.resolve(this.privFormat);\n  }\n  /**\n   * Closes the stream.\n   * @member PullAudioInputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    this.privIsClosed = true;\n    this.privCallback.close();\n  }\n  id() {\n    return this.privId;\n  }\n  turnOn() {\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return;\n  }\n  attach(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      yield this.turnOn();\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => {\n          this.privCallback.close();\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          return this.turnOff();\n        },\n        id: () => audioNodeId,\n        read: () => {\n          let totalBytes = 0;\n          let transmitBuff;\n          // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n          while (totalBytes < this.privBufferSize) {\n            // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\n            // data back.\n            const readBuff = new ArrayBuffer(this.privBufferSize - totalBytes);\n            const pulledBytes = this.privCallback.read(readBuff);\n            // If there is no return buffer yet defined, set the return buffer to the that was just populated.\n            // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\n            // preferred size allocated.\n            if (undefined === transmitBuff) {\n              transmitBuff = readBuff;\n            } else {\n              // Not the first bite at the apple, so fill the return buffer with the data we got back.\n              const intView = new Int8Array(transmitBuff);\n              intView.set(new Int8Array(readBuff), totalBytes);\n            }\n            // If there are no bytes to read, just break out and be done.\n            if (0 === pulledBytes) {\n              break;\n            }\n            totalBytes += pulledBytes;\n          }\n          return Promise.resolve({\n            buffer: transmitBuff.slice(0, totalBytes),\n            isEnd: this.privIsClosed || totalBytes === 0,\n            timeReceived: Date.now()\n          });\n        }\n      };\n    });\n  }\n  detach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  }\n  turnOff() {\n    return;\n  }\n  get events() {\n    return this.privEvents;\n  }\n  get deviceInfo() {\n    return Promise.resolve({\n      bitspersample: this.privFormat.bitsPerSample,\n      channelcount: this.privFormat.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"PullStream\",\n      samplerate: this.privFormat.samplesPerSec,\n      type: type.Stream\n    });\n  }\n  onEvent(event) {\n    this.privEvents.onEvent(event);\n    Events.instance.onEvent(event);\n  }\n}","map":{"version":3,"names":["connectivity","type","AudioSourceInitializingEvent","AudioSourceReadyEvent","AudioStreamNodeAttachedEvent","AudioStreamNodeAttachingEvent","AudioStreamNodeDetachedEvent","ChunkedArrayBufferStream","Events","EventSource","createNoDashGuid","AudioStreamFormat","AudioStreamFormatImpl","AudioInputStream","constructor","createPushStream","format","PushAudioInputStream","create","createPullStream","callback","PullAudioInputStream","PushAudioInputStreamImpl","undefined","privFormat","getDefaultInputFormat","privEvents","privId","privStream","avgBytesPerSec","Promise","resolve","write","dataBuffer","writeStreamChunk","buffer","isEnd","timeReceived","Date","now","close","id","turnOn","onEvent","attach","audioNodeId","stream","detach","__awaiter","turnOff","read","events","deviceInfo","bitspersample","bitsPerSample","channelcount","channels","Unknown","manufacturer","model","samplerate","samplesPerSec","Stream","event","instance","toBuffer","arrayBuffer","buf","Buffer","alloc","byteLength","view","Uint8Array","i","length","PullAudioInputStreamImpl","privCallback","privIsClosed","privBufferSize","totalBytes","transmitBuff","readBuff","ArrayBuffer","pulledBytes","intView","Int8Array","set","slice"],"sources":["src/sdk/Audio/AudioInputStream.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { createNoDashGuid } from \"../../common/Guid.js\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}