{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts.js\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\nimport { PropertyId } from \"./Exports.js\";\n/**\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\n * @class CustomCommandsConfig\n */\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\n  /**\n   * Creates an instance of CustomCommandsConfig.\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified subscription and region.\n   * @member CustomCommandsConfig.fromSubscription\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new bot framework config.\n   */\n  static fromSubscription(applicationId, subscription, region) {\n    Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const customCommandsConfig = new DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\n    customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   * expires, the caller needs to refresh it by calling this setter with a new valid token.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member CustomCommandsConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param authorizationToken The authorization token associated with the application.\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new speech commands config.\n   */\n  static fromAuthorizationToken(applicationId, authorizationToken, region) {\n    Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const customCommandsConfig = new DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\n    customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  }\n  /**\n   * Sets the corresponding backend application identifier.\n   * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n   * @function\n   * @public\n   * @param {string} value - The application identifier to set.\n   */\n  set applicationId(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.setProperty(PropertyId.Conversation_ApplicationId, value);\n  }\n  /**\n   * Gets the corresponding backend application identifier.\n   * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n   * @function\n   * @public\n   * @param {string} value - The application identifier to get.\n   */\n  get applicationId() {\n    return this.getProperty(PropertyId.Conversation_ApplicationId);\n  }\n}","map":{"version":3,"names":["Contracts","DialogServiceConfig","DialogServiceConfigImpl","PropertyId","CustomCommandsConfig","constructor","fromSubscription","applicationId","subscription","region","throwIfNullOrWhitespace","customCommandsConfig","setProperty","Conversation_DialogType","DialogTypes","CustomCommands","Conversation_ApplicationId","SpeechServiceConnection_Key","SpeechServiceConnection_Region","fromAuthorizationToken","authorizationToken","SpeechServiceAuthorization_Token","value","getProperty"],"sources":["src/sdk/CustomCommandsConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,mBAAmB,EAAEC,uBAAuB,QAAQ,0BAA0B;AACvF,SAASC,UAAU,QAAQ,cAAc;AAEzC;;;;AAIA,OAAM,MAAOC,oBAAqB,SAAQF,uBAAuB;EAE7D;;;EAGAG,YAAA;IACI,KAAK,EAAE;EACX;EAEA;;;;;;;;;;EAUO,OAAOC,gBAAgBA,CAACC,aAAqB,EAAEC,YAAoB,EAAEC,MAAc;IACtFT,SAAS,CAACU,uBAAuB,CAACH,aAAa,EAAE,eAAe,CAAC;IACjEP,SAAS,CAACU,uBAAuB,CAACF,YAAY,EAAE,cAAc,CAAC;IAC/DR,SAAS,CAACU,uBAAuB,CAACD,MAAM,EAAE,QAAQ,CAAC;IAEnD,MAAME,oBAAoB,GAAyB,IAAIT,uBAAuB,EAAE;IAChFS,oBAAoB,CAACC,WAAW,CAACT,UAAU,CAACU,uBAAuB,EAAEZ,mBAAmB,CAACa,WAAW,CAACC,cAAc,CAAC;IACpHJ,oBAAoB,CAACC,WAAW,CAACT,UAAU,CAACa,0BAA0B,EAAET,aAAa,CAAC;IACtFI,oBAAoB,CAACC,WAAW,CAACT,UAAU,CAACc,2BAA2B,EAAET,YAAY,CAAC;IACtFG,oBAAoB,CAACC,WAAW,CAACT,UAAU,CAACe,8BAA8B,EAAET,MAAM,CAAC;IACnF,OAAOE,oBAAoB;EAC/B;EAEA;;;;;;;;;;;;;;;EAeO,OAAOQ,sBAAsBA,CAACZ,aAAqB,EAAEa,kBAA0B,EAAEX,MAAc;IAClGT,SAAS,CAACU,uBAAuB,CAACH,aAAa,EAAE,eAAe,CAAC;IACjEP,SAAS,CAACU,uBAAuB,CAACU,kBAAkB,EAAE,oBAAoB,CAAC;IAC3EpB,SAAS,CAACU,uBAAuB,CAACD,MAAM,EAAE,QAAQ,CAAC;IAEnD,MAAME,oBAAoB,GAAyB,IAAIT,uBAAuB,EAAE;IAChFS,oBAAoB,CAACC,WAAW,CAACT,UAAU,CAACU,uBAAuB,EAAEZ,mBAAmB,CAACa,WAAW,CAACC,cAAc,CAAC;IACpHJ,oBAAoB,CAACC,WAAW,CAACT,UAAU,CAACa,0BAA0B,EAAET,aAAa,CAAC;IACtFI,oBAAoB,CAACC,WAAW,CAACT,UAAU,CAACkB,gCAAgC,EAAED,kBAAkB,CAAC;IACjGT,oBAAoB,CAACC,WAAW,CAACT,UAAU,CAACe,8BAA8B,EAAET,MAAM,CAAC;IACnF,OAAOE,oBAAoB;EAC/B;EAEA;;;;;;;EAOA,IAAWJ,aAAaA,CAACe,KAAa;IAClCtB,SAAS,CAACU,uBAAuB,CAACY,KAAK,EAAE,OAAO,CAAC;IACjD,IAAI,CAACV,WAAW,CAACT,UAAU,CAACa,0BAA0B,EAAEM,KAAK,CAAC;EAClE;EAEA;;;;;;;EAOA,IAAWf,aAAaA,CAAA;IACpB,OAAO,IAAI,CAACgB,WAAW,CAACpB,UAAU,CAACa,0BAA0B,CAAC;EAClE"},"metadata":{},"sourceType":"module","externalDependencies":[]}