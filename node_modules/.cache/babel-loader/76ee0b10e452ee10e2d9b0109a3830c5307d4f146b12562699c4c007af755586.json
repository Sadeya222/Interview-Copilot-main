{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RestMessageAdapter, RestRequestType } from \"../../common.browser/Exports.js\";\nimport { Contracts } from \"../../sdk/Contracts.js\";\nimport { PropertyId } from \"../../sdk/Exports.js\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\nexport class ConversationManager {\n  constructor() {\n    //\n    this.privRequestParams = ConversationConnectionConfig.configParams;\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privHost = ConversationConnectionConfig.host;\n    this.privApiVersion = ConversationConnectionConfig.apiVersion;\n    this.privRestPath = ConversationConnectionConfig.restPath;\n    this.privRestAdapter = new RestMessageAdapter({});\n  }\n  /**\n   * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n   * @param args\n   * @param conversationCode\n   * @param callback\n   * @param errorCallback\n   */\n  createOrJoin(args, conversationCode, cb, err) {\n    try {\n      Contracts.throwIfNullOrUndefined(args, \"args\");\n      const languageCode = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\n      const nickname = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\n      const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n      const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n      const subscriptionKey = args.getProperty(PropertyId.SpeechServiceConnection_Key);\n      const subscriptionRegion = args.getProperty(PropertyId.SpeechServiceConnection_Region);\n      const authToken = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n      Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n      Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n      Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n      const queryParams = {};\n      queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n      queryParams[this.privRequestParams.languageCode] = languageCode;\n      queryParams[this.privRequestParams.nickname] = nickname;\n      const headers = {};\n      if (correlationId) {\n        headers[this.privRequestParams.correlationId] = correlationId;\n      }\n      headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\n      if (conversationCode !== undefined) {\n        queryParams[this.privRequestParams.roomId] = conversationCode;\n      } else {\n        Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n        headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n        if (subscriptionKey) {\n          headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n        } else if (authToken) {\n          headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\n        } else {\n          Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n        }\n      }\n      const config = {};\n      config.headers = headers;\n      this.privRestAdapter.options = config;\n      const endpoint = `https://${endpointHost}${this.privRestPath}`;\n      // TODO: support a proxy and certificate validation\n      this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then(response => {\n        const requestId = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\n        if (!response.ok) {\n          if (!!err) {\n            // get the error\n            let errorMessage = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n            let errMessageRaw;\n            try {\n              errMessageRaw = JSON.parse(response.data);\n              errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\n            } catch (e) {\n              errorMessage += ` [${response.data}]`;\n            }\n            if (requestId) {\n              errorMessage += ` ${requestId}`;\n            }\n            err(errorMessage);\n          }\n          return;\n        }\n        const conversation = JSON.parse(response.data);\n        if (conversation) {\n          conversation.requestId = requestId;\n        }\n        if (!!cb) {\n          try {\n            cb(conversation);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n          cb = undefined;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n      }).catch(() => {});\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\n   * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n   * @param args\n   * @param sessionToken\n   * @param callback\n   */\n  leave(args, sessionToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n        const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n        const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n        const queryParams = {};\n        queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n        queryParams[this.privRequestParams.sessionToken] = sessionToken;\n        const headers = {};\n        if (correlationId) {\n          headers[this.privRequestParams.correlationId] = correlationId;\n        }\n        const config = {};\n        config.headers = headers;\n        this.privRestAdapter.options = config;\n        const endpoint = `https://${endpointHost}${this.privRestPath}`;\n        // TODO: support a proxy and certificate validation\n        this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then(response => {\n          if (!response.ok) {\n            // ignore errors on delete\n          }\n          resolve();\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n        }).catch(() => {});\n      } catch (error) {\n        if (error instanceof Error) {\n          const typedError = error;\n          reject(typedError.name + \": \" + typedError.message);\n        } else {\n          reject(error);\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["RestMessageAdapter","RestRequestType","Contracts","PropertyId","ConversationConnectionConfig","ConversationManager","constructor","privRequestParams","configParams","privErrors","restErrors","privHost","host","privApiVersion","apiVersion","privRestPath","restPath","privRestAdapter","createOrJoin","args","conversationCode","cb","err","throwIfNullOrUndefined","languageCode","getProperty","SpeechServiceConnection_RecoLanguage","defaultLanguageCode","nickname","ConversationTranslator_Name","endpointHost","ConversationTranslator_Host","correlationId","ConversationTranslator_CorrelationId","subscriptionKey","SpeechServiceConnection_Key","subscriptionRegion","SpeechServiceConnection_Region","authToken","SpeechServiceAuthorization_Token","throwIfNullOrWhitespace","queryParams","headers","clientAppId","undefined","roomId","authInvalidSubscriptionRegion","authorization","authInvalidSubscriptionKey","config","options","endpoint","request","Post","then","response","requestId","extractHeaderValue","ok","errorMessage","invalidCreateJoinConversationResponse","replace","status","toString","errMessageRaw","JSON","parse","data","error","code","message","e","conversation","catch","Error","typedError","name","leave","sessionToken","Promise","resolve","reject","invalidArgs","Delete"],"sources":["src/common.speech/Transcription/ConversationManager.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports.js\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}