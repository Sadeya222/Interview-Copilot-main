{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable max-classes-per-file */\nimport { ConversationConnectionConfig, ConversationManager, ConversationTranslatorCommandTypes, ConversationTranslatorMessageTypes, InternalParticipants } from \"../../common.speech/Exports.js\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\nimport { Contracts } from \"../Contracts.js\";\nimport { ConversationParticipantsChangedEventArgs, ConversationTranslationEventArgs, Participant, ParticipantChangedReason, PropertyCollection, PropertyId } from \"../Exports.js\";\nexport class Meeting {\n  constructor() {\n    return;\n  }\n  /**\n   * Create a meeting\n   * @param speechConfig\n   * @param meetingId\n   * @param cb\n   * @param err\n   */\n  static createMeetingAsync(speechConfig, meetingId, arg3, arg4) {\n    Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n    Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\n    Contracts.throwIfNull(meetingId, \"meetingId\");\n    if (meetingId.length === 0) {\n      throw new Error(\"meetingId cannot be empty\");\n    }\n    if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\n      Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\n    }\n    const meetingImpl = new MeetingImpl(speechConfig, meetingId);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {}))(), arg3, arg4);\n    return meetingImpl;\n  }\n}\nexport class MeetingImpl extends Meeting {\n  /**\n   * Create a Meeting impl\n   * @param speechConfig\n   * @param {string} id - optional conversationId\n   */\n  constructor(speechConfig, id) {\n    super();\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    /** websocket callbacks */\n    /* eslint-disable @typescript-eslint/typedef */\n    this.onConnected = e => {\n      var _a;\n      this.privIsConnected = true;\n      try {\n        if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.sessionStarted)) {\n          this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.onDisconnected = e => {\n      var _a;\n      try {\n        if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.sessionStopped)) {\n          this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\n        }\n      } catch (e) {\n        //\n      } finally {\n        void this.close(false);\n      }\n    };\n    this.onCanceled = (r, e) => {\n      var _a;\n      try {\n        if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.canceled)) {\n          this.privConversationTranslator.canceled(this.privConversationTranslator, e);\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.onParticipantUpdateCommandReceived = (r, e) => {\n      try {\n        const updatedParticipant = this.privParticipants.getParticipant(e.id);\n        if (updatedParticipant !== undefined) {\n          switch (e.key) {\n            case ConversationTranslatorCommandTypes.changeNickname:\n              updatedParticipant.displayName = e.value;\n              break;\n            case ConversationTranslatorCommandTypes.setUseTTS:\n              updatedParticipant.isUsingTts = e.value;\n              break;\n            case ConversationTranslatorCommandTypes.setProfanityFiltering:\n              updatedParticipant.profanity = e.value;\n              break;\n            case ConversationTranslatorCommandTypes.setMute:\n              updatedParticipant.isMuted = e.value;\n              break;\n            case ConversationTranslatorCommandTypes.setTranslateToLanguages:\n              updatedParticipant.translateToLanguages = e.value;\n              break;\n          }\n          this.privParticipants.addOrUpdateParticipant(updatedParticipant);\n          if (!!this.privConversationTranslator) {\n            this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated, [this.toParticipant(updatedParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.onLockRoomCommandReceived = () => {\n      // TODO\n    };\n    this.onMuteAllCommandReceived = (r, e) => {\n      try {\n        this.privParticipants.participants.forEach(p => p.isMuted = p.isHost ? false : e.isMuted);\n        if (!!this.privConversationTranslator) {\n          this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated, this.toParticipants(false), e.sessionId));\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.onParticipantJoinCommandReceived = (r, e) => {\n      try {\n        const newParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\n        if (newParticipant !== undefined) {\n          if (!!this.privConversationTranslator) {\n            this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, [this.toParticipant(newParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.onParticipantLeaveCommandReceived = (r, e) => {\n      try {\n        const ejectedParticipant = this.privParticipants.getParticipant(e.participant.id);\n        if (ejectedParticipant !== undefined) {\n          // remove the participant from the internal participants list\n          this.privParticipants.deleteParticipant(e.participant.id);\n          if (!!this.privConversationTranslator) {\n            // notify subscribers that the participant has left the conversation\n            this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation, [this.toParticipant(ejectedParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.onTranslationReceived = (r, e) => {\n      try {\n        switch (e.command) {\n          case ConversationTranslatorMessageTypes.final:\n            if (!!this.privConversationTranslator) {\n              this.privConversationTranslator.transcribed(this.privConversationTranslator, new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n            break;\n          case ConversationTranslatorMessageTypes.partial:\n            if (!!this.privConversationTranslator) {\n              this.privConversationTranslator.transcribing(this.privConversationTranslator, new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n            break;\n          case ConversationTranslatorMessageTypes.instantMessage:\n            if (!!this.privConversationTranslator) {\n              this.privConversationTranslator.textMessageReceived(this.privConversationTranslator, new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n            break;\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.onParticipantsListReceived = (r, e) => {\n      var _a;\n      try {\n        // check if the session token needs to be updated\n        if (e.sessionToken !== undefined && e.sessionToken !== null) {\n          this.privRoom.token = e.sessionToken;\n        }\n        // save the participants\n        this.privParticipants.participants = [...e.participants];\n        // enable the conversation\n        if (this.privParticipants.me !== undefined) {\n          this.privIsReady = true;\n        }\n        if (!!this.privConversationTranslator) {\n          this.privConversationTranslator.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\n        }\n        // if this is the host, update the nickname if needed\n        if (this.me.isHost) {\n          const nickname = (_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.properties.getProperty(PropertyId.ConversationTranslator_Name);\n          if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\n            // issue a change nickname request\n            this.changeNicknameAsync(nickname);\n          }\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.onConversationExpiration = (r, e) => {\n      try {\n        if (!!this.privConversationTranslator) {\n          this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\n        }\n      } catch (e) {\n        //\n      }\n    };\n    this.privIsConnected = false;\n    this.privIsDisposed = false;\n    this.privConversationId = \"\";\n    this.privProperties = new PropertyCollection();\n    this.privManager = new ConversationManager();\n    // check the speech language\n    const language = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    if (!language) {\n      speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\n    }\n    this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    this.privConversationId = id;\n    // save the speech config for future usage\n    this.privConfig = speechConfig;\n    // save the config properties\n    const configImpl = speechConfig;\n    Contracts.throwIfNull(configImpl, \"speechConfig\");\n    this.privProperties = configImpl.properties.clone();\n    this.privIsConnected = false;\n    this.privParticipants = new InternalParticipants();\n    this.privIsReady = false;\n    this.privTextMessageMaxLength = 1000;\n  }\n  // get the internal data about a conversation\n  get room() {\n    return this.privRoom;\n  }\n  // get the wrapper for connecting to the websockets\n  get connection() {\n    return this.privConversationRecognizer; // this.privConnection;\n  }\n  // get the config\n  get config() {\n    return this.privConfig;\n  }\n  // get the meeting Id\n  get meetingId() {\n    return this.privRoom ? this.privRoom.roomId : this.privConversationId;\n  }\n  // get the properties\n  get properties() {\n    return this.privProperties;\n  }\n  // get the speech language\n  get speechRecognitionLanguage() {\n    return this.privLanguage;\n  }\n  get isMutedByHost() {\n    var _a, _b;\n    return ((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isHost) ? false : (_b = this.privParticipants.me) === null || _b === void 0 ? void 0 : _b.isMuted;\n  }\n  get isConnected() {\n    return this.privIsConnected && this.privIsReady;\n  }\n  get participants() {\n    return this.toParticipants(true);\n  }\n  get me() {\n    return this.toParticipant(this.privParticipants.me);\n  }\n  get host() {\n    return this.toParticipant(this.privParticipants.host);\n  }\n  get transcriberRecognizer() {\n    return this.privTranscriberRecognizer;\n  }\n  get meetingInfo() {\n    const convId = this.meetingId;\n    const p = this.participants.map(part => ({\n      id: part.id,\n      preferredLanguage: part.preferredLanguage,\n      voice: part.voice\n    }));\n    const props = {};\n    for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\n      const val = this.properties.getProperty(key, \"\");\n      if (val !== \"\") {\n        props[key] = val;\n      }\n    }\n    const info = {\n      id: convId,\n      participants: p,\n      meetingProperties: props\n    };\n    return info;\n  }\n  get canSend() {\n    var _a;\n    return this.privIsConnected && !((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isMuted);\n  }\n  get canSendAsHost() {\n    var _a;\n    return this.privIsConnected && ((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isHost);\n  }\n  // get / set the speech auth token\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  get authorizationToken() {\n    return this.privToken;\n  }\n  set authorizationToken(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\n    this.privToken = value;\n  }\n  /**\n   * Create a new meeting as Host\n   * @param cb\n   * @param err\n   */\n  createMeetingAsync(cb, err) {\n    try {\n      if (!!this.privConversationRecognizer) {\n        this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n      }\n      this.privManager.createOrJoin(this.privProperties, undefined, room => {\n        if (!room) {\n          this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\n        }\n        this.privRoom = room;\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Starts a new meeting as host.\n   * @param cb\n   * @param err\n   */\n  startMeetingAsync(cb, err) {\n    try {\n      // check if there is already a recognizer\n      if (!!this.privConversationRecognizer) {\n        this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n      }\n      // check if there is conversation data available\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\n      // connect to the conversation websocket\n      this.privParticipants.meId = this.privRoom.participantId;\n      // Because ConversationTranslator manually sets up and manages the connection, Conversation\n      // has to forward serviceRecognizer connection events that usually get passed automatically\n      this.privConversationRecognizer.connected = this.onConnected;\n      this.privConversationRecognizer.disconnected = this.onDisconnected;\n      this.privConversationRecognizer.canceled = this.onCanceled;\n      this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\n      this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\n      this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\n      this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\n      this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\n      this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\n      this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\n      this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\n      this.privConversationRecognizer.connect(this.privRoom.token, () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Join a meeting as a participant.\n   * @param { IParticipant } participant - participant to add\n   * @param cb\n   * @param err\n   */\n  addParticipantAsync(participant, cb, err) {\n    Contracts.throwIfNullOrUndefined(participant, \"Participant\");\n    marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\n  }\n  /**\n   * Join a meeting as a participant.\n   * @param meeting\n   * @param nickname\n   * @param lang\n   * @param cb\n   * @param err\n   */\n  joinMeetingAsync(meetingId, nickname, lang, cb, err) {\n    try {\n      // TODO\n      // if (!!this.privConversationRecognizer) {\n      //     throw new Error(this.privErrors.permissionDeniedStart);\n      // }\n      Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\n      Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n      Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\n      // join the conversation\n      this.privManager.createOrJoin(this.privProperties, meetingId, room => {\n        Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\n        this.privRoom = room;\n        this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\n        // join callback\n        if (!!cb) {\n          cb(room.cognitiveSpeechAuthToken);\n        }\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Deletes a meeting\n   * @param cb\n   * @param err\n   */\n  deleteMeetingAsync(cb, err) {\n    marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\n  }\n  deleteMeetingImplAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\n      Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\n      yield this.privManager.leave(this.privProperties, this.privRoom.token);\n      this.dispose();\n    });\n  }\n  /**\n   * Issues a request to close the client websockets\n   * @param cb\n   * @param err\n   */\n  endMeetingAsync(cb, err) {\n    marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\n  }\n  endMeetingImplAsync() {\n    return this.close(true);\n  }\n  /**\n   * Issues a request to lock the conversation\n   * @param cb\n   * @param err\n   */\n  lockMeetingAsync(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getLockCommand(true), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to mute the meeting\n   * @param cb\n   * @param err\n   */\n  muteAllParticipantsAsync(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      // check the user's permissions\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to mute a participant in the meeting\n   * @param userId\n   * @param cb\n   * @param err\n   */\n  muteParticipantAsync(userId, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      // check the connection is open (host + participant can perform the mute command)\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      }\n      // if not host, check the participant is not muting another participant\n      if (!this.me.isHost && this.me.id !== userId) {\n        this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n      }\n      // check the user exists\n      const exists = this.privParticipants.getParticipantIndex(userId);\n      if (exists === -1) {\n        this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to remove a participant from the conversation\n   * @param userId\n   * @param cb\n   * @param err\n   */\n  removeParticipantAsync(userId, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\n        // Assume this is a transcription participant\n        marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId), cb, err);\n      } else {\n        Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n        Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n        if (!this.canSendAsHost) {\n          this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\n        }\n        let participantId = \"\";\n        if (typeof userId === \"string\") {\n          participantId = userId;\n        } else if (userId.hasOwnProperty(\"id\")) {\n          const participant = userId;\n          participantId = participant.id;\n        } else if (userId.hasOwnProperty(\"userId\")) {\n          const user = userId;\n          participantId = user.userId;\n        }\n        Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n        // check the participant exists\n        const index = this.participants.findIndex(p => p.id === participantId);\n        if (index === -1) {\n          this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n        }\n        if (!!this.privConversationRecognizer) {\n          this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), () => {\n            this.handleCallback(cb, err);\n          }, error => {\n            this.handleError(error, err);\n          });\n        }\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to unlock the meeting\n   * @param cb\n   * @param err\n   */\n  unlockMeetingAsync(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getLockCommand(false), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to unmute all participants in the meeting\n   * @param cb\n   * @param err\n   */\n  unmuteAllParticipantsAsync(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to unmute a participant in the meeting\n   * @param userId\n   * @param cb\n   * @param err\n   */\n  unmuteParticipantAsync(userId, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      // check the connection is open (host + participant can perform the mute command)\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      }\n      // if not host, check the participant is not muting another participant\n      if (!this.me.isHost && this.me.id !== userId) {\n        this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n      }\n      // check the user exists\n      const exists = this.privParticipants.getParticipantIndex(userId);\n      if (exists === -1) {\n        this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Send a text message\n   * @param message\n   * @param cb\n   * @param err\n   */\n  sendTextMessageAsync(message, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      }\n      // TODO: is a max length check required?\n      if (message.length > this.privTextMessageMaxLength) {\n        this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Set translated to languages\n   * @param {string[]} languages - languages to translate to\n   * @param cb\n   * @param err\n   */\n  setTranslatedLanguagesAsync(languages, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Change nickname\n   * @param {string} nickname - new nickname for the room\n   * @param cb\n   * @param err\n   */\n  changeNicknameAsync(nickname, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      }\n      if (!!this.privConversationRecognizer) {\n        this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n    this.privIsDisposed = true;\n    if (!!this.config) {\n      this.config.close();\n    }\n    this.privConfig = undefined;\n    this.privLanguage = undefined;\n    this.privProperties = undefined;\n    this.privRoom = undefined;\n    this.privToken = undefined;\n    this.privManager = undefined;\n    this.privIsConnected = false;\n    this.privIsReady = false;\n    this.privParticipants = undefined;\n  }\n  connectTranscriberRecognizer(recognizer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privTranscriberRecognizer) {\n        yield this.privTranscriberRecognizer.close();\n      }\n      yield recognizer.enforceAudioGating();\n      this.privTranscriberRecognizer = recognizer;\n      this.privTranscriberRecognizer.meeting = this;\n    });\n  }\n  getKeepAlive() {\n    const nickname = !!this.me ? this.me.displayName : \"default_nickname\";\n    return JSON.stringify({\n      id: \"0\",\n      nickname,\n      participantId: this.privRoom.participantId,\n      roomId: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.keepAlive\n    });\n  }\n  /* eslint-enable @typescript-eslint/typedef */\n  addParticipantImplAsync(participant) {\n    const newParticipant = this.privParticipants.addOrUpdateParticipant(participant);\n    if (newParticipant !== undefined) {\n      if (!!this.privTranscriberRecognizer) {\n        const meetingInfo = this.meetingInfo;\n        meetingInfo.participants = [participant];\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\n      }\n    }\n  }\n  removeParticipantImplAsync(participant) {\n    this.privParticipants.deleteParticipant(participant.id);\n    const meetingInfo = this.meetingInfo;\n    meetingInfo.participants = [participant];\n    return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\n  }\n  close(dispose) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.privIsConnected = false;\n        yield (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.close();\n        this.privConversationRecognizer = undefined;\n        if (!!this.privConversationTranslator) {\n          this.privConversationTranslator.dispose();\n        }\n      } catch (e) {\n        // ignore error\n        throw e;\n      }\n      if (dispose) {\n        this.dispose();\n      }\n    });\n  }\n  /** Helpers */\n  handleCallback(cb, err) {\n    if (!!cb) {\n      try {\n        cb();\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n      cb = undefined;\n    }\n  }\n  handleError(error, err) {\n    if (!!err) {\n      if (error instanceof Error) {\n        const typedError = error;\n        err(typedError.name + \": \" + typedError.message);\n      } else {\n        err(error);\n      }\n    }\n  }\n  /** Participant Helpers */\n  toParticipants(includeHost) {\n    const participants = this.privParticipants.participants.map(p => this.toParticipant(p));\n    if (!includeHost) {\n      return participants.filter(p => p.isHost === false);\n    } else {\n      return participants;\n    }\n  }\n  toParticipant(p) {\n    return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\n  }\n  getMuteAllCommand(isMuted) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.setMuteAll,\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: isMuted\n    });\n  }\n  getMuteCommand(participantId, isMuted) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.setMute,\n      // eslint-disable-next-line object-shorthand\n      participantId: participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: isMuted\n    });\n  }\n  getLockCommand(isLocked) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.setLockState,\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: isLocked\n    });\n  }\n  getEjectCommand(participantId) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\n    Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.ejectParticipant,\n      // eslint-disable-next-line object-shorthand\n      participantId: participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand\n    });\n  }\n  getSetTranslateToLanguagesCommand(languages) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: languages\n    });\n  }\n  getChangeNicknameCommand(nickname) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\n    Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.changeNickname,\n      nickname,\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: nickname\n    });\n  }\n  getMessageCommand(message) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    Contracts.throwIfNullOrWhitespace(message, \"message\");\n    return JSON.stringify({\n      participantId: this.privRoom.participantId,\n      roomId: this.privRoom.roomId,\n      text: message,\n      type: ConversationTranslatorMessageTypes.instantMessage\n    });\n  }\n}","map":{"version":3,"names":["ConversationConnectionConfig","ConversationManager","ConversationTranslatorCommandTypes","ConversationTranslatorMessageTypes","InternalParticipants","marshalPromiseToCallbacks","Contracts","ConversationParticipantsChangedEventArgs","ConversationTranslationEventArgs","Participant","ParticipantChangedReason","PropertyCollection","PropertyId","Meeting","constructor","createMeetingAsync","speechConfig","meetingId","arg3","arg4","throwIfNullOrUndefined","restErrors","invalidArgs","replace","region","throwIfNull","length","Error","subscriptionKey","getProperty","SpeechServiceAuthorization_Token","meetingImpl","MeetingImpl","__awaiter","id","privErrors","onConnected","e","privIsConnected","_a","privConversationTranslator","sessionStarted","onDisconnected","sessionStopped","close","onCanceled","r","canceled","onParticipantUpdateCommandReceived","updatedParticipant","privParticipants","getParticipant","undefined","key","changeNickname","displayName","value","setUseTTS","isUsingTts","setProfanityFiltering","profanity","setMute","isMuted","setTranslateToLanguages","translateToLanguages","addOrUpdateParticipant","participantsChanged","Updated","toParticipant","sessionId","onLockRoomCommandReceived","onMuteAllCommandReceived","participants","forEach","p","isHost","toParticipants","onParticipantJoinCommandReceived","newParticipant","participant","JoinedConversation","onParticipantLeaveCommandReceived","ejectedParticipant","deleteParticipant","LeftConversation","onTranslationReceived","command","final","transcribed","payload","partial","transcribing","instantMessage","textMessageReceived","onParticipantsListReceived","sessionToken","privRoom","token","me","privIsReady","nickname","properties","ConversationTranslator_Name","changeNicknameAsync","onConversationExpiration","conversationExpiration","privIsDisposed","privConversationId","privProperties","privManager","language","SpeechServiceConnection_RecoLanguage","setProperty","defaultLanguageCode","privLanguage","privConfig","configImpl","clone","privTextMessageMaxLength","room","connection","privConversationRecognizer","config","roomId","speechRecognitionLanguage","isMutedByHost","_b","isConnected","host","transcriberRecognizer","privTranscriberRecognizer","meetingInfo","convId","map","part","preferredLanguage","voice","props","transcriptionEventKeys","val","info","meetingProperties","canSend","canSendAsHost","authorizationToken","privToken","throwIfNullOrWhitespace","cb","err","handleError","permissionDeniedStart","createOrJoin","permissionDeniedConnect","handleCallback","error","startMeetingAsync","meId","participantId","connected","disconnected","participantUpdateCommandReceived","lockRoomCommandReceived","muteAllCommandReceived","participantJoinCommandReceived","participantLeaveCommandReceived","translationReceived","participantsListReceived","connect","addParticipantAsync","addParticipantImplAsync","joinMeetingAsync","lang","cognitiveSpeechAuthToken","deleteMeetingAsync","deleteMeetingImplAsync","leave","dispose","endMeetingAsync","endMeetingImplAsync","lockMeetingAsync","throwIfDisposed","isDisposed","permissionDeniedSend","permissionDeniedConversation","sendRequest","getLockCommand","muteAllParticipantsAsync","getMuteAllCommand","muteParticipantAsync","userId","permissionDeniedParticipant","exists","getParticipantIndex","invalidParticipantRequest","getMuteCommand","removeParticipantAsync","hasOwnProperty","removeParticipantImplAsync","user","index","findIndex","getEjectCommand","unlockMeetingAsync","unmuteAllParticipantsAsync","unmuteParticipantAsync","sendTextMessageAsync","message","getMessageCommand","setTranslatedLanguagesAsync","languages","throwIfArrayEmptyOrWhitespace","getSetTranslateToLanguagesCommand","getChangeNicknameCommand","connectTranscriberRecognizer","recognizer","enforceAudioGating","meeting","getKeepAlive","JSON","stringify","type","keepAlive","pushMeetingEvent","typedError","name","includeHost","filter","avatar","setMuteAll","roomid","participantCommand","isLocked","setLockState","ejectParticipant","text"],"sources":["src/sdk/Transcription/Meeting.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}