{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { CancellationErrorCode, CancellationReason, ResultReason } from \"../sdk/Exports.js\";\nimport { RecognitionStatus } from \"./Exports.js\";\nexport class EnumTranslation {\n  static implTranslateRecognitionResult(recognitionStatus) {\n    let reason = ResultReason.Canceled;\n    switch (recognitionStatus) {\n      case RecognitionStatus.Success:\n        reason = ResultReason.RecognizedSpeech;\n        break;\n      case RecognitionStatus.NoMatch:\n      case RecognitionStatus.InitialSilenceTimeout:\n      case RecognitionStatus.BabbleTimeout:\n      case RecognitionStatus.EndOfDictation:\n        reason = ResultReason.NoMatch;\n        break;\n      case RecognitionStatus.Error:\n      case RecognitionStatus.BadRequest:\n      case RecognitionStatus.Forbidden:\n      default:\n        reason = ResultReason.Canceled;\n        break;\n    }\n    return reason;\n  }\n  static implTranslateCancelResult(recognitionStatus) {\n    let reason = CancellationReason.EndOfStream;\n    switch (recognitionStatus) {\n      case RecognitionStatus.Success:\n      case RecognitionStatus.EndOfDictation:\n      case RecognitionStatus.NoMatch:\n        reason = CancellationReason.EndOfStream;\n        break;\n      case RecognitionStatus.InitialSilenceTimeout:\n      case RecognitionStatus.BabbleTimeout:\n      case RecognitionStatus.Error:\n      case RecognitionStatus.BadRequest:\n      case RecognitionStatus.Forbidden:\n      default:\n        reason = CancellationReason.Error;\n        break;\n    }\n    return reason;\n  }\n  static implTranslateCancelErrorCode(recognitionStatus) {\n    let reason = CancellationErrorCode.NoError;\n    switch (recognitionStatus) {\n      case RecognitionStatus.Error:\n        reason = CancellationErrorCode.ServiceError;\n        break;\n      case RecognitionStatus.TooManyRequests:\n        reason = CancellationErrorCode.TooManyRequests;\n        break;\n      case RecognitionStatus.BadRequest:\n        reason = CancellationErrorCode.BadRequestParameters;\n        break;\n      case RecognitionStatus.Forbidden:\n        reason = CancellationErrorCode.Forbidden;\n        break;\n      default:\n        reason = CancellationErrorCode.NoError;\n        break;\n    }\n    return reason;\n  }\n  static implTranslateErrorDetails(cancellationErrorCode) {\n    let errorDetails = \"The speech service encountered an internal error and could not continue.\";\n    switch (cancellationErrorCode) {\n      case CancellationErrorCode.Forbidden:\n        errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\n        break;\n      case CancellationErrorCode.BadRequestParameters:\n        errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\n        break;\n      case CancellationErrorCode.TooManyRequests:\n        errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\n        break;\n      default:\n        break;\n    }\n    return errorDetails;\n  }\n}","map":{"version":3,"names":["CancellationErrorCode","CancellationReason","ResultReason","RecognitionStatus","EnumTranslation","implTranslateRecognitionResult","recognitionStatus","reason","Canceled","Success","RecognizedSpeech","NoMatch","InitialSilenceTimeout","BabbleTimeout","EndOfDictation","Error","BadRequest","Forbidden","implTranslateCancelResult","EndOfStream","implTranslateCancelErrorCode","NoError","ServiceError","TooManyRequests","BadRequestParameters","implTranslateErrorDetails","cancellationErrorCode","errorDetails"],"sources":["src/common.speech/EnumTranslation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports.js\";\r\nimport { RecognitionStatus } from \"./Exports.js\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SACIA,qBAAqB,EACrBC,kBAAkB,EAClBC,YAAY,QACT,mBAAmB;AAC1B,SAASC,iBAAiB,QAAQ,cAAc;AAEhD,OAAM,MAAOC,eAAe;EACjB,OAAOC,8BAA8BA,CAACC,iBAAoC;IAC7E,IAAIC,MAAM,GAAGL,YAAY,CAACM,QAAQ;IAClC,QAAQF,iBAAiB;MACrB,KAAKH,iBAAiB,CAACM,OAAO;QAC1BF,MAAM,GAAGL,YAAY,CAACQ,gBAAgB;QACtC;MACJ,KAAKP,iBAAiB,CAACQ,OAAO;MAC9B,KAAKR,iBAAiB,CAACS,qBAAqB;MAC5C,KAAKT,iBAAiB,CAACU,aAAa;MACpC,KAAKV,iBAAiB,CAACW,cAAc;QACjCP,MAAM,GAAGL,YAAY,CAACS,OAAO;QAC7B;MACJ,KAAKR,iBAAiB,CAACY,KAAK;MAC5B,KAAKZ,iBAAiB,CAACa,UAAU;MACjC,KAAKb,iBAAiB,CAACc,SAAS;MAChC;QACIV,MAAM,GAAGL,YAAY,CAACM,QAAQ;QAC9B;;IAER,OAAOD,MAAM;EACjB;EAEO,OAAOW,yBAAyBA,CAACZ,iBAAoC;IACxE,IAAIC,MAAM,GAAGN,kBAAkB,CAACkB,WAAW;IAC3C,QAAQb,iBAAiB;MACrB,KAAKH,iBAAiB,CAACM,OAAO;MAC9B,KAAKN,iBAAiB,CAACW,cAAc;MACrC,KAAKX,iBAAiB,CAACQ,OAAO;QAC1BJ,MAAM,GAAGN,kBAAkB,CAACkB,WAAW;QACvC;MACJ,KAAKhB,iBAAiB,CAACS,qBAAqB;MAC5C,KAAKT,iBAAiB,CAACU,aAAa;MACpC,KAAKV,iBAAiB,CAACY,KAAK;MAC5B,KAAKZ,iBAAiB,CAACa,UAAU;MACjC,KAAKb,iBAAiB,CAACc,SAAS;MAChC;QACIV,MAAM,GAAGN,kBAAkB,CAACc,KAAK;QACjC;;IAER,OAAOR,MAAM;EACjB;EAEO,OAAOa,4BAA4BA,CAACd,iBAAoC;IAC3E,IAAIC,MAAM,GAA0BP,qBAAqB,CAACqB,OAAO;IACjE,QAAQf,iBAAiB;MACrB,KAAKH,iBAAiB,CAACY,KAAK;QACxBR,MAAM,GAAGP,qBAAqB,CAACsB,YAAY;QAC3C;MACJ,KAAKnB,iBAAiB,CAACoB,eAAe;QAClChB,MAAM,GAAGP,qBAAqB,CAACuB,eAAe;QAC9C;MACJ,KAAKpB,iBAAiB,CAACa,UAAU;QAC7BT,MAAM,GAAGP,qBAAqB,CAACwB,oBAAoB;QACnD;MACJ,KAAKrB,iBAAiB,CAACc,SAAS;QAC5BV,MAAM,GAAGP,qBAAqB,CAACiB,SAAS;QACxC;MACJ;QACIV,MAAM,GAAGP,qBAAqB,CAACqB,OAAO;QACtC;;IAGR,OAAOd,MAAM;EAEjB;EAEO,OAAOkB,yBAAyBA,CAACC,qBAA4C;IAChF,IAAIC,YAAY,GAAW,0EAA0E;IACrG,QAAQD,qBAAqB;MACzB,KAAK1B,qBAAqB,CAACiB,SAAS;QAChCU,YAAY,GAAG,oEAAoE;QACnF;MACJ,KAAK3B,qBAAqB,CAACwB,oBAAoB;QAC3CG,YAAY,GAAG,+DAA+D;QAC9E;MACJ,KAAK3B,qBAAqB,CAACuB,eAAe;QACtCI,YAAY,GAAG,2FAA2F;QAC1G;MACJ;QACI;;IAER,OAAOA,YAAY;EACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}