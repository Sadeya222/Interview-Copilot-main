{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { OutputFormatPropertyName, RecognitionMode, RecognizerConfig, SpeechConnectionFactory, SpeechServiceRecognizer } from \"../common.speech/Exports.js\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\nimport { Contracts } from \"./Contracts.js\";\nimport { OutputFormat, PropertyId, Recognizer } from \"./Exports.js\";\n/**\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class SpeechRecognizer\n */\nexport class SpeechRecognizer extends Recognizer {\n  /**\n   * SpeechRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\n    this.privDisposedRecognizer = false;\n  }\n  /**\n   * SpeechRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\n    return recognizer;\n  }\n  /**\n   * Gets the endpoint id of a customized speech model that is used for speech recognition.\n   * @member SpeechRecognizer.prototype.endpointId\n   * @function\n   * @public\n   * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n   */\n  get endpointId() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeechRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member SpeechRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Gets the spoken language of recognition.\n   * @member SpeechRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} The spoken language of recognition.\n   */\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets the output format of recognition.\n   * @member SpeechRecognizer.prototype.outputFormat\n   * @function\n   * @public\n   * @returns {OutputFormat} The output format of recognition.\n   */\n  get outputFormat() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\n      return OutputFormat.Simple;\n    } else {\n      return OutputFormat.Detailed;\n    }\n  }\n  /**\n   * The collection of properties and their values defined for this SpeechRecognizer.\n   * @member SpeechRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts speech recognition, and stops after the first utterance is recognized.\n   * The task returns the recognition text as result.\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n   * so it is suitable only for single shot recognition\n   * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\n   * @member SpeechRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the SpeechRecognitionResult.\n   * @param err - Callback invoked in case of an error.\n   */\n  recognizeOnceAsync(cb, err) {\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\n  }\n  /**\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops continuous speech recognition.\n   * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * Starts speech recognition with keyword spotting, until\n   * stopKeywordRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * Note: Key word spotting functionality is only available on the\n   * Speech Devices SDK. This functionality is currently not included in the SDK itself.\n   * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param {KeywordRecognitionModel} model The keyword recognition model that\n   * specifies the keyword to be recognized.\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startKeywordRecognitionAsync(model, cb, err) {\n    Contracts.throwIfNull(model, \"model\");\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  }\n  /**\n   * Stops continuous speech recognition.\n   * Note: Key word spotting functionality is only available on the\n   * Speech Devices SDK. This functionality is currently not included in the SDK itself.\n   * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopKeywordRecognitionAsync(cb) {\n    if (!!cb) {\n      cb();\n    }\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member SpeechRecognizer.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * Disposes any resources held by the object.\n   * @member SpeechRecognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n        yield this.implRecognizerStop();\n      }\n      yield _super.dispose.call(this, disposing);\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n}","map":{"version":3,"names":["OutputFormatPropertyName","RecognitionMode","RecognizerConfig","SpeechConnectionFactory","SpeechServiceRecognizer","marshalPromiseToCallbacks","Contracts","OutputFormat","PropertyId","Recognizer","SpeechRecognizer","constructor","speechConfig","audioConfig","speechConfigImpl","throwIfNull","throwIfNullOrWhitespace","properties","getProperty","SpeechServiceConnection_RecoLanguage","privDisposedRecognizer","FromConfig","autoDetectSourceLanguageConfig","mergeTo","recognizer","endpointId","throwIfDisposed","SpeechServiceConnection_EndpointId","authorizationToken","SpeechServiceAuthorization_Token","token","setProperty","speechRecognitionLanguage","outputFormat","Simple","Detailed","privProperties","recognizeOnceAsync","cb","err","recognizeOnceAsyncImpl","Interactive","startContinuousRecognitionAsync","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","startKeywordRecognitionAsync","model","stopKeywordRecognitionAsync","close","errorCb","dispose","disposing","implRecognizerStop","_super","call","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","configImpl"],"sources":["src/sdk/SpeechRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}