{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { SpeechSynthesisConnectionFactory, SpeechSynthesisAdapter, SynthesisRestAdapter } from \"../common.speech/Exports.js\";\nimport { createNoDashGuid, marshalPromiseToCallbacks } from \"../common/Exports.js\";\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter.js\";\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\nimport { PushAudioOutputStreamImpl } from \"./Audio/AudioOutputStream.js\";\nimport { Contracts } from \"./Contracts.js\";\nimport { AudioConfig, PropertyId, PullAudioOutputStream, PushAudioOutputStreamCallback, SpeechSynthesisOutputFormat, SynthesisVoicesResult, Synthesizer } from \"./Exports.js\";\nimport { SynthesisRequest } from \"./Synthesizer.js\";\n/**\n * Defines the class SpeechSynthesizer for text to speech.\n * Updated in version 1.16.0\n * @class SpeechSynthesizer\n */\nexport class SpeechSynthesizer extends Synthesizer {\n  /**\n   * SpeechSynthesizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\n   */\n  constructor(speechConfig, audioConfig) {\n    super(speechConfig);\n    if (audioConfig !== null) {\n      if (audioConfig === undefined) {\n        this.audioConfig = typeof window === \"undefined\" ? undefined : AudioConfig.fromDefaultSpeakerOutput();\n      } else {\n        this.audioConfig = audioConfig;\n      }\n    }\n    this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\n    this.implCommonSynthesizeSetup();\n  }\n  /**\n   * SpeechSynthesizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\n   */\n  static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    return new SpeechSynthesizer(speechConfig, audioConfig);\n  }\n  /**\n   * Executes speech synthesis on plain text.\n   * The task returns the synthesis result.\n   * @member SpeechSynthesizer.prototype.speakTextAsync\n   * @function\n   * @public\n   * @param text - Text to be synthesized.\n   * @param cb - Callback that received the SpeechSynthesisResult.\n   * @param err - Callback invoked in case of an error.\n   * @param stream - AudioOutputStream to receive the synthesized audio.\n   */\n  speakTextAsync(text, cb, err, stream) {\n    this.speakImpl(text, false, cb, err, stream);\n  }\n  /**\n   * Executes speech synthesis on SSML.\n   * The task returns the synthesis result.\n   * @member SpeechSynthesizer.prototype.speakSsmlAsync\n   * @function\n   * @public\n   * @param ssml - SSML to be synthesized.\n   * @param cb - Callback that received the SpeechSynthesisResult.\n   * @param err - Callback invoked in case of an error.\n   * @param stream - AudioOutputStream to receive the synthesized audio.\n   */\n  speakSsmlAsync(ssml, cb, err, stream) {\n    this.speakImpl(ssml, true, cb, err, stream);\n  }\n  /**\n   * Get list of synthesis voices available.\n   * The task returns the synthesis voice result.\n   * @member SpeechSynthesizer.prototype.getVoicesAsync\n   * @function\n   * @async\n   * @public\n   * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\n   * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\n   */\n  getVoicesAsync(locale = \"\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.getVoices(locale);\n    });\n  }\n  /**\n   * Dispose of associated resources.\n   * @member SpeechSynthesizer.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposed);\n    marshalPromiseToCallbacks(this.dispose(true), cb, err);\n  }\n  /**\n   * @Internal\n   * Do not use externally, object returned will change without warning or notice.\n   */\n  get internalData() {\n    return this.privAdapter;\n  }\n  //\n  // ################################################################################################################\n  // IMPLEMENTATION.\n  // ################################################################################################################\n  //\n  // Creates the synthesis adapter\n  createSynthesisAdapter(authentication, connectionFactory, synthesizerConfig) {\n    return new SpeechSynthesisAdapter(authentication, connectionFactory, synthesizerConfig, this, this.audioConfig);\n  }\n  createRestSynthesisAdapter(authentication, synthesizerConfig) {\n    return new SynthesisRestAdapter(synthesizerConfig, authentication);\n  }\n  implCommonSynthesizeSetup() {\n    super.implCommonSynthesizeSetup();\n    this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]);\n  }\n  speakImpl(text, IsSsml, cb, err, dataStream) {\n    try {\n      Contracts.throwIfDisposed(this.privDisposed);\n      const requestId = createNoDashGuid();\n      let audioDestination;\n      if (dataStream instanceof PushAudioOutputStreamCallback) {\n        audioDestination = new PushAudioOutputStreamImpl(dataStream);\n      } else if (dataStream instanceof PullAudioOutputStream) {\n        audioDestination = dataStream;\n      } else if (dataStream !== undefined) {\n        audioDestination = new AudioFileWriter(dataStream);\n      } else {\n        audioDestination = undefined;\n      }\n      this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, e => {\n        this.privSynthesizing = false;\n        if (!!cb) {\n          try {\n            cb(e);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n        }\n        cb = undefined;\n        /* eslint-disable no-empty */\n        this.adapterSpeak().catch(() => {});\n      }, e => {\n        if (!!err) {\n          err(e);\n        }\n      }, audioDestination));\n      /* eslint-disable no-empty-function */\n      this.adapterSpeak().catch(() => {});\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n      // Destroy the synthesizer.\n      /* eslint-disable no-empty */\n      this.dispose(true).catch(() => {});\n    }\n  }\n  getVoices(locale) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const requestId = createNoDashGuid();\n      const response = yield this.privRestAdapter.getVoicesList(requestId);\n      if (response.ok && Array.isArray(response.json)) {\n        let json = response.json;\n        if (!!locale && locale.length > 0) {\n          json = json.filter(item => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase());\n        }\n        return new SynthesisVoicesResult(requestId, json, undefined);\n      } else {\n        return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\n      }\n    });\n  }\n}","map":{"version":3,"names":["SpeechSynthesisConnectionFactory","SpeechSynthesisAdapter","SynthesisRestAdapter","createNoDashGuid","marshalPromiseToCallbacks","AudioFileWriter","AudioOutputFormatImpl","PushAudioOutputStreamImpl","Contracts","AudioConfig","PropertyId","PullAudioOutputStream","PushAudioOutputStreamCallback","SpeechSynthesisOutputFormat","SynthesisVoicesResult","Synthesizer","SynthesisRequest","SpeechSynthesizer","constructor","speechConfig","audioConfig","undefined","window","fromDefaultSpeakerOutput","privConnectionFactory","implCommonSynthesizeSetup","FromConfig","autoDetectSourceLanguageConfig","speechConfigImpl","properties","mergeTo","speakTextAsync","text","cb","err","stream","speakImpl","speakSsmlAsync","ssml","getVoicesAsync","locale","getVoices","close","throwIfDisposed","privDisposed","dispose","internalData","privAdapter","createSynthesisAdapter","authentication","connectionFactory","synthesizerConfig","createRestSynthesisAdapter","audioOutputFormat","fromSpeechSynthesisOutputFormat","getProperty","SpeechServiceConnection_SynthOutputFormat","IsSsml","dataStream","requestId","audioDestination","synthesisRequestQueue","enqueue","e","privSynthesizing","adapterSpeak","catch","error","Error","typedError","name","message","response","privRestAdapter","getVoicesList","ok","Array","isArray","json","length","filter","item","Locale","toLowerCase","status","statusText"],"sources":["src/sdk/SpeechSynthesizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SpeechSynthesisAdapter,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    marshalPromiseToCallbacks,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer extends Synthesizer {\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(speechConfig);\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SpeechSynthesisAdapter(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}