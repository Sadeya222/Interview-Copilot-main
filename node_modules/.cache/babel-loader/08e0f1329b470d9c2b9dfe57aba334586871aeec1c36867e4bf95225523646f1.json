{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/** Users participating in the conversation */\nexport class InternalParticipants {\n  constructor(participants = [], meId) {\n    this.participants = participants;\n    this.meId = meId;\n  }\n  /**\n   * Add or update a participant\n   * @param value\n   */\n  addOrUpdateParticipant(value) {\n    if (value === undefined) {\n      return;\n    }\n    const exists = this.getParticipantIndex(value.id);\n    if (exists > -1) {\n      this.participants.splice(exists, 1, value);\n    } else {\n      this.participants.push(value);\n    }\n    // ensure it was added ok\n    return this.getParticipant(value.id);\n  }\n  /**\n   * Find the participant's position in the participants list.\n   * @param id\n   */\n  getParticipantIndex(id) {\n    return this.participants.findIndex(p => p.id === id);\n  }\n  /**\n   * Find the participant by id.\n   * @param id\n   */\n  getParticipant(id) {\n    return this.participants.find(p => p.id === id);\n  }\n  /**\n   * Remove a participant from the participants list.\n   */\n  deleteParticipant(id) {\n    this.participants = this.participants.filter(p => p.id !== id);\n  }\n  /**\n   * Helper to return the conversation host.\n   */\n  get host() {\n    return this.participants.find(p => p.isHost === true);\n  }\n  /**\n   * Helper to return the current user.\n   */\n  get me() {\n    return this.getParticipant(this.meId);\n  }\n}\n/**\n * List of command message types\n */\nexport const ConversationTranslatorMessageTypes = {\n  command: \"command\",\n  final: \"final\",\n  info: \"info\",\n  instantMessage: \"instant_message\",\n  keepAlive: \"keep_alive\",\n  partial: \"partial\",\n  participantCommand: \"participant_command\",\n  translatedMessage: \"translated_message\"\n};\n/**\n * List of command types\n */\nexport const ConversationTranslatorCommandTypes = {\n  changeNickname: \"ChangeNickname\",\n  disconnectSession: \"DisconnectSession\",\n  ejectParticipant: \"EjectParticipant\",\n  instant_message: \"instant_message\",\n  joinSession: \"JoinSession\",\n  leaveSession: \"LeaveSession\",\n  participantList: \"ParticipantList\",\n  roomExpirationWarning: \"RoomExpirationWarning\",\n  setLockState: \"SetLockState\",\n  setMute: \"SetMute\",\n  setMuteAll: \"SetMuteAll\",\n  setProfanityFiltering: \"SetProfanityFiltering\",\n  setTranslateToLanguages: \"SetTranslateToLanguages\",\n  setUseTTS: \"SetUseTTS\"\n};","map":{"version":3,"names":["InternalParticipants","constructor","participants","meId","addOrUpdateParticipant","value","undefined","exists","getParticipantIndex","id","splice","push","getParticipant","findIndex","p","find","deleteParticipant","filter","host","isHost","me","ConversationTranslatorMessageTypes","command","final","info","instantMessage","keepAlive","partial","participantCommand","translatedMessage","ConversationTranslatorCommandTypes","changeNickname","disconnectSession","ejectParticipant","instant_message","joinSession","leaveSession","participantList","roomExpirationWarning","setLockState","setMute","setMuteAll","setProfanityFiltering","setTranslateToLanguages","setUseTTS"],"sources":["src/common.speech/Transcription/ConversationTranslatorInterfaces.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports.js\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n"],"mappings":";AAAA;AACA;AAqEA;AACA,OAAM,MAAOA,oBAAoB;EAE7BC,YAA0BC,YAAA,GAAuC,EAAE,EAASC,IAAa;IAA/D,KAAAD,YAAY,GAAZA,YAAY;IAAsC,KAAAC,IAAI,GAAJA,IAAI;EAEhF;EAEA;;;;EAIOC,sBAAsBA,CAACC,KAA2B;IACrD,IAAIA,KAAK,KAAKC,SAAS,EAAE;MACrB;;IAGJ,MAAMC,MAAM,GAAW,IAAI,CAACC,mBAAmB,CAACH,KAAK,CAACI,EAAE,CAAC;IACzD,IAAIF,MAAM,GAAG,CAAC,CAAC,EAAE;MACb,IAAI,CAACL,YAAY,CAACQ,MAAM,CAACH,MAAM,EAAE,CAAC,EAAEF,KAAK,CAAC;KAC7C,MAAM;MACH,IAAI,CAACH,YAAY,CAACS,IAAI,CAACN,KAAK,CAAC;;IAGjC;IACA,OAAO,IAAI,CAACO,cAAc,CAACP,KAAK,CAACI,EAAE,CAAC;EACxC;EAEA;;;;EAIOD,mBAAmBA,CAACC,EAAU;IACjC,OAAO,IAAI,CAACP,YAAY,CAACW,SAAS,CAAEC,CAAuB,IAAcA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC;EACzF;EAEA;;;;EAIOG,cAAcA,CAACH,EAAU;IAC5B,OAAO,IAAI,CAACP,YAAY,CAACa,IAAI,CAAED,CAAuB,IAAcA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC;EACpF;EAEA;;;EAGOO,iBAAiBA,CAACP,EAAU;IAC/B,IAAI,CAACP,YAAY,GAAG,IAAI,CAACA,YAAY,CAACe,MAAM,CAAEH,CAAuB,IAAcA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC;EACnG;EAEA;;;EAGA,IAAWS,IAAIA,CAAA;IACX,OAAO,IAAI,CAAChB,YAAY,CAACa,IAAI,CAAED,CAAuB,IAAcA,CAAC,CAACK,MAAM,KAAK,IAAI,CAAE;EAC3F;EAEA;;;EAGA,IAAWC,EAAEA,CAAA;IACT,OAAO,IAAI,CAACR,cAAc,CAAC,IAAI,CAACT,IAAI,CAAC;EACzC;;AAqHJ;;;AAGA,OAAO,MAAMkB,kCAAkC,GAAG;EAC9CC,OAAO,EAAE,SAAS;EAClBC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,MAAM;EACZC,cAAc,EAAE,iBAAiB;EACjCC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,SAAS;EAClBC,kBAAkB,EAAE,qBAAqB;EACzCC,iBAAiB,EAAE;CACtB;AAED;;;AAGA,OAAO,MAAMC,kCAAkC,GAAG;EAC9CC,cAAc,EAAE,gBAAgB;EAChCC,iBAAiB,EAAE,mBAAmB;EACtCC,gBAAgB,EAAE,kBAAkB;EACpCC,eAAe,EAAE,iBAAiB;EAClCC,WAAW,EAAE,aAAa;EAC1BC,YAAY,EAAE,cAAc;EAC5BC,eAAe,EAAE,iBAAiB;EAClCC,qBAAqB,EAAE,uBAAuB;EAC9CC,YAAY,EAAE,cAAc;EAC5BC,OAAO,EAAE,SAAS;EAClBC,UAAU,EAAE,YAAY;EACxBC,qBAAqB,EAAE,uBAAuB;EAC9CC,uBAAuB,EAAE,yBAAyB;EAClDC,SAAS,EAAE;CACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}