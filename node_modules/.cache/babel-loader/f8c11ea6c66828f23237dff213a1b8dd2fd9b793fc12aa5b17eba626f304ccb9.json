{"ast":null,"code":"import Assert from \"assert-js\";\nimport LoadingIcon from \"@/components/LoadingIcon.vue\";\nimport MyTimer from \"@/components/MyTimer.vue\";\nimport * as SpeechSDK from \"microsoft-cognitiveservices-speech-sdk\";\nimport OpenAI from \"openai\";\nimport config_util from \"../utils/config_util\";\nexport default {\n  name: 'HomeView',\n  props: {},\n  computed: {\n    isDevMode() {\n      return process.env.NODE_ENV === 'development';\n    },\n    isGetGPTAnswerAvailable() {\n      // return this.state === \"ing\" && !!this.currentText\n      return !!this.currentText;\n    }\n  },\n  components: {\n    LoadingIcon,\n    MyTimer\n  },\n  data() {\n    return {\n      currentText: \"\",\n      state: \"end\",\n      //end\\ing\n      ai_result: null,\n      copilot_starting: false,\n      //显示loading\n      copilot_stopping: false,\n      show_ai_thinking_effect: false,\n      popStyle: {}\n    };\n  },\n  async mounted() {\n    console.log(\"mounted\");\n    if (this.isDevMode) {\n      // this.currentText = demo_text\n    }\n  },\n  beforeDestroy() {},\n  methods: {\n    async askCurrentText() {\n      const apiKey = localStorage.getItem(\"openai_key\");\n      let content = this.currentText;\n      this.ai_result = \"\";\n      this.show_ai_thinking_effect = true;\n      const model = config_util.gpt_model();\n      const gpt_system_prompt = config_util.gpt_system_prompt();\n      content = gpt_system_prompt + \"\\n\" + content;\n      try {\n        if (!apiKey) {\n          throw new Error(\"You should setup an Open AI Key!\");\n        }\n        const openai = new OpenAI({\n          apiKey: apiKey,\n          dangerouslyAllowBrowser: true\n        });\n        const stream = await openai.chat.completions.create({\n          model: model,\n          messages: [{\n            role: \"user\",\n            content: content\n          }],\n          stream: true\n        });\n        this.show_ai_thinking_effect = false;\n        for await (const chunk of stream) {\n          const text = chunk.choices[0]?.delta?.content || \"\";\n          this.ai_result += text;\n        }\n      } catch (e) {\n        this.show_ai_thinking_effect = false;\n        this.ai_result = \"\" + e;\n      }\n    },\n    clearASRContent() {\n      this.currentText = \"\";\n    },\n    async startCopilot() {\n      this.copilot_starting = true;\n      const token = localStorage.getItem(\"azure_token\");\n      const region = config_util.azure_region();\n      const language = config_util.azure_language();\n      const openai_key = localStorage.getItem(\"openai_key\");\n      console.log({\n        region,\n        language\n      });\n      try {\n        if (!openai_key) {\n          throw new Error(\"You should setup Open AI API Token\");\n        }\n        if (!token) {\n          throw new Error(\"You should setup Azure token\");\n        }\n        if (!region) {\n          throw new Error(\"You should setup Azure region\");\n        }\n        const speechConfig = SpeechSDK.SpeechConfig.fromSubscription(token, region);\n        speechConfig.speechRecognitionLanguage = language;\n        const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n        this.recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);\n      } catch (e) {\n        this.currentText = e;\n        this.copilot_starting = false;\n        return;\n      }\n      const recognizer = this.recognizer;\n      const sdk = SpeechSDK;\n      recognizer.recognized = (sender, event) => {\n        if (sdk.ResultReason.RecognizedSpeech === event.result.reason && event.result.text.length > 0) {\n          const text = event.result.text;\n          this.currentText = this.currentText + \"\\n\" + text;\n        } else if (sdk.ResultReason.NoMatch === event.result.reason) {\n          console.log(\"Speech could not be recognized\");\n        }\n      };\n      recognizer.startContinuousRecognitionAsync(() => {\n        this.copilot_starting = false;\n        this.state = \"ing\";\n        this.$refs.MyTimer.start();\n        window.console.log(\"recognition started\");\n      }, err => {\n        this.copilot_starting = false;\n        this.currentText = \"Start Failed:\" + err;\n        window.console.error(\"recogniton start failed\", err);\n      });\n    },\n    userStopCopilot() {\n      this.copilot_stopping = true;\n      this.recognizer.stopContinuousRecognitionAsync(() => {\n        console.log(\"stoped\");\n        this.copilot_stopping = false;\n        this.state = \"end\";\n        this.$refs.MyTimer.stop();\n      }, err => {\n        console.log(\"err:\", err);\n      });\n    }\n  }\n};\nconst demo_text = `\nHello, thank you for coming for the interview. Please introduce yourself.\n\nI'm Jhon, currently an undergraduate student majoring in Data Science at HK University. I am in the top 10% of my class, specializing in deep learning and proficient in web development. Additionally, I have contributed to several well-known open-source projects as mentioned in my resume.\n\nAlright, let me ask you a machine learning question.\n\nSure, go ahead.\n\nCan you explain the Hidden Markov Model?\n`;\nasync function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","map":{"version":3,"names":["Assert","LoadingIcon","MyTimer","SpeechSDK","OpenAI","config_util","name","props","computed","isDevMode","process","env","NODE_ENV","isGetGPTAnswerAvailable","currentText","components","data","state","ai_result","copilot_starting","copilot_stopping","show_ai_thinking_effect","popStyle","mounted","console","log","beforeDestroy","methods","askCurrentText","apiKey","localStorage","getItem","content","model","gpt_model","gpt_system_prompt","Error","openai","dangerouslyAllowBrowser","stream","chat","completions","create","messages","role","chunk","text","choices","delta","e","clearASRContent","startCopilot","token","region","azure_region","language","azure_language","openai_key","speechConfig","SpeechConfig","fromSubscription","speechRecognitionLanguage","audioConfig","AudioConfig","fromDefaultMicrophoneInput","recognizer","SpeechRecognizer","sdk","recognized","sender","event","ResultReason","RecognizedSpeech","result","reason","length","NoMatch","startContinuousRecognitionAsync","$refs","start","window","err","error","userStopCopilot","stopContinuousRecognitionAsync","stop","demo_text","sleep","ms","Promise","resolve","setTimeout"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"homeview_container\">\n    <div class=\"center_container\">\n      <div class=\"box\">\n        <div class=\"func_desc\">\n          <i class=\"el-icon-microphone\"></i>\n          Speech Recognition Results\n        </div>\n        <div v-if=\"!currentText\" style=\"color: gray\">No Content</div>\n        <div class=\"asr_content\">{{ currentText }}</div>\n        <div class=\"single_part_bottom_bar\">\n          <el-button icon=\"el-icon-delete\" :disabled=\"!currentText\" @click=\"clearASRContent\">\n            Clear Text\n          </el-button>\n        </div>\n      </div>\n      <div class=\"box\" style=\"border-left: none;\">\n        <div class=\"func_desc\">\n          <i class=\"el-icon-s-custom\"></i>\n          GPT Answer\n        </div>\n        <LoadingIcon v-show=\"show_ai_thinking_effect\"/>\n        <div class=\"ai_result_content\">{{ ai_result }}</div>\n        <div class=\"single_part_bottom_bar\">\n          <el-button icon=\"el-icon-thumb\" @click=\"askCurrentText\" :disabled=\"!isGetGPTAnswerAvailable\">\n            Ask GPT\n          </el-button>\n        </div>\n      </div>\n    </div>\n    <div class=\"title_function_bar\">\n      <el-button\n          type=\"success\"\n          @click=\"startCopilot\" v-show=\"state==='end'\" :loading=\"copilot_starting\"\n          :disabled=\"copilot_starting\">Start Copilot\n      </el-button>\n      <el-button\n          :loading=\"copilot_stopping\"\n          @click=\"userStopCopilot\" v-show=\"state==='ing'\">Stop Copilot\n      </el-button>\n      <MyTimer ref=\"MyTimer\"/>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport Assert from \"assert-js\"\nimport LoadingIcon from \"@/components/LoadingIcon.vue\";\nimport MyTimer from \"@/components/MyTimer.vue\";\nimport * as SpeechSDK from \"microsoft-cognitiveservices-speech-sdk\";\nimport OpenAI from \"openai\";\nimport config_util from \"../utils/config_util\"\n\nexport default {\n  name: 'HomeView',\n  props: {},\n  computed: {\n    isDevMode() {\n      return (process.env.NODE_ENV === 'development')\n    },\n    isGetGPTAnswerAvailable() {\n      // return this.state === \"ing\" && !!this.currentText\n      return !!this.currentText\n\n    }\n  },\n  components: {LoadingIcon, MyTimer},\n  data() {\n    return {\n      currentText: \"\",\n      state: \"end\", //end\\ing\n      ai_result: null,\n      copilot_starting: false, //显示loading\n      copilot_stopping: false,\n      show_ai_thinking_effect: false,\n      popStyle: {},\n    }\n  },\n  async mounted() {\n    console.log(\"mounted\")\n    if (this.isDevMode) {\n      // this.currentText = demo_text\n    }\n  },\n  beforeDestroy() {\n  },\n  methods: {\n    async askCurrentText() {\n      const apiKey = localStorage.getItem(\"openai_key\")\n      let content = this.currentText\n      this.ai_result = \"\"\n      this.show_ai_thinking_effect = true\n      const model = config_util.gpt_model()\n      const gpt_system_prompt = config_util.gpt_system_prompt()\n      content = gpt_system_prompt + \"\\n\" + content\n\n      try {\n        if (!apiKey) {\n          throw new Error(\"You should setup an Open AI Key!\")\n        }\n\n        const openai = new OpenAI({apiKey: apiKey, dangerouslyAllowBrowser: true})\n        const stream = await openai.chat.completions.create({\n          model: model,\n          messages: [{role: \"user\", content: content}],\n          stream: true,\n        });\n        this.show_ai_thinking_effect = false\n\n        for await (const chunk of stream) {\n          const text = chunk.choices[0]?.delta?.content || \"\"\n          this.ai_result += text\n        }\n      } catch (e) {\n        this.show_ai_thinking_effect = false\n        this.ai_result = \"\" + e\n      }\n    },\n    clearASRContent() {\n      this.currentText = \"\"\n    },\n    async startCopilot() {\n      this.copilot_starting = true\n      const token = localStorage.getItem(\"azure_token\")\n      const region = config_util.azure_region()\n      const language = config_util.azure_language()\n      const openai_key = localStorage.getItem(\"openai_key\")\n      console.log({region, language})\n      try {\n        if (!openai_key) {\n          throw new Error(\"You should setup Open AI API Token\")\n        }\n        if (!token) {\n          throw new Error(\"You should setup Azure token\")\n        }\n        if (!region) {\n          throw new Error(\"You should setup Azure region\")\n        }\n\n        const speechConfig = SpeechSDK.SpeechConfig.fromSubscription(token, region);\n        speechConfig.speechRecognitionLanguage = language;\n        const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n        this.recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);\n      } catch (e) {\n        this.currentText = e\n        this.copilot_starting = false\n        return\n      }\n\n      const recognizer = this.recognizer\n      const sdk = SpeechSDK\n\n\n      recognizer.recognized = (sender, event) => {\n        if (sdk.ResultReason.RecognizedSpeech === event.result.reason && event.result.text.length > 0) {\n          const text = event.result.text\n          this.currentText = this.currentText + \"\\n\" + text\n        } else if (sdk.ResultReason.NoMatch === event.result.reason) {\n          console.log(\"Speech could not be recognized\")\n        }\n      };\n\n      recognizer.startContinuousRecognitionAsync(\n          () => {\n            this.copilot_starting = false\n            this.state = \"ing\"\n            this.$refs.MyTimer.start()\n            window.console.log(\"recognition started\");\n          },\n          (err) => {\n            this.copilot_starting = false\n            this.currentText = \"Start Failed:\" + err\n            window.console.error(\"recogniton start failed\", err);\n          })\n    },\n    userStopCopilot() {\n      this.copilot_stopping = true\n      this.recognizer.stopContinuousRecognitionAsync(() => {\n        console.log(\"stoped\")\n        this.copilot_stopping = false\n        this.state = \"end\"\n        this.$refs.MyTimer.stop()\n      }, (err) => {\n        console.log(\"err:\", err)\n      })\n    }\n  }\n}\n\n\nconst demo_text = `\nHello, thank you for coming for the interview. Please introduce yourself.\n\nI'm Jhon, currently an undergraduate student majoring in Data Science at HK University. I am in the top 10% of my class, specializing in deep learning and proficient in web development. Additionally, I have contributed to several well-known open-source projects as mentioned in my resume.\n\nAlright, let me ask you a machine learning question.\n\nSure, go ahead.\n\nCan you explain the Hidden Markov Model?\n`\n\nasync function sleep(ms) {\n  return new Promise((resolve => setTimeout(resolve, ms)))\n}\n\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n.homeview_container {\n  display: flex;\n  flex-direction: column;\n}\n\n.title_function_bar {\n  margin-top: 10px;\n  text-align: center;\n  margin-bottom: 10px;\n}\n\n.center_container {\n  flex-grow: 1;\n  display: flex;\n  height: calc(100vh - 150px);\n}\n\n.box {\n  flex: 1; /* 设置flex属性为1，使两个div平分父容器的宽度 */\n  border: 1px lightgray solid; /* 为了演示，添加边框样式 */\n  padding: 10px; /* 为了演示，添加内边距 */\n  white-space: pre-wrap;\n  display: flex;\n  flex-direction: column;\n}\n\n.asr_content {\n  overflow-y: auto;\n  flex-grow: 1;\n}\n\n\n.func_desc {\n  text-align: center;\n}\n\n.single_part_bottom_bar {\n  display: flex;\n}\n\n.single_part_bottom_bar > .el-button {\n  flex-grow: 1;\n}\n\n\n.ai_result_content {\n  overflow-y: auto;\n  flex-grow: 1;\n}\n\n.popup-tag {\n  position: absolute;\n  display: none;\n  background-color: #785448d4;\n  color: white;\n  padding: 5px;\n  font-size: 15px;\n  font-weight: bold;\n  text-decoration: underline;\n  cursor: pointer;\n  -webkit-filter: drop-shadow(0 1px 10px rgba(113, 158, 206, 0.8));\n}\n\n.error_msg {\n  color: red;\n  text-align: center;\n}\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}