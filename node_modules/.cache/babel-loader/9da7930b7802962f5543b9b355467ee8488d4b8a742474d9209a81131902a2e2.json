{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, EventSource, MessageType, ServiceEvent, Timeout } from \"../common/Exports.js\";\nimport { CancellationErrorCode, CancellationReason, PropertyId, RecognitionEventArgs, SessionEventArgs, OutputFormat } from \"../sdk/Exports.js\";\nimport { AgentConfig, DynamicGrammarBuilder, RecognitionMode, RequestSession, SpeechContext, SpeechDetected, type, OutputFormatPropertyName } from \"./Exports.js\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\nexport class ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n    // A promise for a configured connection.\n    // Do not consume directly, call fetchConnection instead.\n    this.privConnectionConfigurationPromise = undefined;\n    // A promise for a connection, but one that has not had the speech context sent yet.\n    // Do not consume directly, call fetchConnection instead.\n    this.privConnectionPromise = undefined;\n    this.privSetTimeout = setTimeout;\n    this.privIsLiveAudio = false;\n    this.privAverageBytesPerMs = 0;\n    this.privEnableSpeakerId = false;\n    this.recognizeOverride = undefined;\n    this.recognizeSpeaker = undefined;\n    this.disconnectOverride = undefined;\n    this.receiveMessageOverride = undefined;\n    this.sendPrePayloadJSONOverride = undefined;\n    this.postConnectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n    this.handleSpeechPhraseMessage = undefined;\n    this.handleSpeechHypothesisMessage = undefined;\n    if (!authentication) {\n      throw new ArgumentNullError(\"authentication\");\n    }\n    if (!connectionFactory) {\n      throw new ArgumentNullError(\"connectionFactory\");\n    }\n    if (!audioSource) {\n      throw new ArgumentNullError(\"audioSource\");\n    }\n    if (!recognizerConfig) {\n      throw new ArgumentNullError(\"recognizerConfig\");\n    }\n    this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\n    this.privMustReportEndOfStream = false;\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privAudioSource = audioSource;\n    this.privRecognizerConfig = recognizerConfig;\n    this.privIsDisposed = false;\n    this.privRecognizer = recognizer;\n    this.privRequestSession = new RequestSession(this.privAudioSource.id());\n    this.privConnectionEvents = new EventSource();\n    this.privServiceEvents = new EventSource();\n    this.privDynamicGrammar = new DynamicGrammarBuilder();\n    this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\n    this.privAgentConfig = new AgentConfig();\n    const webWorkerLoadType = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\n    if (webWorkerLoadType === \"on\" && typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\") {\n      this.privSetTimeout = Timeout.setTimeout;\n    } else {\n      if (typeof window !== \"undefined\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.privSetTimeout = window.setTimeout.bind(window);\n      }\n    }\n    this.connectionEvents.attach(connectionEvent => {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        const connectionClosedEvent = connectionEvent;\n        if (connectionClosedEvent.statusCode === 1003 || connectionClosedEvent.statusCode === 1007 || connectionClosedEvent.statusCode === 1002 || connectionClosedEvent.statusCode === 4000 || this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount) {\n          void this.cancelRecognitionLocal(CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure, `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\n        }\n      }\n    });\n    if (this.privEnableSpeakerId) {\n      this.privDiarizationSessionId = createNoDashGuid();\n    }\n    this.setLanguageIdJson();\n    this.setOutputDetailLevelJson();\n  }\n  setTranslationJson() {\n    const targetLanguages = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\n    if (targetLanguages !== undefined) {\n      const languages = targetLanguages.split(\",\");\n      const translationVoice = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n      const action = translationVoice !== undefined ? \"Synthesize\" : \"None\";\n      this.privSpeechContext.setSection(\"translation\", {\n        onSuccess: {\n          action\n        },\n        output: {\n          interimResults: {\n            mode: \"Always\"\n          }\n        },\n        targetLanguages: languages\n      });\n      if (translationVoice !== undefined) {\n        const languageToVoiceMap = {};\n        for (const lang of languages) {\n          languageToVoiceMap[lang] = translationVoice;\n        }\n        this.privSpeechContext.setSection(\"synthesis\", {\n          defaultVoices: languageToVoiceMap\n        });\n      }\n    }\n  }\n  setSpeechSegmentationTimeoutJson() {\n    const speechSegmentationTimeout = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\n    if (speechSegmentationTimeout !== undefined) {\n      const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" : this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\n      const segmentationSilenceTimeoutMs = parseInt(speechSegmentationTimeout, 10);\n      const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\");\n      phraseDetection.mode = mode;\n      phraseDetection[mode] = {\n        segmentation: {\n          mode: \"Custom\",\n          segmentationSilenceTimeoutMs\n        }\n      };\n      this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\n    }\n  }\n  setLanguageIdJson() {\n    const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\");\n    if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\n      const sourceLanguages = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\n      let speechContextLidMode;\n      if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\n        speechContextLidMode = \"DetectContinuous\";\n      } else {\n        // recognizerConfig.languageIdMode === \"AtStart\"\n        speechContextLidMode = \"DetectAtAudioStart\";\n      }\n      this.privSpeechContext.setSection(\"languageId\", {\n        Priority: \"PrioritizeLatency\",\n        languages: sourceLanguages,\n        mode: speechContextLidMode,\n        onSuccess: {\n          action: \"Recognize\"\n        },\n        onUnknown: {\n          action: \"None\"\n        }\n      });\n      this.privSpeechContext.setSection(\"phraseOutput\", {\n        interimResults: {\n          resultType: \"Auto\"\n        },\n        phraseResults: {\n          resultType: \"Always\"\n        }\n      });\n      const customModels = this.privRecognizerConfig.sourceLanguageModels;\n      if (customModels !== undefined) {\n        phraseDetection.customModels = customModels;\n        phraseDetection.onInterim = {\n          action: \"None\"\n        };\n        phraseDetection.onSuccess = {\n          action: \"None\"\n        };\n      }\n    }\n    const targetLanguages = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\n    if (targetLanguages !== undefined) {\n      phraseDetection.onInterim = {\n        action: \"Translate\"\n      };\n      phraseDetection.onSuccess = {\n        action: \"Translate\"\n      };\n      this.privSpeechContext.setSection(\"phraseOutput\", {\n        interimResults: {\n          resultType: \"None\"\n        },\n        phraseResults: {\n          resultType: \"None\"\n        }\n      });\n    }\n    this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\n  }\n  setOutputDetailLevelJson() {\n    if (this.privEnableSpeakerId) {\n      const requestWordLevelTimestamps = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\n      if (requestWordLevelTimestamps === \"true\") {\n        this.privSpeechContext.setWordLevelTimings();\n      } else {\n        const outputFormat = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n        if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\n          this.privSpeechContext.setDetailedOutputFormat();\n        }\n      }\n    }\n  }\n  get isSpeakerDiarizationEnabled() {\n    return this.privEnableSpeakerId;\n  }\n  get audioSource() {\n    return this.privAudioSource;\n  }\n  get speechContext() {\n    return this.privSpeechContext;\n  }\n  get dynamicGrammar() {\n    return this.privDynamicGrammar;\n  }\n  get agentConfig() {\n    return this.privAgentConfig;\n  }\n  set conversationTranslatorToken(token) {\n    this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\n  }\n  set voiceProfileType(type) {\n    this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\n  }\n  set authentication(auth) {\n    this.privAuthentication = auth;\n  }\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  dispose(reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privIsDisposed = true;\n      if (this.privConnectionConfigurationPromise !== undefined) {\n        try {\n          const connection = yield this.privConnectionConfigurationPromise;\n          yield connection.dispose(reason);\n        } catch (error) {\n          // The connection is in a bad state. But we're trying to kill it, so...\n          return;\n        }\n      }\n    });\n  }\n  get connectionEvents() {\n    return this.privConnectionEvents;\n  }\n  get serviceEvents() {\n    return this.privServiceEvents;\n  }\n  get recognitionMode() {\n    return this.privRecognizerConfig.recognitionMode;\n  }\n  recognize(recoMode, successCallback, errorCallBack) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.recognizeOverride !== undefined) {\n        yield this.recognizeOverride(recoMode, successCallback, errorCallBack);\n        return;\n      }\n      // Clear the existing configuration promise to force a re-transmission of config and context.\n      this.privConnectionConfigurationPromise = undefined;\n      this.privRecognizerConfig.recognitionMode = recoMode;\n      this.setSpeechSegmentationTimeoutJson();\n      this.setTranslationJson();\n      this.privSuccessCallback = successCallback;\n      this.privErrorCallback = errorCallBack;\n      this.privRequestSession.startNewRecognition();\n      this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\n      // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n      const conPromise = this.connectImpl();\n      let audioNode;\n      try {\n        const audioStreamNode = yield this.audioSource.attach(this.privRequestSession.audioNodeId);\n        const format = yield this.audioSource.format;\n        const deviceInfo = yield this.audioSource.deviceInfo;\n        this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\n        audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\n        yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = {\n          source: deviceInfo\n        };\n      } catch (error) {\n        yield this.privRequestSession.onStopRecognizing();\n        throw error;\n      }\n      try {\n        yield conPromise;\n      } catch (error) {\n        yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\n        return;\n      }\n      const sessionStartEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n      if (!!this.privRecognizer.sessionStarted) {\n        this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n      }\n      void this.receiveMessage();\n      const audioSendPromise = this.sendAudio(audioNode);\n      audioSendPromise.catch(error => __awaiter(this, void 0, void 0, function* () {\n        yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n      }));\n      return;\n    });\n  }\n  stopRecognizing() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privRequestSession.isRecognizing) {\n        try {\n          yield this.audioSource.turnOff();\n          yield this.sendFinalAudio();\n          yield this.privRequestSession.onStopRecognizing();\n          yield this.privRequestSession.turnCompletionPromise;\n        } finally {\n          yield this.privRequestSession.dispose();\n        }\n      }\n      return;\n    });\n  }\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.connectImpl();\n      return Promise.resolve();\n    });\n  }\n  connectAsync(cb, err) {\n    this.connectImpl().then(() => {\n      try {\n        if (!!cb) {\n          cb();\n        }\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    }, reason => {\n      try {\n        if (!!err) {\n          err(reason);\n        }\n        /* eslint-disable no-empty */\n      } catch (error) {}\n    });\n  }\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.NoError, \"Disconnecting\");\n      if (this.disconnectOverride !== undefined) {\n        yield this.disconnectOverride();\n      }\n      if (this.privConnectionPromise !== undefined) {\n        try {\n          yield (yield this.privConnectionPromise).dispose();\n        } catch (error) {}\n      }\n      this.privConnectionPromise = undefined;\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  sendMessage(message) {\n    return;\n  }\n  sendNetworkMessage(path, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const type = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n      const contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n      const connection = yield this.fetchConnection();\n      return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\n    });\n  }\n  set activityTemplate(messagePayload) {\n    this.privActivityTemplate = messagePayload;\n  }\n  get activityTemplate() {\n    return this.privActivityTemplate;\n  }\n  sendTelemetryData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const telemetryData = this.privRequestSession.getTelemetry();\n      if (ServiceRecognizerBase.telemetryDataEnabled !== true || this.privIsDisposed || null === telemetryData) {\n        return;\n      }\n      if (!!ServiceRecognizerBase.telemetryData) {\n        try {\n          ServiceRecognizerBase.telemetryData(telemetryData);\n          /* eslint-disable no-empty */\n        } catch (_a) {}\n      }\n      const connection = yield this.fetchConnection();\n      yield connection.send(new SpeechConnectionMessage(MessageType.Text, \"telemetry\", this.privRequestSession.requestId, \"application/json\", telemetryData));\n    });\n  }\n  // Cancels recognition.\n  cancelRecognitionLocal(cancellationReason, errorCode, error) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privRequestSession.isRecognizing) {\n        yield this.privRequestSession.onStopRecognizing();\n        this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error);\n      }\n    });\n  }\n  receiveMessage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.privIsDisposed) {\n          // We're done.\n          return;\n        }\n        let connection = yield this.fetchConnection();\n        const message = yield connection.read();\n        if (this.receiveMessageOverride !== undefined) {\n          return this.receiveMessageOverride();\n        }\n        // indicates we are draining the queue and it came with no message;\n        if (!message) {\n          return this.receiveMessage();\n        }\n        this.privServiceHasSentMessage = true;\n        const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n        if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\n          switch (connectionMessage.path.toLowerCase()) {\n            case \"turn.start\":\n              this.privMustReportEndOfStream = true;\n              this.privRequestSession.onServiceTurnStartResponse();\n              break;\n            case \"speech.startdetected\":\n              const speechStartDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n              const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n              if (!!this.privRecognizer.speechStartDetected) {\n                this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n              }\n              break;\n            case \"speech.enddetected\":\n              let json;\n              if (connectionMessage.textBody.length > 0) {\n                json = connectionMessage.textBody;\n              } else {\n                // If the request was empty, the JSON returned is empty.\n                json = \"{ Offset: 0 }\";\n              }\n              const speechStopDetected = SpeechDetected.fromJSON(json);\n              const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n              if (!!this.privRecognizer.speechEndDetected) {\n                this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n              }\n              break;\n            case \"turn.end\":\n              yield this.sendTelemetryData();\n              if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\n                this.privMustReportEndOfStream = false;\n                yield this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\n              }\n              const sessionStopEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n              yield this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\n              if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\n                if (!!this.privRecognizer.sessionStopped) {\n                  this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                }\n                return;\n              } else {\n                connection = yield this.fetchConnection();\n                yield this.sendPrePayloadJSON(connection);\n              }\n              break;\n            default:\n              if (!(yield this.processTypeSpecificMessages(connectionMessage))) {\n                // here are some messages that the derived class has not processed, dispatch them to connect class\n                if (!!this.privServiceEvents) {\n                  this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                }\n              }\n          }\n        }\n        return this.receiveMessage();\n      } catch (error) {\n        return null;\n      }\n    });\n  }\n  updateSpeakerDiarizationAudioOffset() {\n    const bytesSent = this.privRequestSession.recognitionBytesSent;\n    const audioOffsetMs = bytesSent / this.privAverageBytesPerMs;\n    this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\n  }\n  sendSpeechContext(connection, generateNewRequestId) {\n    if (this.privEnableSpeakerId) {\n      this.updateSpeakerDiarizationAudioOffset();\n    }\n    const speechContextJson = this.speechContext.toJSON();\n    if (generateNewRequestId) {\n      this.privRequestSession.onSpeechContext();\n    }\n    if (speechContextJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.context\", this.privRequestSession.requestId, \"application/json\", speechContextJson));\n    }\n    return;\n  }\n  noOp() {\n    // operation not supported\n    return;\n  }\n  // Encapsulated for derived service recognizers that need to send additional JSON\n  sendPrePayloadJSON(connection, generateNewRequestId = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.sendPrePayloadJSONOverride !== undefined) {\n        return this.sendPrePayloadJSONOverride(connection);\n      }\n      yield this.sendSpeechContext(connection, generateNewRequestId);\n      yield this.sendWaveHeader(connection);\n      return;\n    });\n  }\n  sendWaveHeader(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const format = yield this.audioSource.format;\n      // this.writeBufferToConsole(format.header);\n      return connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, \"audio/x-wav\", format.header));\n    });\n  }\n  // Establishes a websocket connection to the end point.\n  connectImpl() {\n    if (this.privConnectionPromise !== undefined) {\n      return this.privConnectionPromise.then(connection => {\n        if (connection.state() === ConnectionState.Disconnected) {\n          this.privConnectionId = null;\n          this.privConnectionPromise = undefined;\n          this.privServiceHasSentMessage = false;\n          return this.connectImpl();\n        }\n        return this.privConnectionPromise;\n      }, () => {\n        this.privConnectionId = null;\n        this.privConnectionPromise = undefined;\n        this.privServiceHasSentMessage = false;\n        return this.connectImpl();\n      });\n    }\n    this.privConnectionPromise = this.retryableConnect();\n    // Attach an empty handler to allow the promise to run in the background while\n    // other startup events happen. It'll eventually be awaited on.\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    this.privConnectionPromise.catch(() => {});\n    if (this.postConnectImplOverride !== undefined) {\n      return this.postConnectImplOverride(this.privConnectionPromise);\n    }\n    return this.privConnectionPromise;\n  }\n  sendSpeechServiceConfig(connection, requestSession, SpeechServiceConfigJson) {\n    requestSession.onSpeechContext();\n    // filter out anything that is not required for the service to work.\n    if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n      const withTelemetry = JSON.parse(SpeechServiceConfigJson);\n      const replacement = {\n        context: {\n          system: withTelemetry.context.system\n        }\n      };\n      SpeechServiceConfigJson = JSON.stringify(replacement);\n    }\n    if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\n      const json = JSON.parse(SpeechServiceConfigJson);\n      json.context.DisableReferenceChannel = \"True\";\n      json.context.MicSpec = \"1_0_0\";\n      SpeechServiceConfigJson = JSON.stringify(json);\n    }\n    if (SpeechServiceConfigJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", requestSession.requestId, \"application/json\", SpeechServiceConfigJson));\n    }\n    return;\n  }\n  fetchConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privConnectionConfigurationPromise !== undefined) {\n        return this.privConnectionConfigurationPromise.then(connection => {\n          if (connection.state() === ConnectionState.Disconnected) {\n            this.privConnectionId = null;\n            this.privConnectionConfigurationPromise = undefined;\n            this.privServiceHasSentMessage = false;\n            return this.fetchConnection();\n          }\n          return this.privConnectionConfigurationPromise;\n        }, () => {\n          this.privConnectionId = null;\n          this.privConnectionConfigurationPromise = undefined;\n          this.privServiceHasSentMessage = false;\n          return this.fetchConnection();\n        });\n      }\n      this.privConnectionConfigurationPromise = this.configureConnection();\n      return yield this.privConnectionConfigurationPromise;\n    });\n  }\n  sendAudio(audioStreamNode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const audioFormat = yield this.audioSource.format;\n      this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\n      // The time we last sent data to the service.\n      let nextSendTime = Date.now();\n      // Max amount to send before we start to throttle\n      const fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n      const maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n      const startRecogNumber = this.privRequestSession.recogNumber;\n      const readAndUploadCycle = () => __awaiter(this, void 0, void 0, function* () {\n        // If speech is done, stop sending audio.\n        if (!this.privIsDisposed && !this.privRequestSession.isSpeechEnded && this.privRequestSession.isRecognizing && this.privRequestSession.recogNumber === startRecogNumber) {\n          const connection = yield this.fetchConnection();\n          const audioStreamChunk = yield audioStreamNode.read();\n          // we have a new audio chunk to upload.\n          if (this.privRequestSession.isSpeechEnded) {\n            // If service already recognized audio end then don't send any more audio\n            return;\n          }\n          let payload;\n          let sendDelay;\n          if (!audioStreamChunk || audioStreamChunk.isEnd) {\n            payload = null;\n            sendDelay = 0;\n          } else {\n            payload = audioStreamChunk.buffer;\n            this.privRequestSession.onAudioSent(payload.byteLength);\n            if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\n              sendDelay = 0;\n            } else {\n              sendDelay = Math.max(0, nextSendTime - Date.now());\n            }\n          }\n          if (0 !== sendDelay) {\n            yield this.delay(sendDelay);\n          }\n          if (payload !== null) {\n            nextSendTime = Date.now() + payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2);\n          }\n          // Are we still alive?\n          if (!this.privIsDisposed && !this.privRequestSession.isSpeechEnded && this.privRequestSession.isRecognizing && this.privRequestSession.recogNumber === startRecogNumber) {\n            connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)).catch(() => {\n              // eslint-disable-next-line @typescript-eslint/no-empty-function\n              this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => {});\n            });\n            if (!(audioStreamChunk === null || audioStreamChunk === void 0 ? void 0 : audioStreamChunk.isEnd)) {\n              // this.writeBufferToConsole(payload);\n              // Regardless of success or failure, schedule the next upload.\n              // If the underlying connection was broken, the next cycle will\n              // get a new connection and re-transmit missing audio automatically.\n              return readAndUploadCycle();\n            } else {\n              // the audio stream has been closed, no need to schedule next\n              // read-upload cycle.\n              if (!this.privIsLiveAudio) {\n                this.privRequestSession.onSpeechEnded();\n              }\n            }\n          }\n        }\n      });\n      return readAndUploadCycle();\n    });\n  }\n  retryableConnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let isUnAuthorized = false;\n      this.privAuthFetchEventId = createNoDashGuid();\n      const sessionId = this.privRequestSession.sessionId;\n      this.privConnectionId = sessionId !== undefined ? sessionId : createNoDashGuid();\n      this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n      let lastStatusCode = 0;\n      let lastReason = \"\";\n      while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\n        // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\n        // facing event when a connection fails to let them try and provide new auth information.\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n        const auth = yield authPromise;\n        yield this.privRequestSession.onAuthCompleted(false);\n        // Create the connection\n        const connection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\n        // Attach the telemetry handlers.\n        this.privRequestSession.listenForServiceTelemetry(connection.events);\n        // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n        // it'll stop sending events.\n        connection.events.attach(event => {\n          this.connectionEvents.onEvent(event);\n        });\n        const response = yield connection.open();\n        // 200 == everything is fine.\n        if (response.statusCode === 200) {\n          yield this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\n          return Promise.resolve(connection);\n        } else if (response.statusCode === 1006) {\n          isUnAuthorized = true;\n        }\n        lastStatusCode = response.statusCode;\n        lastReason = response.reason;\n        this.privRequestSession.onRetryConnection();\n      }\n      yield this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\n      return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\n    });\n  }\n  delay(delayMs) {\n    return new Promise(resolve => this.privSetTimeout(resolve, delayMs));\n  }\n  writeBufferToConsole(buffer) {\n    let out = \"Buffer Size: \";\n    if (null === buffer) {\n      out += \"null\";\n    } else {\n      const readView = new Uint8Array(buffer);\n      out += `${buffer.byteLength}\\r\\n`;\n      for (let i = 0; i < buffer.byteLength; i++) {\n        out += readView[i].toString(16).padStart(2, \"0\") + \" \";\n        if ((i + 1) % 16 === 0) {\n          // eslint-disable-next-line no-console\n          console.info(out);\n          out = \"\";\n        }\n      }\n    }\n    // eslint-disable-next-line no-console\n    console.info(out);\n  }\n  sendFinalAudio() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.fetchConnection();\n      yield connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\n      return;\n    });\n  }\n  // Takes an established websocket connection to the endpoint and sends speech configuration information.\n  configureConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.connectImpl();\n      if (this.configConnectionOverride !== undefined) {\n        return this.configConnectionOverride(connection);\n      }\n      yield this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\n      yield this.sendPrePayloadJSON(connection, false);\n      return connection;\n    });\n  }\n}\nServiceRecognizerBase.telemetryDataEnabled = true;","map":{"version":3,"names":["ReplayableAudioNode","ArgumentNullError","ConnectionState","createNoDashGuid","EventSource","MessageType","ServiceEvent","Timeout","CancellationErrorCode","CancellationReason","PropertyId","RecognitionEventArgs","SessionEventArgs","OutputFormat","AgentConfig","DynamicGrammarBuilder","RecognitionMode","RequestSession","SpeechContext","SpeechDetected","type","OutputFormatPropertyName","SpeechConnectionMessage","ServiceRecognizerBase","constructor","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","privConnectionConfigurationPromise","undefined","privConnectionPromise","privSetTimeout","setTimeout","privIsLiveAudio","privAverageBytesPerMs","privEnableSpeakerId","recognizeOverride","recognizeSpeaker","disconnectOverride","receiveMessageOverride","sendPrePayloadJSONOverride","postConnectImplOverride","configConnectionOverride","handleSpeechPhraseMessage","handleSpeechHypothesisMessage","isSpeakerDiarizationEnabled","privMustReportEndOfStream","privAuthentication","privConnectionFactory","privAudioSource","privRecognizerConfig","privIsDisposed","privRecognizer","privRequestSession","id","privConnectionEvents","privServiceEvents","privDynamicGrammar","privSpeechContext","privAgentConfig","webWorkerLoadType","parameters","getProperty","WebWorkerLoadType","toLowerCase","Blob","Worker","window","bind","connectionEvents","attach","connectionEvent","name","connectionClosedEvent","statusCode","numConnectionAttempts","maxRetryCount","cancelRecognitionLocal","Error","BadRequestParameters","ConnectionFailure","reason","privDiarizationSessionId","setLanguageIdJson","setOutputDetailLevelJson","setTranslationJson","targetLanguages","SpeechServiceConnection_TranslationToLanguages","languages","split","translationVoice","SpeechServiceConnection_TranslationVoice","action","setSection","onSuccess","output","interimResults","mode","languageToVoiceMap","lang","defaultVoices","setSpeechSegmentationTimeoutJson","speechSegmentationTimeout","Speech_SegmentationSilenceTimeoutMs","recognitionMode","Conversation","Dictation","segmentationSilenceTimeoutMs","parseInt","phraseDetection","getSection","segmentation","autoDetectSourceLanguages","sourceLanguages","speechContextLidMode","languageIdMode","Priority","onUnknown","resultType","phraseResults","customModels","sourceLanguageModels","onInterim","requestWordLevelTimestamps","SpeechServiceResponse_RequestWordLevelTimestamps","setWordLevelTimings","outputFormat","Simple","Detailed","toLocaleLowerCase","setDetailedOutputFormat","speechContext","dynamicGrammar","agentConfig","conversationTranslatorToken","token","setProperty","ConversationTranslator_Token","voiceProfileType","SpeechServiceConnection_SpeakerIdMode","auth","isDisposed","dispose","connection","error","serviceEvents","recognize","recoMode","successCallback","errorCallBack","privSuccessCallback","privErrorCallback","startNewRecognition","listenForServiceTelemetry","events","conPromise","connectImpl","audioNode","audioStreamNode","audioNodeId","format","deviceInfo","Microphones","avgBytesPerSec","onAudioSourceAttachCompleted","SpeechServiceConfig","Context","audio","source","onStopRecognizing","sessionStartEventArgs","sessionId","sessionStarted","receiveMessage","audioSendPromise","sendAudio","catch","__awaiter","RuntimeError","stopRecognizing","isRecognizing","turnOff","sendFinalAudio","turnCompletionPromise","connect","Promise","resolve","connectAsync","cb","err","then","e","disconnect","NoError","sendMessage","message","sendNetworkMessage","path","payload","Text","Binary","contentType","fetchConnection","send","requestId","activityTemplate","messagePayload","privActivityTemplate","sendTelemetryData","telemetryData","getTelemetry","telemetryDataEnabled","_a","cancellationReason","errorCode","cancelRecognition","read","privServiceHasSentMessage","connectionMessage","fromConnectionMessage","onServiceTurnStartResponse","speechStartDetected","fromJSON","textBody","speechStartEventArgs","Offset","json","length","speechStopDetected","speechStopEventArgs","currentTurnAudioOffset","speechEndDetected","isSpeechEnded","EndOfStream","sessionStopEventArgs","onServiceTurnEndResponse","isContinuousRecognition","sessionStopped","sendPrePayloadJSON","processTypeSpecificMessages","onEvent","updateSpeakerDiarizationAudioOffset","bytesSent","recognitionBytesSent","audioOffsetMs","setSpeakerDiarizationAudioOffsetMs","sendSpeechContext","generateNewRequestId","speechContextJson","toJSON","onSpeechContext","noOp","sendWaveHeader","header","state","Disconnected","privConnectionId","retryableConnect","sendSpeechServiceConfig","requestSession","SpeechServiceConfigJson","withTelemetry","JSON","parse","replacement","context","system","stringify","DisableReferenceChannel","MicSpec","configureConnection","audioFormat","nextSendTime","Date","now","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","recogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","isEnd","buffer","onAudioSent","byteLength","Math","max","delay","onSpeechEnded","isUnAuthorized","privAuthFetchEventId","onPreConnectionStart","lastStatusCode","lastReason","authPromise","fetchOnExpiry","fetch","onAuthCompleted","create","event","response","open","onConnectionEstablishCompleted","onRetryConnection","reject","SpeechServiceConnection_Endpoint","delayMs","writeBufferToConsole","out","readView","Uint8Array","i","toString","padStart","console","info","serialize"],"sources":["src/common.speech/ServiceRecognizerBase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports.js\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation.js\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string =  this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const action = ( translationVoice !== undefined ) ? \"Synthesize\" : \"None\";\r\n            this.privSpeechContext.setSection(\"translation\", {\r\n                onSuccess: { action },\r\n                output: { interimResults: { mode: \"Always\" } },\r\n                targetLanguages: languages,\r\n            });\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.setSection(\"synthesis\", {\r\n                    defaultVoices: languageToVoiceMap\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            phraseDetection.onInterim = { action: \"Translate\" };\r\n            phraseDetection.onSuccess = { action: \"Translate\" };\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"None\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"None\"\r\n                }\r\n            });\r\n        }\r\n\r\n        this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setTranslationJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                return this.receiveMessage();\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}