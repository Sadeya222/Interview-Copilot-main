{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file */\nimport { ForceDictationPropertyName, OutputFormatPropertyName, ServicePropertiesPropertyName } from \"../common.speech/Exports.js\";\nimport { Contracts } from \"./Contracts.js\";\nimport { OutputFormat, ProfanityOption, PropertyCollection, PropertyId, SpeechConfig, SpeechSynthesisOutputFormat } from \"./Exports.js\";\n/**\n * Speech translation configuration.\n * @class SpeechTranslationConfig\n */\nexport class SpeechTranslationConfig extends SpeechConfig {\n  /**\n   * Creates an instance of recognizer config.\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\n   * @member SpeechTranslationConfig.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - The subscription key.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechTranslationConfig} The speech translation config.\n   */\n  static fromSubscription(subscriptionKey, region) {\n    Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return ret;\n  }\n  /**\n   * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   * expires, the caller needs to refresh it by setting the property authorizationToken with a new\n   * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\n   * will encounter errors during recognition.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply\n   * to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member SpeechTranslationConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param {string} authorizationToken - The authorization token.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechTranslationConfig} The speech translation config.\n   */\n  static fromAuthorizationToken(authorizationToken, region) {\n    Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return ret;\n  }\n  /**\n   * Creates an instance of the speech config with specified host and subscription key.\n   * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\n   * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n   * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n   * Note: To use an authorization token with fromHost, use fromHost(URL),\n   * and then set the AuthorizationToken property on the created SpeechConfig instance.\n   * Note: Added in version 1.9.0.\n   * @member SpeechConfig.fromHost\n   * @function\n   * @public\n   * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n  static fromHost(hostName, subscriptionKey) {\n    Contracts.throwIfNull(hostName, \"hostName\");\n    const speechImpl = new SpeechTranslationConfigImpl();\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n    if (undefined !== subscriptionKey) {\n      speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n    return speechImpl;\n  }\n  /**\n   * Creates an instance of the speech translation config with specified endpoint and subscription key.\n   * This method is intended only for users who use a non-standard service endpoint or paramters.\n   * Note: The query properties specified in the endpoint URL are not changed, even if they are\n   * set by any other APIs. For example, if language is defined in the uri as query parameter\n   * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\n   * setting in uri takes precedence, and the effective language is \"de-DE\".\n   * Only the properties that are not specified in the endpoint URL can be set by other APIs.\n   * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n   * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\n   * use the authorization token.\n   * @member SpeechTranslationConfig.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} endpoint - The service endpoint to connect to.\n   * @param {string} subscriptionKey - The subscription key.\n   * @returns {SpeechTranslationConfig} A speech config instance.\n   */\n  static fromEndpoint(endpoint, subscriptionKey) {\n    Contracts.throwIfNull(endpoint, \"endpoint\");\n    Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    return ret;\n  }\n}\n/**\n * @private\n * @class SpeechTranslationConfigImpl\n */\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\n  constructor() {\n    super();\n    this.privSpeechProperties = new PropertyCollection();\n    this.outputFormat = OutputFormat.Simple;\n  }\n  /**\n   * Gets/Sets the authorization token.\n   * If this is set, subscription key is ignored.\n   * User needs to make sure the provided authorization token is valid and not expired.\n   * @member SpeechTranslationConfigImpl.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - The authorization token.\n   */\n  set authorizationToken(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\n   * Sets the speech recognition language.\n   * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @param {string} value - The authorization token.\n   */\n  set speechRecognitionLanguage(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n  }\n  /**\n   * Gets the speech recognition language.\n   * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @return {string} The speechRecognitionLanguage.\n   */\n  get speechRecognitionLanguage() {\n    return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\n   * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\n   * @function\n   * @public\n   */\n  get subscriptionKey() {\n    return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\n  }\n  /**\n   * Gets the output format\n   * @member SpeechTranslationConfigImpl.prototype.outputFormat\n   * @function\n   * @public\n   */\n  get outputFormat() {\n    // eslint-disable-next-line\n    return OutputFormat[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\n  }\n  /**\n   * Gets/Sets the output format\n   * @member SpeechTranslationConfigImpl.prototype.outputFormat\n   * @function\n   * @public\n   */\n  set outputFormat(value) {\n    this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n  }\n  /**\n   * Gets the endpoint id.\n   * @member SpeechTranslationConfigImpl.prototype.endpointId\n   * @function\n   * @public\n   */\n  get endpointId() {\n    return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n  }\n  /**\n   * Gets/Sets the endpoint id.\n   * @member SpeechTranslationConfigImpl.prototype.endpointId\n   * @function\n   * @public\n   */\n  set endpointId(value) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\n  }\n  /**\n   * Add a (text) target language to translate into.\n   * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\n   * @function\n   * @public\n   * @param {string} value - The language such as de-DE\n   */\n  addTargetLanguage(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    const languages = this.targetLanguages;\n    if (!languages.includes(value)) {\n      languages.push(value);\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n    }\n  }\n  /**\n   * Gets the (text) target language to translate into.\n   * @member SpeechTranslationConfigImpl.prototype.targetLanguages\n   * @function\n   * @public\n   * @param {string} value - The language such as de-DE\n   */\n  get targetLanguages() {\n    if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    } else {\n      return [];\n    }\n  }\n  /**\n   * Gets the voice name.\n   * @member SpeechTranslationConfigImpl.prototype.voiceName\n   * @function\n   * @public\n   */\n  get voiceName() {\n    return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n  }\n  /**\n   * Gets/Sets the voice of the translated language, enable voice synthesis output.\n   * @member SpeechTranslationConfigImpl.prototype.voiceName\n   * @function\n   * @public\n   * @param {string} value - The name of the voice.\n   */\n  set voiceName(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\n  }\n  /**\n   * Provides the region.\n   * @member SpeechTranslationConfigImpl.prototype.region\n   * @function\n   * @public\n   * @returns {string} The region.\n   */\n  get region() {\n    return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n  }\n  setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n  }\n  /**\n   * Gets an arbitrary property value.\n   * @member SpeechTranslationConfigImpl.prototype.getProperty\n   * @function\n   * @public\n   * @param {string} name - The name of the property.\n   * @param {string} def - The default value of the property in case it is not set.\n   * @returns {string} The value of the property.\n   */\n  getProperty(name, def) {\n    return this.privSpeechProperties.getProperty(name, def);\n  }\n  /**\n   * Gets/Sets an arbitrary property value.\n   * @member SpeechTranslationConfigImpl.prototype.setProperty\n   * @function\n   * @public\n   * @param {string | PropertyId} name - The name of the property to set.\n   * @param {string} value - The value of the property.\n   */\n  setProperty(name, value) {\n    this.privSpeechProperties.setProperty(name, value);\n  }\n  /**\n   * Provides access to custom properties.\n   * @member SpeechTranslationConfigImpl.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The properties.\n   */\n  get properties() {\n    return this.privSpeechProperties;\n  }\n  /**\n   * Dispose of associated resources.\n   * @member SpeechTranslationConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    return;\n  }\n  setServiceProperty(name, value) {\n    const currentProperties = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    currentProperties[name] = value;\n    this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n  }\n  setProfanity(profanity) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\n  }\n  enableAudioLogging() {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n  }\n  requestWordLevelTimestamps() {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n  }\n  enableDictation() {\n    this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\n  }\n  get speechSynthesisLanguage() {\n    return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\n  }\n  set speechSynthesisLanguage(language) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\n  }\n  get speechSynthesisVoiceName() {\n    return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\n  }\n  set speechSynthesisVoiceName(voice) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\n  }\n  get speechSynthesisOutputFormat() {\n    // eslint-disable-next-line\n    return SpeechSynthesisOutputFormat[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n  }\n  set speechSynthesisOutputFormat(format) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\n  }\n}","map":{"version":3,"names":["ForceDictationPropertyName","OutputFormatPropertyName","ServicePropertiesPropertyName","Contracts","OutputFormat","ProfanityOption","PropertyCollection","PropertyId","SpeechConfig","SpeechSynthesisOutputFormat","SpeechTranslationConfig","constructor","fromSubscription","subscriptionKey","region","throwIfNullOrWhitespace","ret","SpeechTranslationConfigImpl","properties","setProperty","SpeechServiceConnection_Key","SpeechServiceConnection_Region","fromAuthorizationToken","authorizationToken","SpeechServiceAuthorization_Token","fromHost","hostName","throwIfNull","speechImpl","SpeechServiceConnection_Host","protocol","hostname","port","undefined","fromEndpoint","endpoint","SpeechServiceConnection_Endpoint","href","privSpeechProperties","outputFormat","Simple","value","speechRecognitionLanguage","SpeechServiceConnection_RecoLanguage","getProperty","endpointId","SpeechServiceConnection_EndpointId","addTargetLanguage","languages","targetLanguages","includes","push","SpeechServiceConnection_TranslationToLanguages","join","split","voiceName","SpeechServiceConnection_TranslationVoice","setProxy","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","name","def","close","setServiceProperty","currentProperties","JSON","parse","stringify","setProfanity","profanity","SpeechServiceResponse_ProfanityOption","enableAudioLogging","SpeechServiceConnection_EnableAudioLogging","requestWordLevelTimestamps","SpeechServiceResponse_RequestWordLevelTimestamps","enableDictation","speechSynthesisLanguage","SpeechServiceConnection_SynthLanguage","language","speechSynthesisVoiceName","SpeechServiceConnection_SynthVoice","voice","speechSynthesisOutputFormat","SpeechServiceConnection_SynthOutputFormat","format"],"sources":["src/sdk/SpeechTranslationConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport { IStringDictionary } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        if (!languages.includes(value)) {\r\n            languages.push(value);\r\n            this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}