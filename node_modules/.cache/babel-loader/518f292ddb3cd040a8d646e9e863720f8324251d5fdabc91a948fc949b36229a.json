{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { OutputFormatPropertyName, RecognitionMode, RecognizerConfig,\n// SpeechConnectionFactory,\nConversationTranscriberConnectionFactory, ConversationTranscriptionServiceRecognizer } from \"../../common.speech/Exports.js\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\nimport { Contracts } from \"../Contracts.js\";\nimport { OutputFormat, PropertyId, Recognizer } from \"../Exports.js\";\n/**\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class ConversationTranscriber\n */\nexport class ConversationTranscriber extends Recognizer {\n  /**\n   * ConversationTranscriber constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\n    this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\n    this.privDisposedRecognizer = false;\n  }\n  /**\n   * ConversationTranscriber constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\n    return recognizer;\n  }\n  /**\n   * Gets the endpoint id of a customized speech model that is used for transcription.\n   * @member ConversationTranscriber.prototype.endpointId\n   * @function\n   * @public\n   * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n   */\n  get endpointId() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member ConversationTranscriber.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member ConversationTranscriber.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Gets the spoken language of transcription.\n   * @member ConversationTranscriber.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} The spoken language of transcription.\n   */\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets the output format of transcription.\n   * @member ConversationTranscriber.prototype.outputFormat\n   * @function\n   * @public\n   * @returns {OutputFormat} The output format of transcription.\n   */\n  get outputFormat() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\n      return OutputFormat.Simple;\n    } else {\n      return OutputFormat.Detailed;\n    }\n  }\n  /**\n   * The collection of properties and their values defined for this conversation transcriber.\n   * @member ConversationTranscriber.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts conversation transcription, until stopTranscribingAsync() is called.\n   * User must subscribe to events to receive transcription results.\n   * @member ConversationTranscriber.prototype.startTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startTranscribingAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops conversation transcription.\n   * @member ConversationTranscriber.prototype.stopTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopTranscribingAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member ConversationTranscriber.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * Disposes any resources held by the object.\n   * @member SpeechRecognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n        yield this.implRecognizerStop();\n      }\n      yield _super.dispose.call(this, disposing);\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    recognizerConfig.isSpeakerDiarizationEnabled = true;\n    return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n}","map":{"version":3,"names":["OutputFormatPropertyName","RecognitionMode","RecognizerConfig","ConversationTranscriberConnectionFactory","ConversationTranscriptionServiceRecognizer","marshalPromiseToCallbacks","Contracts","OutputFormat","PropertyId","Recognizer","ConversationTranscriber","constructor","speechConfig","audioConfig","speechConfigImpl","throwIfNull","throwIfNullOrWhitespace","properties","getProperty","SpeechServiceConnection_RecoLanguage","privProperties","setProperty","SpeechServiceConnection_RecognitionEndpointVersion","privDisposedRecognizer","FromConfig","autoDetectSourceLanguageConfig","mergeTo","recognizer","endpointId","throwIfDisposed","SpeechServiceConnection_EndpointId","authorizationToken","SpeechServiceAuthorization_Token","token","speechRecognitionLanguage","outputFormat","Simple","Detailed","startTranscribingAsync","cb","err","startContinuousRecognitionAsyncImpl","Conversation","stopTranscribingAsync","stopContinuousRecognitionAsyncImpl","close","errorCb","dispose","disposing","implRecognizerStop","_super","call","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","configImpl","isSpeakerDiarizationEnabled"],"sources":["src/sdk/Transcription/ConversationTranscriber.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAGIA,wBAAwB,EACxBC,eAAe,EACfC,gBAAgB;AAEhB;AACAC,wCAAwC,EAExCC,0CAA0C,QACvC,gCAAgC;AACvC,SAASC,yBAAyB,QAAQ,yBAAyB;AAEnE,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAKIC,YAAY,EAEZC,UAAU,EACVC,UAAU,QACP,eAAe;AAGtB;;;;AAIA,OAAM,MAAOC,uBAAwB,SAAQD,UAAU;EAGnD;;;;;;EAMAE,YAAmBC,YAA0B,EAAEC,WAAyB;IACpE,MAAMC,gBAAgB,GAAqBF,YAAgC;IAC3EN,SAAS,CAACS,WAAW,CAACD,gBAAgB,EAAE,cAAc,CAAC;IAEvDR,SAAS,CAACU,uBAAuB,CAC7BF,gBAAgB,CAACG,UAAU,CAACC,WAAW,CAACV,UAAU,CAACW,oCAAoC,CAAC,EACxFX,UAAU,CAACA,UAAU,CAACW,oCAAoC,CAAC,CAAC;IAEhE,KAAK,CAACN,WAAW,EAAEC,gBAAgB,CAACG,UAAU,EAAE,IAAId,wCAAwC,EAAE,CAAC;IAC/F,IAAI,CAACiB,cAAc,CAACC,WAAW,CAACb,UAAU,CAACc,kDAAkD,EAAE,GAAG,CAAC;IACnG,IAAI,CAACC,sBAAsB,GAAG,KAAK;EACvC;EAEA;;;;;;;EAOO,OAAOC,UAAUA,CAACZ,YAA0B,EAAEa,8BAA8D,EAAEZ,WAAyB;IAC1I,MAAMC,gBAAgB,GAAqBF,YAAgC;IAC3Ea,8BAA8B,CAACR,UAAU,CAACS,OAAO,CAACZ,gBAAgB,CAACG,UAAU,CAAC;IAC9E,MAAMU,UAAU,GAAG,IAAIjB,uBAAuB,CAACE,YAAY,EAAEC,WAAW,CAAC;IACzE,OAAOc,UAAU;EACrB;EA0BA;;;;;;;EAOA,IAAWC,UAAUA,CAAA;IACjBtB,SAAS,CAACuB,eAAe,CAAC,IAAI,CAACN,sBAAsB,CAAC;IAEtD,OAAO,IAAI,CAACN,UAAU,CAACC,WAAW,CAACV,UAAU,CAACsB,kCAAkC,EAAE,sCAAsC,CAAC;EAC7H;EAEA;;;;;;;EAOA,IAAWC,kBAAkBA,CAAA;IACzB,OAAO,IAAI,CAACd,UAAU,CAACC,WAAW,CAACV,UAAU,CAACwB,gCAAgC,CAAC;EACnF;EAEA;;;;;;;EAOA,IAAWD,kBAAkBA,CAACE,KAAa;IACvC3B,SAAS,CAACU,uBAAuB,CAACiB,KAAK,EAAE,OAAO,CAAC;IACjD,IAAI,CAAChB,UAAU,CAACI,WAAW,CAACb,UAAU,CAACwB,gCAAgC,EAAEC,KAAK,CAAC;EACnF;EAEA;;;;;;;EAOA,IAAWC,yBAAyBA,CAAA;IAChC5B,SAAS,CAACuB,eAAe,CAAC,IAAI,CAACN,sBAAsB,CAAC;IAEtD,OAAO,IAAI,CAACN,UAAU,CAACC,WAAW,CAACV,UAAU,CAACW,oCAAoC,CAAC;EACvF;EAEA;;;;;;;EAOA,IAAWgB,YAAYA,CAAA;IACnB7B,SAAS,CAACuB,eAAe,CAAC,IAAI,CAACN,sBAAsB,CAAC;IAEtD,IAAI,IAAI,CAACN,UAAU,CAACC,WAAW,CAAClB,wBAAwB,EAAEO,YAAY,CAACA,YAAY,CAAC6B,MAAM,CAAC,CAAC,KAAK7B,YAAY,CAACA,YAAY,CAAC6B,MAAM,CAAC,EAAE;MAChI,OAAO7B,YAAY,CAAC6B,MAAM;KAC7B,MAAM;MACH,OAAO7B,YAAY,CAAC8B,QAAQ;;EAEpC;EAEA;;;;;;;EAOA,IAAWpB,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACG,cAAc;EAC9B;EAEA;;;;;;;;;EASOkB,sBAAsBA,CAACC,EAAe,EAAEC,GAAyB;IACpEnC,yBAAyB,CAAC,IAAI,CAACoC,mCAAmC,CAACxC,eAAe,CAACyC,YAAY,CAAC,EAAEH,EAAE,EAAEC,GAAG,CAAC;EAC9G;EAEA;;;;;;;;EAQOG,qBAAqBA,CAACJ,EAAe,EAAEC,GAAyB;IACnEnC,yBAAyB,CAAC,IAAI,CAACuC,kCAAkC,EAAE,EAAEL,EAAE,EAAEC,GAAG,CAAC;EACjF;EAEA;;;;;;EAMOK,KAAKA,CAACN,EAAe,EAAEO,OAAiC;IAC3DxC,SAAS,CAACuB,eAAe,CAAC,IAAI,CAACN,sBAAsB,CAAC;IACtDlB,yBAAyB,CAAC,IAAI,CAAC0C,OAAO,CAAC,IAAI,CAAC,EAAER,EAAE,EAAEO,OAAO,CAAC;EAC9D;EAEA;;;;;;;EAOgBC,OAAOA,CAACC,SAAkB;;;;;;;MACtC,IAAI,IAAI,CAACzB,sBAAsB,EAAE;QAC7B;;MAGJ,IAAIyB,SAAS,EAAE;QACX,IAAI,CAACzB,sBAAsB,GAAG,IAAI;QAClC,MAAM,IAAI,CAAC0B,kBAAkB,EAAE;;MAGnC,MAAMC,MAAA,CAAMH,OAAO,CAAAI,IAAA,OAACH,SAAS,CAAC;IAClC,CAAC;;EAESI,sBAAsBA,CAACxC,YAAiC;IAC9D,OAAO,IAAIV,gBAAgB,CAACU,YAAY,EAAE,IAAI,CAACQ,cAAc,CAAC;EAClE;EAEUiC,uBAAuBA,CAC7BC,cAA+B,EAC/BC,iBAAqC,EACrC1C,WAAwB,EACxB2C,gBAAkC;IAClC,MAAMC,UAAU,GAAoB5C,WAA8B;IAClE2C,gBAAgB,CAACE,2BAA2B,GAAG,IAAI;IACnD,OAAO,IAAItD,0CAA0C,CAACkD,cAAc,EAAEC,iBAAiB,EAAEE,UAAU,EAAED,gBAAgB,EAAE,IAAI,CAAC;EAChI"},"metadata":{},"sourceType":"module","externalDependencies":[]}