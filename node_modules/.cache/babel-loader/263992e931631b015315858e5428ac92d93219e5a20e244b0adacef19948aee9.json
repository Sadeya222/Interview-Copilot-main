{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// eslint-disable-next-line max-classes-per-file\nimport { Contracts } from \"./Contracts.js\";\n/**\n * Language understanding model\n * @class LanguageUnderstandingModel\n */\nexport class LanguageUnderstandingModel {\n  /**\n   * Creates and initializes a new instance\n   * @constructor\n   */\n  constructor() {\n    return;\n  }\n  /**\n   * Creates an language understanding model using the specified endpoint.\n   * @member LanguageUnderstandingModel.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} uri - A String that represents the endpoint of the language understanding model.\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n  static fromEndpoint(uri) {\n    Contracts.throwIfNull(uri, \"uri\");\n    Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\n    const langModelImp = new LanguageUnderstandingModelImpl();\n    // Need to extract the app ID from the URL.\n    // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\n    // Start tearing the string apart.\n    // region can be extracted from the host name.\n    const firstDot = uri.host.indexOf(\".\");\n    if (-1 === firstDot) {\n      throw new Error(\"Could not determine region from endpoint\");\n    }\n    langModelImp.region = uri.host.substr(0, firstDot);\n    // Now the app ID.\n    const lastSegment = uri.pathname.lastIndexOf(\"/\") + 1;\n    if (-1 === lastSegment) {\n      throw new Error(\"Could not determine appId from endpoint\");\n    }\n    langModelImp.appId = uri.pathname.substr(lastSegment);\n    // And finally the key.\n    langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\n    if (undefined === langModelImp.subscriptionKey) {\n      throw new Error(\"Could not determine subscription key from endpoint\");\n    }\n    return langModelImp;\n  }\n  /**\n   * Creates an language understanding model using the application id of Language Understanding service.\n   * @member LanguageUnderstandingModel.fromAppId\n   * @function\n   * @public\n   * @param {string} appId - A String that represents the application id of Language Understanding service.\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n  static fromAppId(appId) {\n    Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n    const langModelImp = new LanguageUnderstandingModelImpl();\n    langModelImp.appId = appId;\n    return langModelImp;\n  }\n  /**\n   * Creates a language understanding model using hostname, subscription key and application\n   * id of Language Understanding service.\n   * @member LanguageUnderstandingModel.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - A String that represents the subscription key of\n   * Language Understanding service.\n   * @param {string} appId - A String that represents the application id of Language\n   * Understanding service.\n   * @param {LanguageUnderstandingModel} region - A String that represents the region\n   * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n  static fromSubscription(subscriptionKey, appId, region) {\n    Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const langModelImp = new LanguageUnderstandingModelImpl();\n    langModelImp.appId = appId;\n    langModelImp.region = region;\n    langModelImp.subscriptionKey = subscriptionKey;\n    return langModelImp;\n  }\n}\n/**\n * @private\n * @class LanguageUnderstandingModelImpl\n */\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {}","map":{"version":3,"names":["Contracts","LanguageUnderstandingModel","constructor","fromEndpoint","uri","throwIfNull","throwIfNullOrWhitespace","hostname","langModelImp","LanguageUnderstandingModelImpl","firstDot","host","indexOf","Error","region","substr","lastSegment","pathname","lastIndexOf","appId","subscriptionKey","searchParams","get","undefined","fromAppId","fromSubscription"],"sources":["src/sdk/LanguageUnderstandingModel.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA;AACA,SAASA,SAAS,QAAQ,gBAAgB;AAE1C;;;;AAIA,OAAM,MAAOC,0BAA0B;EACnC;;;;EAIAC,YAAA;IACI;EACJ;EAEA;;;;;;;;EAQO,OAAOC,YAAYA,CAACC,GAAQ;IAC/BJ,SAAS,CAACK,WAAW,CAACD,GAAG,EAAE,KAAK,CAAC;IACjCJ,SAAS,CAACM,uBAAuB,CAACF,GAAG,CAACG,QAAQ,EAAE,KAAK,CAAC;IAEtD,MAAMC,YAAY,GAAmC,IAAIC,8BAA8B,EAAE;IACzF;IACA;IAEA;IAEA;IACA,MAAMC,QAAQ,GAAWN,GAAG,CAACO,IAAI,CAACC,OAAO,CAAC,GAAG,CAAC;IAC9C,IAAI,CAAC,CAAC,KAAKF,QAAQ,EAAE;MACjB,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;;IAE/DL,YAAY,CAACM,MAAM,GAAGV,GAAG,CAACO,IAAI,CAACI,MAAM,CAAC,CAAC,EAAEL,QAAQ,CAAC;IAElD;IAEA,MAAMM,WAAW,GAAWZ,GAAG,CAACa,QAAQ,CAACC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;IAC7D,IAAI,CAAC,CAAC,KAAKF,WAAW,EAAE;MACpB,MAAM,IAAIH,KAAK,CAAC,yCAAyC,CAAC;;IAG9DL,YAAY,CAACW,KAAK,GAAGf,GAAG,CAACa,QAAQ,CAACF,MAAM,CAACC,WAAW,CAAC;IAErD;IACAR,YAAY,CAACY,eAAe,GAAGhB,GAAG,CAACiB,YAAY,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACvE,IAAIC,SAAS,KAAKf,YAAY,CAACY,eAAe,EAAE;MAC5C,MAAM,IAAIP,KAAK,CAAC,oDAAoD,CAAC;;IAGzE,OAAOL,YAAY;EACvB;EAEA;;;;;;;;EAQO,OAAOgB,SAASA,CAACL,KAAa;IACjCnB,SAAS,CAACM,uBAAuB,CAACa,KAAK,EAAE,OAAO,CAAC;IAEjD,MAAMX,YAAY,GAAmC,IAAIC,8BAA8B,EAAE;IACzFD,YAAY,CAACW,KAAK,GAAGA,KAAK;IAC1B,OAAOX,YAAY;EACvB;EAEA;;;;;;;;;;;;;;EAcO,OAAOiB,gBAAgBA,CAACL,eAAuB,EAAED,KAAa,EAAEL,MAAc;IACjFd,SAAS,CAACM,uBAAuB,CAACc,eAAe,EAAE,iBAAiB,CAAC;IACrEpB,SAAS,CAACM,uBAAuB,CAACa,KAAK,EAAE,OAAO,CAAC;IACjDnB,SAAS,CAACM,uBAAuB,CAACQ,MAAM,EAAE,QAAQ,CAAC;IAEnD,MAAMN,YAAY,GAAmC,IAAIC,8BAA8B,EAAE;IACzFD,YAAY,CAACW,KAAK,GAAGA,KAAK;IAC1BX,YAAY,CAACM,MAAM,GAAGA,MAAM;IAC5BN,YAAY,CAACY,eAAe,GAAGA,eAAe;IAC9C,OAAOZ,YAAY;EACvB;;AAGJ;;;;AAIA,OAAM,MAAOC,8BAA+B,SAAQR,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}