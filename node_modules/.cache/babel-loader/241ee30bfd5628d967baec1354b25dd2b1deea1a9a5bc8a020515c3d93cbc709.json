{"ast":null,"code":"import { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports.js\";\nimport { PropertyId } from \"../sdk/Exports.js\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SynthesisRestAdapter\n */\nexport class SynthesisRestAdapter {\n  constructor(config, authentication) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\n    }\n    this.privUri = `${endpoint}/cognitiveservices/voices/list`;\n    const options = RestConfigBase.requestOptions;\n    this.privRestAdapter = new RestMessageAdapter(options);\n    this.privAuthentication = authentication;\n  }\n  /**\n   * Sends list voices request to endpoint.\n   * @function\n   * @public\n   * @param connectionId - guid for connectionId\n   * @returns {Promise<IRestResponse>} rest response to status request\n   */\n  getVoicesList(connectionId) {\n    this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\n    return this.privAuthentication.fetch(connectionId).then(authInfo => {\n      this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\n      return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\n    });\n  }\n}","map":{"version":3,"names":["RestConfigBase","RestMessageAdapter","RestRequestType","PropertyId","ConnectionFactoryBase","HeaderNames","SynthesisRestAdapter","constructor","config","authentication","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","SpeechServiceConnection_Host","privUri","options","requestOptions","privRestAdapter","privAuthentication","getVoicesList","connectionId","setHeaders","ConnectionId","fetch","then","authInfo","headerName","token","request","Get"],"sources":["src/common.speech/SynthesisRestAdapter.ts"],"sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA,SAGIA,cAAc,EACdC,kBAAkB,EAClBC,eAAe,QACZ,8BAA8B;AACrC,SACIC,UAAU,QACP,mBAAmB;AAC1B,SAASC,qBAAqB,QAAQ,4BAA4B;AAElE,SAASC,WAAW,QAAQ,kBAAkB;AAE9C;;;;;AAKA,OAAM,MAAOC,oBAAoB;EAK7BC,YAAmBC,MAAyB,EAAEC,cAA+B;IAEzE,IAAIC,QAAQ,GAAGF,MAAM,CAACG,UAAU,CAACC,WAAW,CAACT,UAAU,CAACU,gCAAgC,EAAEC,SAAS,CAAC;IACpG,IAAI,CAACJ,QAAQ,EAAE;MACX,MAAMK,MAAM,GAAWP,MAAM,CAACG,UAAU,CAACC,WAAW,CAACT,UAAU,CAACa,8BAA8B,EAAE,QAAQ,CAAC;MACzG,MAAMC,UAAU,GAAWb,qBAAqB,CAACc,aAAa,CAACH,MAAM,CAAC;MACtEL,QAAQ,GAAGF,MAAM,CAACG,UAAU,CAACC,WAAW,CAACT,UAAU,CAACgB,4BAA4B,EAAE,WAAWJ,MAAM,cAAcE,UAAU,EAAE,CAAC;;IAElI,IAAI,CAACG,OAAO,GAAG,GAAGV,QAAQ,gCAAgC;IAE1D,MAAMW,OAAO,GAAoBrB,cAAc,CAACsB,cAAc;IAC9D,IAAI,CAACC,eAAe,GAAG,IAAItB,kBAAkB,CAACoB,OAAO,CAAC;IACtD,IAAI,CAACG,kBAAkB,GAAGf,cAAc;EAC5C;EAEA;;;;;;;EAOOgB,aAAaA,CAACC,YAAoB;IACrC,IAAI,CAACH,eAAe,CAACI,UAAU,CAACtB,WAAW,CAACuB,YAAY,EAAEF,YAAY,CAAC;IACvE,OAAO,IAAI,CAACF,kBAAkB,CAACK,KAAK,CAACH,YAAY,CAAC,CAACI,IAAI,CAAEC,QAAkB,IAA4B;MACnG,IAAI,CAACR,eAAe,CAACI,UAAU,CAACI,QAAQ,CAACC,UAAU,EAAED,QAAQ,CAACE,KAAK,CAAC;MACpE,OAAO,IAAI,CAACV,eAAe,CAACW,OAAO,CAAChC,eAAe,CAACiC,GAAG,EAAE,IAAI,CAACf,OAAO,CAAC;IAC1E,CAAC,CAAC;EACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}