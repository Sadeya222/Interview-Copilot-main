{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { MessageType } from \"../common/Exports.js\";\nimport { CancellationErrorCode, ConversationTranscriptionCanceledEventArgs, MeetingTranscriptionCanceledEventArgs, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports.js\";\nimport { CancellationErrorCodePropertyName, ConversationServiceRecognizer } from \"./Exports.js\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\n// eslint-disable-next-line max-classes-per-file\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, transcriber) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\n    this.privTranscriberRecognizer = transcriber;\n    this.sendPrePayloadJSONOverride = connection => this.sendTranscriptionStartJSON(connection);\n    if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\n      this.privSpeechContext.setWordLevelTimings();\n    }\n  }\n  sendSpeechEventAsync(info, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privRequestSession.isRecognizing) {\n        const connection = yield this.fetchConnection();\n        yield this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\n      }\n    });\n  }\n  sendMeetingSpeechEventAsync(info, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privRequestSession.isRecognizing) {\n        const connection = yield this.fetchConnection();\n        yield this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\n      }\n    });\n  }\n  processTypeSpecificMessages(connectionMessage) {\n    return this.processSpeechMessages(connectionMessage);\n  }\n  handleRecognizedCallback(result, offset, sessionId) {\n    try {\n      const event = new SpeechRecognitionEventArgs(result, offset, sessionId);\n      this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\n      if (!!this.privSuccessCallback) {\n        try {\n          this.privSuccessCallback(result);\n        } catch (e) {\n          if (!!this.privErrorCallback) {\n            this.privErrorCallback(e);\n          }\n        }\n        // Only invoke the call back once.\n        // and if it's successful don't invoke the\n        // error after that.\n        this.privSuccessCallback = undefined;\n        this.privErrorCallback = undefined;\n      }\n      /* eslint-disable no-empty */\n    } catch (error) {\n      // Not going to let errors in the event handler\n      // trip things up.\n    }\n  }\n  handleRecognizingCallback(result, duration, sessionId) {\n    try {\n      const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\n      this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\n      /* eslint-disable no-empty */\n    } catch (error) {\n      // Not going to let errors in the event handler\n      // trip things up.\n    }\n  }\n  // Cancels recognition.\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n    if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\n      if (!!this.privTranscriberRecognizer.canceled) {\n        const cancelEvent = new MeetingTranscriptionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n        try {\n          this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\n          /* eslint-disable no-empty */\n        } catch (_a) {}\n      }\n    } else {\n      if (!!this.privTranscriberRecognizer.canceled) {\n        const cancelEvent = new ConversationTranscriptionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n        try {\n          this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\n          /* eslint-disable no-empty */\n        } catch (_b) {}\n      }\n    }\n    if (!!this.privSuccessCallback) {\n      const result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined,\n      // Text\n      undefined,\n      // Duration\n      undefined,\n      // Offset\n      undefined,\n      // Language\n      undefined,\n      // Language Detection Confidence\n      undefined,\n      // Speaker Id\n      error, undefined,\n      // Json\n      properties);\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* eslint-disable no-empty */\n      } catch (_c) {}\n    }\n  }\n  // Encapsulated for derived service recognizers that need to send additional JSON\n  sendTranscriptionStartJSON(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.sendSpeechContext(connection, true);\n      if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\n        const info = this.privTranscriberRecognizer.getMeetingInfo();\n        const payload = this.createMeetingSpeechEventPayload(info, \"start\");\n        yield this.sendSpeechEvent(connection, payload);\n      } else {\n        const info = this.privTranscriberRecognizer.getConversationInfo();\n        const payload = this.createSpeechEventPayload(info, \"start\");\n        yield this.sendSpeechEvent(connection, payload);\n      }\n      yield this.sendWaveHeader(connection);\n      return;\n    });\n  }\n  sendSpeechEvent(connection, payload) {\n    const speechEventJson = JSON.stringify(payload);\n    if (speechEventJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.event\", this.privRequestSession.requestId, \"application/json\", speechEventJson));\n    }\n    return;\n  }\n  createSpeechEventPayload(info, command) {\n    const eventDict = {\n      id: \"meeting\",\n      name: command,\n      meeting: info.conversationProperties\n    };\n    eventDict.meeting.id = info.id;\n    eventDict.meeting.attendees = info.participants;\n    return eventDict;\n  }\n  createMeetingSpeechEventPayload(info, command) {\n    const eventDict = {\n      id: \"meeting\",\n      name: command,\n      meeting: info.meetingProperties\n    };\n    eventDict.meeting.id = info.id;\n    eventDict.meeting.attendees = info.participants;\n    return eventDict;\n  }\n}","map":{"version":3,"names":["MessageType","CancellationErrorCode","ConversationTranscriptionCanceledEventArgs","MeetingTranscriptionCanceledEventArgs","PropertyCollection","PropertyId","ResultReason","SpeechRecognitionEventArgs","SpeechRecognitionResult","CancellationErrorCodePropertyName","ConversationServiceRecognizer","SpeechConnectionMessage","TranscriptionServiceRecognizer","constructor","authentication","connectionFactory","audioSource","recognizerConfig","transcriber","privTranscriberRecognizer","sendPrePayloadJSONOverride","connection","sendTranscriptionStartJSON","privRecognizerConfig","parameters","getProperty","SpeechServiceResponse_RequestWordLevelTimestamps","privSpeechContext","setWordLevelTimings","sendSpeechEventAsync","info","command","privRequestSession","isRecognizing","fetchConnection","sendSpeechEvent","createSpeechEventPayload","sendMeetingSpeechEventAsync","createMeetingSpeechEventPayload","processTypeSpecificMessages","connectionMessage","processSpeechMessages","handleRecognizedCallback","result","offset","sessionId","event","recognized","privSuccessCallback","e","privErrorCallback","undefined","error","handleRecognizingCallback","duration","ev","recognizing","cancelRecognition","requestId","cancellationReason","errorCode","properties","setProperty","IsMeetingRecognizer","canceled","cancelEvent","_a","_b","Canceled","_c","sendSpeechContext","getMeetingInfo","payload","getConversationInfo","sendWaveHeader","speechEventJson","JSON","stringify","send","Text","eventDict","id","name","meeting","conversationProperties","attendees","participants","meetingProperties"],"sources":["src/common.speech/TranscriptionServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports.js\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation.js\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}