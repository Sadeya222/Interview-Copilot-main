{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\nimport { DeferralMap, Deferred, MessageType } from \"../common/Exports.js\";\nimport { CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason, SessionEventArgs, VoiceProfileEnrollmentResult, VoiceProfilePhraseResult, VoiceProfileResult, VoiceProfileType } from \"../sdk/Exports.js\";\nimport { CancellationErrorCodePropertyName, ServiceRecognizerBase } from \"./Exports.js\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\n// eslint-disable-next-line max-classes-per-file\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\n    this.privDeferralMap = new DeferralMap();\n    this.privSpeakerAudioSource = audioSource;\n    this.sendPrePayloadJSONOverride = () => this.noOp();\n  }\n  set SpeakerAudioSource(audioSource) {\n    this.privSpeakerAudioSource = audioSource;\n  }\n  processTypeSpecificMessages(connectionMessage) {\n    let processed = false;\n    const resultProps = new PropertyCollection();\n    if (connectionMessage.messageType === MessageType.Text) {\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n    }\n    switch (connectionMessage.path.toLowerCase()) {\n      // Profile management response for create, fetch, delete, reset\n      case \"speaker.profiles\":\n        const response = JSON.parse(connectionMessage.textBody);\n        switch (response.operation.toLowerCase()) {\n          case \"create\":\n            this.handleCreateResponse(response, connectionMessage.requestId);\n            break;\n          case \"delete\":\n          case \"reset\":\n            this.handleResultResponse(response, connectionMessage.requestId);\n            break;\n          case \"fetch\":\n            const enrollmentResponse = JSON.parse(connectionMessage.textBody);\n            this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\n            break;\n          default:\n            break;\n        }\n        processed = true;\n        break;\n      // Activation and authorization phrase response\n      case \"speaker.phrases\":\n        const phraseResponse = JSON.parse(connectionMessage.textBody);\n        this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\n        processed = true;\n        break;\n      // Enrollment response\n      case \"speaker.profile.enrollment\":\n        const enrollmentResponse = JSON.parse(connectionMessage.textBody);\n        const result = new VoiceProfileEnrollmentResult(this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode), !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined, enrollmentResponse.status.reason);\n        if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\n          this.privDeferralMap.complete(connectionMessage.requestId, result);\n        }\n        this.privRequestSession.onSpeechEnded();\n        processed = true;\n        break;\n      default:\n        break;\n    }\n    const defferal = new Deferred();\n    defferal.resolve(processed);\n    return defferal.promise;\n  }\n  // Cancels recognition.\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n    const result = new VoiceProfileEnrollmentResult(ResultReason.Canceled, error, error);\n    if (!!this.privDeferralMap.getId(requestId)) {\n      this.privDeferralMap.complete(requestId, result);\n    }\n  }\n  createProfile(profileType, locale) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n      this.voiceProfileType = profileType.toString();\n      const conPromise = this.connectImpl();\n      try {\n        const createProfileDeferral = new Deferred();\n        yield conPromise;\n        yield this.sendCreateProfile(createProfileDeferral, profileType, locale);\n        void this.receiveMessage();\n        return createProfileDeferral.promise;\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n  resetProfile(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.voiceProfileType = profile.profileType.toString();\n      return this.sendCommonRequest(\"reset\", profile.profileType, profile);\n    });\n  }\n  deleteProfile(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.voiceProfileType = profile.profileType.toString();\n      return this.sendCommonRequest(\"delete\", profile.profileType, profile);\n    });\n  }\n  retrieveEnrollmentResult(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.voiceProfileType = profile.profileType.toString();\n      this.privExpectedProfileId = profile.profileId;\n      return this.sendCommonRequest(\"fetch\", profile.profileType, profile);\n    });\n  }\n  getAllProfiles(profileType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.voiceProfileType = profileType.toString();\n      return this.sendCommonRequest(\"fetch\", profileType);\n    });\n  }\n  getActivationPhrases(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.voiceProfileType = profileType.toString();\n      // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n      const conPromise = this.connectImpl();\n      try {\n        const getPhrasesDeferral = new Deferred();\n        yield conPromise;\n        yield this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\n        void this.receiveMessage();\n        return getPhrasesDeferral.promise;\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n  enrollProfile(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.voiceProfileType = profile.profileType.toString();\n      const enrollmentDeferral = new Deferred();\n      this.privRequestSession.startNewRecognition();\n      this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\n      this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\n      // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n      const conPromise = this.connectImpl();\n      const preAudioPromise = this.sendPreAudioMessages(profile, enrollmentDeferral);\n      const node = yield this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\n      const format = yield this.privSpeakerAudioSource.format;\n      const deviceInfo = yield this.privSpeakerAudioSource.deviceInfo;\n      const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\n      yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n      this.privRecognizerConfig.SpeechServiceConfig.Context.audio = {\n        source: deviceInfo\n      };\n      try {\n        yield conPromise;\n        yield preAudioPromise;\n      } catch (err) {\n        this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err);\n      }\n      const sessionStartEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n      if (!!this.privRecognizer.sessionStarted) {\n        this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n      }\n      void this.receiveMessage();\n      const audioSendPromise = this.sendAudio(audioNode);\n      // /* eslint-disable no-empty */\n      audioSendPromise.then(() => {}, error => {\n        this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n      });\n      return enrollmentDeferral.promise;\n    });\n  }\n  sendPreAudioMessages(profile, enrollmentDeferral) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.fetchConnection();\n      this.privRequestSession.onSpeechContext();\n      this.privDeferralMap.add(this.privRequestSession.requestId, enrollmentDeferral);\n      yield this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\n    });\n  }\n  sendPhrasesRequest(getPhrasesDeferral, profileType, locale) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.fetchConnection();\n      this.privRequestSession.onSpeechContext();\n      this.privDeferralMap.add(this.privRequestSession.requestId, getPhrasesDeferral);\n      const scenario = this.scenarioFrom(profileType);\n      const profileCreateRequest = {\n        locale,\n        scenario\n      };\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speaker.profile.phrases\", this.privRequestSession.requestId, \"application/json; charset=utf-8\", JSON.stringify(profileCreateRequest)));\n    });\n  }\n  sendCreateProfile(createProfileDeferral, profileType, locale) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.fetchConnection();\n      this.privRequestSession.onSpeechContext();\n      this.privDeferralMap.add(this.privRequestSession.requestId, createProfileDeferral);\n      const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" : profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\n      const profileCreateRequest = {\n        locale,\n        number: \"1\",\n        scenario\n      };\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speaker.profile.create\", this.privRequestSession.requestId, \"application/json; charset=utf-8\", JSON.stringify(profileCreateRequest)));\n    });\n  }\n  sendCommonRequest(operation, profileType, profile = undefined) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n      const conPromise = this.connectImpl();\n      try {\n        const deferral = new Deferred();\n        this.privRequestSession.onSpeechContext();\n        yield conPromise;\n        const connection = yield this.fetchConnection();\n        this.privDeferralMap.add(this.privRequestSession.requestId, deferral);\n        yield this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\n        void this.receiveMessage();\n        return deferral.promise;\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n  sendBaseRequest(connection, operation, scenario, profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const profileRequest = {\n        scenario\n      };\n      if (!!profile) {\n        profileRequest.profileIds = [profile.profileId];\n      } else {\n        profileRequest.maxPageSize = -1;\n      }\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, `speaker.profile.${operation}`, this.privRequestSession.requestId, \"application/json; charset=utf-8\", JSON.stringify(profileRequest)));\n    });\n  }\n  extractSpeakerContext(model) {\n    return {\n      features: {\n        interimResult: \"enabled\",\n        progressiveDetection: \"disabled\"\n      },\n      profileIds: model.profileIds,\n      scenario: model.scenario\n    };\n  }\n  handlePhrasesResponse(response, requestId) {\n    if (!!this.privDeferralMap.getId(requestId)) {\n      if (response.status.statusCode.toLowerCase() !== \"success\") {\n        const reason = ResultReason.Canceled;\n        const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\n        this.privDeferralMap.complete(requestId, result);\n      } else if (!!response.phrases && response.phrases.length > 0) {\n        const reason = ResultReason.EnrollingVoiceProfile;\n        const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\n        this.privDeferralMap.complete(requestId, result);\n      } else {\n        throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\n      }\n    } else {\n      throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\n    }\n  }\n  handleCreateResponse(response, requestId) {\n    if (!!response.profiles && response.profiles.length > 0) {\n      if (!!this.privDeferralMap.getId(requestId)) {\n        const profileIds = response.profiles.map(profile => profile.profileId);\n        this.privDeferralMap.complete(requestId, profileIds);\n      } else {\n        throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\n      }\n    } else {\n      throw new Error(\"Voice Profile create failed, no profile id received\");\n    }\n  }\n  handleResultResponse(response, requestId) {\n    if (!!this.privDeferralMap.getId(requestId)) {\n      const successReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\n      const reason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\n      const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\n      this.privDeferralMap.complete(requestId, result);\n    } else {\n      throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\n    }\n  }\n  handleFetchResponse(enrollmentResponse, requestId) {\n    if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\n      if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\n        this.privExpectedProfileId = undefined;\n        const profileInfo = enrollmentResponse.profiles[0];\n        const result = new VoiceProfileEnrollmentResult(this.enrollmentReasonFrom(profileInfo.enrollmentStatus), JSON.stringify(profileInfo), enrollmentResponse.status.reason);\n        this.privDeferralMap.complete(requestId, result);\n      } else if (enrollmentResponse.profiles.length > 0) {\n        const iProfiles = enrollmentResponse.profiles;\n        const profileResults = [];\n        for (const profile of iProfiles) {\n          profileResults.push(new VoiceProfileEnrollmentResult(this.enrollmentReasonFrom(profile.enrollmentStatus), JSON.stringify(profile), enrollmentResponse.status.reason));\n        }\n        this.privDeferralMap.complete(requestId, profileResults);\n      }\n    } else {\n      throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\n    }\n  }\n  enrollmentReasonFrom(statusCode) {\n    switch (statusCode.toLowerCase()) {\n      case \"enrolled\":\n        return ResultReason.EnrolledVoiceProfile;\n      case \"invalidlocale\":\n      case \"invalidphrase\":\n      case \"invalidaudioformat\":\n      case \"invalidscenario\":\n      case \"invalidprofilecount\":\n      case \"invalidoperation\":\n      case \"audiotooshort\":\n      case \"audiotoolong\":\n      case \"toomanyenrollments\":\n      case \"storageconflict\":\n      case \"profilenotfound\":\n      case \"incompatibleprofiles\":\n      case \"incompleteenrollment\":\n        return ResultReason.Canceled;\n      default:\n        return ResultReason.EnrollingVoiceProfile;\n    }\n  }\n  scenarioFrom(profileType) {\n    return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" : profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\n  }\n}","map":{"version":3,"names":["ReplayableAudioNode","DeferralMap","Deferred","MessageType","CancellationErrorCode","CancellationReason","PropertyCollection","PropertyId","ResultReason","SessionEventArgs","VoiceProfileEnrollmentResult","VoiceProfilePhraseResult","VoiceProfileResult","VoiceProfileType","CancellationErrorCodePropertyName","ServiceRecognizerBase","SpeechConnectionMessage","VoiceServiceRecognizer","constructor","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","privDeferralMap","privSpeakerAudioSource","sendPrePayloadJSONOverride","noOp","SpeakerAudioSource","processTypeSpecificMessages","connectionMessage","processed","resultProps","messageType","Text","setProperty","SpeechServiceResponse_JsonResult","textBody","path","toLowerCase","response","JSON","parse","operation","handleCreateResponse","requestId","handleResultResponse","enrollmentResponse","handleFetchResponse","phraseResponse","handlePhrasesResponse","result","enrollmentReasonFrom","enrollment","enrollmentStatus","status","statusCode","stringify","undefined","reason","getId","complete","privRequestSession","onSpeechEnded","defferal","resolve","promise","cancelRecognition","sessionId","cancellationReason","errorCode","error","properties","Canceled","createProfile","profileType","locale","voiceProfileType","toString","conPromise","connectImpl","createProfileDeferral","sendCreateProfile","receiveMessage","err","resetProfile","profile","sendCommonRequest","deleteProfile","retrieveEnrollmentResult","privExpectedProfileId","profileId","getAllProfiles","getActivationPhrases","lang","getPhrasesDeferral","sendPhrasesRequest","enrollProfile","enrollmentDeferral","startNewRecognition","listenForServiceTelemetry","events","privRecognizerConfig","parameters","Speech_SessionId","preAudioPromise","sendPreAudioMessages","node","attach","audioNodeId","format","deviceInfo","audioNode","avgBytesPerSec","onAudioSourceAttachCompleted","SpeechServiceConfig","Context","audio","source","Error","ConnectionFailure","sessionStartEventArgs","privRecognizer","sessionStarted","audioSendPromise","sendAudio","then","RuntimeError","connection","fetchConnection","onSpeechContext","add","sendBaseRequest","scenarioFrom","scenario","profileCreateRequest","send","TextIndependentIdentification","TextIndependentVerification","number","deferral","profileRequest","profileIds","maxPageSize","extractSpeakerContext","model","features","interimResult","progressiveDetection","passPhraseType","phrases","length","EnrollingVoiceProfile","profiles","map","successReason","DeletedVoiceProfile","ResetVoiceProfile","profileInfo","iProfiles","profileResults","push","EnrolledVoiceProfile"],"sources":["src/common.speech/VoiceServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}