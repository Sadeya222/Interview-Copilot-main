{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { TranscriberRecognizer } from \"../../common.speech/Exports.js\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\nimport { Contracts } from \"../Contracts.js\";\nimport { Connection, PropertyCollection, PropertyId } from \"../Exports.js\";\nimport { MeetingImpl } from \"./Exports.js\";\nexport class MeetingTranscriber {\n  /**\n   * MeetingTranscriber constructor.\n   * @constructor\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  constructor(audioConfig) {\n    this.privAudioConfig = audioConfig;\n    this.privProperties = new PropertyCollection();\n    this.privRecognizer = undefined;\n    this.privDisposedRecognizer = false;\n  }\n  /**\n   * Gets the spoken language of recognition.\n   * @member MeetingTranscriber.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} The spoken language of recognition.\n   */\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * The collection of properties and their values defined for this MeetingTranscriber.\n   * @member MeetingTranscriber.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * @Internal\n   * Internal data member to support fromRecognizer* pattern methods on other classes.\n   * Do not use externally, object returned will change without warning or notice.\n   */\n  get internalData() {\n    return this.privRecognizer.internalData;\n  }\n  /**\n   * @Deprecated\n   * @Obsolete\n   * Please use the Connection.fromRecognizer pattern to obtain a connection object\n   */\n  get connection() {\n    return Connection.fromRecognizer(this.privRecognizer);\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member MeetingTranscriber.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member MeetingTranscriber.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * @param {Meeting} meeting - meeting to be recognized\n   */\n  joinMeetingAsync(meeting, cb, err) {\n    /* eslint-disable no-console */\n    // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\n    /* eslint-enable no-console */\n    const meetingImpl = meeting;\n    Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\n    // ref the meeting object\n    // create recognizer and subscribe to recognizer events\n    this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\n    Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\n    this.privRecognizer.connectMeetingCallbacks(this);\n    marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\n  }\n  /**\n   * Starts meeting transcription, until stopTranscribingAsync() is called.\n   * User must subscribe to events to receive transcription results.\n   * @member MeetingTranscriber.prototype.startTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startTranscribingAsync(cb, err) {\n    this.privRecognizer.startContinuousRecognitionAsync(cb, err);\n  }\n  /**\n   * Starts meeting transcription, until stopTranscribingAsync() is called.\n   * User must subscribe to events to receive transcription results.\n   * @member MeetingTranscriber.prototype.stopTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopTranscribingAsync(cb, err) {\n    this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\n  }\n  /**\n   * Leave the current meeting. After this is called, you will no longer receive any events.\n   */\n  leaveMeetingAsync(cb, err) {\n    this.privRecognizer.disconnectCallbacks();\n    // eslint-disable-next-line\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      return;\n    }))(), cb, err);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member MeetingTranscriber.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * Disposes any resources held by the object.\n   * @member MeetingTranscriber.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n  dispose(disposing) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n      if (!!this.privRecognizer) {\n        yield this.privRecognizer.close();\n        this.privRecognizer = undefined;\n      }\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n      }\n    });\n  }\n}","map":{"version":3,"names":["TranscriberRecognizer","marshalPromiseToCallbacks","Contracts","Connection","PropertyCollection","PropertyId","MeetingImpl","MeetingTranscriber","constructor","audioConfig","privAudioConfig","privProperties","privRecognizer","undefined","privDisposedRecognizer","speechRecognitionLanguage","throwIfDisposed","properties","getProperty","SpeechServiceConnection_RecoLanguage","internalData","connection","fromRecognizer","authorizationToken","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","joinMeetingAsync","meeting","cb","err","meetingImpl","throwIfNullOrUndefined","config","connectMeetingCallbacks","connectTranscriberRecognizer","startTranscribingAsync","startContinuousRecognitionAsync","stopTranscribingAsync","stopContinuousRecognitionAsync","leaveMeetingAsync","disconnectCallbacks","__awaiter","close","errorCb","dispose","disposing"],"sources":["src/sdk/Transcription/MeetingTranscriber.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports.js\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports.js\";\r\nimport { Callback, IMeeting } from \"./IMeeting.js\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}