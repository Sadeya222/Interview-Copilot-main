{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unsafe-return */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { InvalidOperationError } from \"./Error.js\";\nimport { createNoDashGuid } from \"./Guid.js\";\nexport var MessageType;\n(function (MessageType) {\n  MessageType[MessageType[\"Text\"] = 0] = \"Text\";\n  MessageType[MessageType[\"Binary\"] = 1] = \"Binary\";\n})(MessageType || (MessageType = {}));\nexport class ConnectionMessage {\n  constructor(messageType, body, headers, id) {\n    this.privBody = null;\n    if (messageType === MessageType.Text && body && !(typeof body === \"string\")) {\n      throw new InvalidOperationError(\"Payload must be a string\");\n    }\n    if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n      throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n    this.privMessageType = messageType;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.privBody = body;\n    this.privHeaders = headers ? headers : {};\n    this.privId = id ? id : createNoDashGuid();\n    switch (this.messageType) {\n      case MessageType.Binary:\n        this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\n        break;\n      case MessageType.Text:\n        this.privSize = this.textBody.length;\n    }\n  }\n  get messageType() {\n    return this.privMessageType;\n  }\n  get headers() {\n    return this.privHeaders;\n  }\n  get body() {\n    return this.privBody;\n  }\n  get textBody() {\n    if (this.privMessageType === MessageType.Binary) {\n      throw new InvalidOperationError(\"Not supported for binary message\");\n    }\n    return this.privBody;\n  }\n  get binaryBody() {\n    if (this.privMessageType === MessageType.Text) {\n      throw new InvalidOperationError(\"Not supported for text message\");\n    }\n    return this.privBody;\n  }\n  get id() {\n    return this.privId;\n  }\n}","map":{"version":3,"names":["InvalidOperationError","createNoDashGuid","MessageType","ConnectionMessage","constructor","messageType","body","headers","id","privBody","Text","Binary","ArrayBuffer","privMessageType","privHeaders","privId","privSize","binaryBody","byteLength","textBody","length"],"sources":["src/common/ConnectionMessage.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,qBAAqB,QAAQ,YAAY;AAClD,SAASC,gBAAgB,QAAQ,WAAW;AAG5C,WAAYC,WAGX;AAHD,WAAYA,WAAW;EACnBA,WAAA,CAAAA,WAAA,sBAAI;EACJA,WAAA,CAAAA,WAAA,0BAAM;AACV,CAAC,EAHWA,WAAW,KAAXA,WAAW;AAKvB,OAAM,MAAOC,iBAAiB;EAS1BC,YACIC,WAAwB,EACxBC,IAAS,EACTC,OAAmC,EACnCC,EAAW;IATP,KAAAC,QAAQ,GAAQ,IAAI;IAWxB,IAAIJ,WAAW,KAAKH,WAAW,CAACQ,IAAI,IAAIJ,IAAI,IAAI,EAAE,OAAQA,IAAK,KAAK,QAAQ,CAAC,EAAE;MAC3E,MAAM,IAAIN,qBAAqB,CAAC,0BAA0B,CAAC;;IAG/D,IAAIK,WAAW,KAAKH,WAAW,CAACS,MAAM,IAAIL,IAAI,IAAI,EAAEA,IAAI,YAAYM,WAAW,CAAC,EAAE;MAC9E,MAAM,IAAIZ,qBAAqB,CAAC,6BAA6B,CAAC;;IAGlE,IAAI,CAACa,eAAe,GAAGR,WAAW;IAClC;IACA,IAAI,CAACI,QAAQ,GAAGH,IAAI;IACpB,IAAI,CAACQ,WAAW,GAAGP,OAAO,GAAGA,OAAO,GAAG,EAAE;IACzC,IAAI,CAACQ,MAAM,GAAGP,EAAE,GAAGA,EAAE,GAAGP,gBAAgB,EAAE;IAC1C,QAAQ,IAAI,CAACI,WAAW;MACpB,KAAKH,WAAW,CAACS,MAAM;QACnB,IAAI,CAACK,QAAQ,GAAG,IAAI,CAACC,UAAU,KAAK,IAAI,GAAG,IAAI,CAACA,UAAU,CAACC,UAAU,GAAG,CAAC;QACzE;MACJ,KAAKhB,WAAW,CAACQ,IAAI;QACjB,IAAI,CAACM,QAAQ,GAAG,IAAI,CAACG,QAAQ,CAACC,MAAM;;EAEhD;EAEA,IAAWf,WAAWA,CAAA;IAClB,OAAO,IAAI,CAACQ,eAAe;EAC/B;EAEA,IAAWN,OAAOA,CAAA;IACd,OAAO,IAAI,CAACO,WAAW;EAC3B;EAEA,IAAWR,IAAIA,CAAA;IACX,OAAO,IAAI,CAACG,QAAQ;EACxB;EAEA,IAAWU,QAAQA,CAAA;IACf,IAAI,IAAI,CAACN,eAAe,KAAKX,WAAW,CAACS,MAAM,EAAE;MAC7C,MAAM,IAAIX,qBAAqB,CAAC,kCAAkC,CAAC;;IAGvE,OAAO,IAAI,CAACS,QAAkB;EAClC;EAEA,IAAWQ,UAAUA,CAAA;IACjB,IAAI,IAAI,CAACJ,eAAe,KAAKX,WAAW,CAACQ,IAAI,EAAE;MAC3C,MAAM,IAAIV,qBAAqB,CAAC,gCAAgC,CAAC;;IAGrE,OAAO,IAAI,CAACS,QAAQ;EACxB;EAEA,IAAWD,EAAEA,CAAA;IACT,OAAO,IAAI,CAACO,MAAM;EACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}