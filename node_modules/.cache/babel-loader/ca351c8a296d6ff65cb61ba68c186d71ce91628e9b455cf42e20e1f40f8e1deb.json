{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { CognitiveSubscriptionKeyAuthentication, CognitiveTokenAuthentication, Context, OS, ServiceRecognizerBase, SpeechServiceConfig } from \"../common.speech/Exports.js\";\nimport { Deferred, marshalPromiseToCallbacks } from \"../common/Exports.js\";\nimport { Contracts } from \"./Contracts.js\";\nimport { AudioConfig, PropertyId } from \"./Exports.js\";\n/**\n * Defines the base class Recognizer which mainly contains common event handlers.\n * @class Recognizer\n */\nexport class Recognizer {\n  /**\n   * Creates and initializes an instance of a Recognizer\n   * @constructor\n   * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\n   * @param {PropertyCollection} properties - A set of properties to set on the recognizer\n   * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\n   */\n  constructor(audioConfig, properties, connectionFactory) {\n    this.audioConfig = audioConfig !== undefined ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\n    this.privDisposed = false;\n    this.privProperties = properties.clone();\n    this.privConnectionFactory = connectionFactory;\n    this.implCommonRecognizerSetup();\n  }\n  /**\n   * Dispose of associated resources.\n   * @member Recognizer.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposed);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * @Internal\n   * Internal data member to support fromRecognizer* pattern methods on other classes.\n   * Do not use externally, object returned will change without warning or notice.\n   */\n  get internalData() {\n    return this.privReco;\n  }\n  /**\n   * This method performs cleanup of resources.\n   * The Boolean parameter disposing indicates whether the method is called\n   * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n   * Derived classes should override this method to dispose resource if needed.\n   * @member Recognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - Flag to request disposal.\n   */\n  dispose(disposing) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposed) {\n        return;\n      }\n      this.privDisposed = true;\n      if (disposing) {\n        if (this.privReco) {\n          yield this.privReco.audioSource.turnOff();\n          yield this.privReco.dispose();\n        }\n      }\n    });\n  }\n  /**\n   * This method returns the current state of the telemetry setting.\n   * @member Recognizer.prototype.telemetryEnabled\n   * @function\n   * @public\n   * @returns true if the telemetry is enabled, false otherwise.\n   */\n  static get telemetryEnabled() {\n    return ServiceRecognizerBase.telemetryDataEnabled;\n  }\n  /**\n   * This method globally enables or disables telemetry.\n   * @member Recognizer.prototype.enableTelemetry\n   * @function\n   * @public\n   * @param enabled - Global setting for telemetry collection.\n   * If set to true, telemetry information like microphone errors,\n   * recognition errors are collected and sent to Microsoft.\n   * If set to false, no telemetry is sent to Microsoft.\n   */\n  static enableTelemetry(enabled) {\n    ServiceRecognizerBase.telemetryDataEnabled = enabled;\n  }\n  // Does the generic recognizer setup that is common across all recognizer types.\n  implCommonRecognizerSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n    const recognizerConfig = this.createRecognizerConfig(new SpeechServiceConfig(new Context(new OS(osPlatform, osName, osVersion))));\n    this.privReco = this.createServiceRecognizer(Recognizer.getAuthFromProperties(this.privProperties), this.privConnectionFactory, this.audioConfig, recognizerConfig);\n  }\n  recognizeOnceAsyncImpl(recognitionMode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposed);\n      const ret = new Deferred();\n      yield this.implRecognizerStop();\n      yield this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\n      const result = yield ret.promise;\n      yield this.implRecognizerStop();\n      return result;\n    });\n  }\n  startContinuousRecognitionAsyncImpl(recognitionMode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposed);\n      yield this.implRecognizerStop();\n      yield this.privReco.recognize(recognitionMode, undefined, undefined);\n    });\n  }\n  stopContinuousRecognitionAsyncImpl() {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposed);\n      yield this.implRecognizerStop();\n    });\n  }\n  implRecognizerStop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privReco) {\n        yield this.privReco.stopRecognizing();\n      }\n      return;\n    });\n  }\n  static getAuthFromProperties(properties) {\n    const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    const authentication = subscriptionKey && subscriptionKey !== \"\" ? new CognitiveSubscriptionKeyAuthentication(subscriptionKey) : new CognitiveTokenAuthentication(() => {\n      const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    }, () => {\n      const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    });\n    return authentication;\n  }\n}","map":{"version":3,"names":["CognitiveSubscriptionKeyAuthentication","CognitiveTokenAuthentication","Context","OS","ServiceRecognizerBase","SpeechServiceConfig","Deferred","marshalPromiseToCallbacks","Contracts","AudioConfig","PropertyId","Recognizer","constructor","audioConfig","properties","connectionFactory","undefined","fromDefaultMicrophoneInput","privDisposed","privProperties","clone","privConnectionFactory","implCommonRecognizerSetup","close","cb","errorCb","throwIfDisposed","dispose","internalData","privReco","disposing","audioSource","turnOff","telemetryEnabled","telemetryDataEnabled","enableTelemetry","enabled","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","createRecognizerConfig","createServiceRecognizer","getAuthFromProperties","recognizeOnceAsyncImpl","recognitionMode","ret","implRecognizerStop","recognize","resolve","reject","result","promise","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsyncImpl","stopRecognizing","subscriptionKey","getProperty","SpeechServiceConnection_Key","authentication","authorizationToken","SpeechServiceAuthorization_Token","Promise"],"sources":["src/sdk/Recognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     * @param {PropertyCollection} properties - A set of properties to set on the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SACIA,sCAAsC,EACtCC,4BAA4B,EAC5BC,OAAO,EAGPC,EAAE,EAGFC,qBAAqB,EACrBC,mBAAmB,QAChB,6BAA6B;AACpC,SACIC,QAAQ,EACRC,yBAAyB,QACtB,sBAAsB;AAC7B,SACIC,SAAS,QACN,gBAAgB;AACvB,SACIC,WAAW,EAEXC,UAAU,QAIP,cAAc;AAErB;;;;AAIA,OAAM,MAAgBC,UAAU;EAO5B;;;;;;;EAOAC,YAAsBC,WAAwB,EAAEC,UAA8B,EAAEC,iBAAqC;IACjH,IAAI,CAACF,WAAW,GAAIA,WAAW,KAAKG,SAAS,GAAIH,WAAW,GAAGJ,WAAW,CAACQ,0BAA0B,EAAE;IACvG,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAI,CAACC,cAAc,GAAGL,UAAU,CAACM,KAAK,EAAE;IACxC,IAAI,CAACC,qBAAqB,GAAGN,iBAAiB;IAC9C,IAAI,CAACO,yBAAyB,EAAE;EACpC;EAkCA;;;;;;EAMOC,KAAKA,CAACC,EAAe,EAAEC,OAAiC;IAC3DjB,SAAS,CAACkB,eAAe,CAAC,IAAI,CAACR,YAAY,CAAC;IAC5CX,yBAAyB,CAAC,IAAI,CAACoB,OAAO,CAAC,IAAI,CAAC,EAAEH,EAAE,EAAEC,OAAO,CAAC;EAC9D;EAEA;;;;;EAKA,IAAWG,YAAYA,CAAA;IACnB,OAAO,IAAI,CAACC,QAAQ;EACxB;EAEA;;;;;;;;;;EAUgBF,OAAOA,CAACG,SAAkB;;MACtC,IAAI,IAAI,CAACZ,YAAY,EAAE;QACnB;;MAGJ,IAAI,CAACA,YAAY,GAAG,IAAI;MAExB,IAAIY,SAAS,EAAE;QACX,IAAI,IAAI,CAACD,QAAQ,EAAE;UACf,MAAM,IAAI,CAACA,QAAQ,CAACE,WAAW,CAACC,OAAO,EAAE;UACzC,MAAM,IAAI,CAACH,QAAQ,CAACF,OAAO,EAAE;;;IAGzC,CAAC;;EAED;;;;;;;EAOO,WAAWM,gBAAgBA,CAAA;IAC9B,OAAO7B,qBAAqB,CAAC8B,oBAAoB;EACrD;EAEA;;;;;;;;;;EAUO,OAAOC,eAAeA,CAACC,OAAgB;IAC1ChC,qBAAqB,CAAC8B,oBAAoB,GAAGE,OAAO;EACxD;EAiBA;EACUd,yBAAyBA,CAAA;IAE/B,IAAIe,UAAU,GAAI,OAAOC,MAAM,KAAK,WAAW,GAAI,SAAS,GAAG,MAAM;IACrE,IAAIC,MAAM,GAAG,SAAS;IACtB,IAAIC,SAAS,GAAG,SAAS;IAEzB,IAAI,OAAOC,SAAS,KAAK,WAAW,EAAE;MAClCJ,UAAU,GAAGA,UAAU,GAAG,GAAG,GAAGI,SAAS,CAACC,QAAQ;MAClDH,MAAM,GAAGE,SAAS,CAACE,SAAS;MAC5BH,SAAS,GAAGC,SAAS,CAACG,UAAU;;IAGpC,MAAMC,gBAAgB,GAAG,IAAI,CAACC,sBAAsB,CAChD,IAAIzC,mBAAmB,CACnB,IAAIH,OAAO,CAAC,IAAIC,EAAE,CAACkC,UAAU,EAAEE,MAAM,EAAEC,SAAS,CAAC,CAAC,CAAC,CAAC;IAE5D,IAAI,CAACX,QAAQ,GAAG,IAAI,CAACkB,uBAAuB,CACxCpC,UAAU,CAACqC,qBAAqB,CAAC,IAAI,CAAC7B,cAAc,CAAC,EACrD,IAAI,CAACE,qBAAqB,EAC1B,IAAI,CAACR,WAAW,EAChBgC,gBAAgB,CAAC;EACzB;EAEgBI,sBAAsBA,CAACC,eAAgC;;MACnE1C,SAAS,CAACkB,eAAe,CAAC,IAAI,CAACR,YAAY,CAAC;MAC5C,MAAMiC,GAAG,GAAsC,IAAI7C,QAAQ,EAA2B;MAEtF,MAAM,IAAI,CAAC8C,kBAAkB,EAAE;MAC/B,MAAM,IAAI,CAACvB,QAAQ,CAACwB,SAAS,CAACH,eAAe,EAAEC,GAAG,CAACG,OAAO,EAAEH,GAAG,CAACI,MAAM,CAAC;MACvE,MAAMC,MAAM,GAA4B,MAAML,GAAG,CAACM,OAAO;MACzD,MAAM,IAAI,CAACL,kBAAkB,EAAE;MAE/B,OAAOI,MAAM;IAEjB,CAAC;;EAEeE,mCAAmCA,CAACR,eAAgC;;MAChF1C,SAAS,CAACkB,eAAe,CAAC,IAAI,CAACR,YAAY,CAAC;MAE5C,MAAM,IAAI,CAACkC,kBAAkB,EAAE;MAC/B,MAAM,IAAI,CAACvB,QAAQ,CAACwB,SAAS,CAACH,eAAe,EAAElC,SAAS,EAAEA,SAAS,CAAC;IACxE,CAAC;;EAEe2C,kCAAkCA,CAAA;;MAC9CnD,SAAS,CAACkB,eAAe,CAAC,IAAI,CAACR,YAAY,CAAC;MAC5C,MAAM,IAAI,CAACkC,kBAAkB,EAAE;IACnC,CAAC;;EAEeA,kBAAkBA,CAAA;;MAC9B,IAAI,IAAI,CAACvB,QAAQ,EAAE;QACf,MAAM,IAAI,CAACA,QAAQ,CAAC+B,eAAe,EAAE;;MAEzC;IACJ,CAAC;;EAES,OAAOZ,qBAAqBA,CAAClC,UAA8B;IACjE,MAAM+C,eAAe,GAAG/C,UAAU,CAACgD,WAAW,CAACpD,UAAU,CAACqD,2BAA2B,EAAE/C,SAAS,CAAC;IACjG,MAAMgD,cAAc,GAAIH,eAAe,IAAIA,eAAe,KAAK,EAAE,GAC7D,IAAI7D,sCAAsC,CAAC6D,eAAe,CAAC,GAC3D,IAAI5D,4BAA4B,CAC5B,MAAsB;MAClB,MAAMgE,kBAAkB,GAAGnD,UAAU,CAACgD,WAAW,CAACpD,UAAU,CAACwD,gCAAgC,EAAElD,SAAS,CAAC;MACzG,OAAOmD,OAAO,CAACb,OAAO,CAACW,kBAAkB,CAAC;IAC9C,CAAC,EACD,MAAsB;MAClB,MAAMA,kBAAkB,GAAGnD,UAAU,CAACgD,WAAW,CAACpD,UAAU,CAACwD,gCAAgC,EAAElD,SAAS,CAAC;MACzG,OAAOmD,OAAO,CAACb,OAAO,CAACW,kBAAkB,CAAC;IAC9C,CAAC,CAAC;IAEV,OAAOD,cAAc;EACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}