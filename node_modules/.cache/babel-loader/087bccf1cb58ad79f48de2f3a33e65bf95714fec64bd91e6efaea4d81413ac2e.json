{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable max-classes-per-file */\nimport { createNoDashGuid, Stream } from \"../../common/Exports.js\";\nimport { Contracts } from \"../Contracts.js\";\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @class AudioOutputStream\n */\nexport class AudioOutputStream {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  constructor() {\n    return;\n  }\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member AudioOutputStream.createPullStream\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The audio output stream being created.\n   */\n  static createPullStream() {\n    return PullAudioOutputStream.create();\n  }\n}\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @class PullAudioOutputStream\n */\nexport class PullAudioOutputStream extends AudioOutputStream {\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member PullAudioOutputStream.create\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The push audio output stream being created.\n   */\n  static create() {\n    return new PullAudioOutputStreamImpl();\n  }\n}\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @private\n * @class PullAudioOutputStreamImpl\n */\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream {\n  /**\n   * Creates and initializes an instance with the given values.\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.privId = createNoDashGuid();\n    this.privStream = new Stream();\n  }\n  /**\n   * Sets the format information to the stream. For internal use only.\n   * @param {AudioStreamFormat} format - the format to be set.\n   */\n  set format(format) {\n    if (format === undefined || format === null) {\n      this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\n    }\n    this.privFormat = format;\n  }\n  /**\n   * Format information for the audio\n   */\n  get format() {\n    return this.privFormat;\n  }\n  /**\n   * Checks if the stream is closed\n   * @member PullAudioOutputStreamImpl.prototype.isClosed\n   * @property\n   * @public\n   */\n  get isClosed() {\n    return this.privStream.isClosed;\n  }\n  /**\n   * Gets the id of the stream\n   * @member PullAudioOutputStreamImpl.prototype.id\n   * @property\n   * @public\n   */\n  id() {\n    return this.privId;\n  }\n  /**\n   * Reads audio data from the internal buffer.\n   * @member PullAudioOutputStreamImpl.prototype.read\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n   * @returns {Promise<number>} - Audio buffer length has been read.\n   */\n  read(dataBuffer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const intView = new Int8Array(dataBuffer);\n      let totalBytes = 0;\n      if (this.privLastChunkView !== undefined) {\n        if (this.privLastChunkView.length > dataBuffer.byteLength) {\n          intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n          this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n          return Promise.resolve(dataBuffer.byteLength);\n        }\n        intView.set(this.privLastChunkView);\n        totalBytes = this.privLastChunkView.length;\n        this.privLastChunkView = undefined;\n      }\n      // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n      while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\n        const chunk = yield this.privStream.read();\n        if (chunk !== undefined && !chunk.isEnd) {\n          let tmpBuffer;\n          if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n            tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n            this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n          } else {\n            tmpBuffer = chunk.buffer;\n          }\n          intView.set(new Int8Array(tmpBuffer), totalBytes);\n          totalBytes += tmpBuffer.byteLength;\n        } else {\n          this.privStream.readEnded();\n        }\n      }\n      return totalBytes;\n    });\n  }\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PullAudioOutputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n  write(dataBuffer) {\n    Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  }\n  /**\n   * Closes the stream.\n   * @member PullAudioOutputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    this.privStream.close();\n  }\n}\n/*\n * Represents audio output stream used for custom audio output configurations.\n * @class PushAudioOutputStream\n */\nexport class PushAudioOutputStream extends AudioOutputStream {\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * write() and close() methods.\n   * @member PushAudioOutputStream.create\n   * @function\n   * @public\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   * derived from PushAudioOutputStreamCallback\n   * @returns {PushAudioOutputStream} The push audio output stream being created.\n   */\n  static create(callback) {\n    return new PushAudioOutputStreamImpl(callback);\n  }\n}\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @private\n * @class PushAudioOutputStreamImpl\n */\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream {\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * read() and close() methods.\n   * @constructor\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   * derived from PushAudioOutputStreamCallback\n   */\n  constructor(callback) {\n    super();\n    this.privId = createNoDashGuid();\n    this.privCallback = callback;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  set format(format) {}\n  write(buffer) {\n    if (!!this.privCallback.write) {\n      this.privCallback.write(buffer);\n    }\n  }\n  close() {\n    if (!!this.privCallback.close) {\n      this.privCallback.close();\n    }\n  }\n  id() {\n    return this.privId;\n  }\n}","map":{"version":3,"names":["createNoDashGuid","Stream","Contracts","AudioOutputFormatImpl","AudioOutputStream","constructor","createPullStream","PullAudioOutputStream","create","PullAudioOutputStreamImpl","privId","privStream","format","undefined","privFormat","getDefaultOutputFormat","isClosed","id","read","dataBuffer","intView","Int8Array","totalBytes","privLastChunkView","length","byteLength","set","slice","Promise","resolve","isReadEnded","chunk","isEnd","tmpBuffer","buffer","readEnded","write","throwIfNullOrUndefined","writeStreamChunk","timeReceived","Date","now","close","PushAudioOutputStream","callback","PushAudioOutputStreamImpl","privCallback"],"sources":["src/sdk/Audio/AudioOutputStream.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}