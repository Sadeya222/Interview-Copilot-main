{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { RecognizerConfig, VoiceProfileConnectionFactory, VoiceServiceRecognizer } from \"../common.speech/Exports.js\";\nimport { AudioConfig } from \"./Audio/AudioConfig.js\";\nimport { Contracts } from \"./Contracts.js\";\nimport { AudioInputStream, PropertyId, Recognizer, ResultReason, VoiceProfile, VoiceProfileResult } from \"./Exports.js\";\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\nexport class VoiceProfileClient extends Recognizer {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  constructor(speechConfig) {\n    Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.privVoiceAdapter = this.privReco;\n    this.privDisposedVoiceAdapter = false;\n  }\n  /**\n   * The collection of properties and their values defined for this VoiceProfileClient.\n   * @member VoiceProfileClient.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\n   */\n  createProfileAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const profileIds = yield this.privVoiceAdapter.createProfile(profileType, lang);\n      return new VoiceProfile(profileIds[0], profileType);\n    });\n  }\n  /**\n   * Get current information of a voice profile\n   * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to retrieve info for\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n  retrieveEnrollmentResultAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\n    });\n  }\n  /**\n   * Get all voice profiles on account with given voice profile type\n   * @member VoiceProfileClient.prototype.getAllProfilesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n   * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\n   */\n  getAllProfilesAsync(profileType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.getAllProfiles(profileType);\n      /*\n      const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\n      if (profileType === VoiceProfileType.TextIndependentIdentification) {\n          return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\n      }\n      return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\n      */\n    });\n  }\n  /**\n   * Get valid authorization phrases for voice profile enrollment\n   * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\n   * @param {string} lang Language string (locale) for Voice Profile\n   */\n  getActivationPhrasesAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\n    });\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n  enrollProfileAsync(profile, audioConfig) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const configImpl = audioConfig;\n      Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n      this.audioConfig = audioConfig;\n      this.privVoiceAdapter.SpeakerAudioSource = configImpl;\n      return this.privVoiceAdapter.enrollProfile(profile);\n    });\n  }\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n  deleteProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.deleteProfile(profile);\n    });\n  }\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n  resetProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.resetProfile(profile);\n    });\n  }\n  /**\n   * Clean up object and close underlying connection\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @async\n   * @public\n   */\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.dispose(true);\n    });\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioImpl = audioConfig;\n    return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  }\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedVoiceAdapter) {\n        return;\n      }\n      this.privDisposedVoiceAdapter = true;\n      if (disposing) {\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n  getResult(result, successReason) {\n    const response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n    return response;\n  }\n}","map":{"version":3,"names":["RecognizerConfig","VoiceProfileConnectionFactory","VoiceServiceRecognizer","AudioConfig","Contracts","AudioInputStream","PropertyId","Recognizer","ResultReason","VoiceProfile","VoiceProfileResult","VoiceProfileClient","constructor","speechConfig","throwIfNullOrUndefined","speechConfigImpl","throwIfNull","fromStreamInput","createPushStream","properties","privProperties","clone","privVoiceAdapter","privReco","privDisposedVoiceAdapter","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","createProfileAsync","profileType","lang","profileIds","createProfile","retrieveEnrollmentResultAsync","profile","retrieveEnrollmentResult","getAllProfilesAsync","getAllProfiles","getActivationPhrasesAsync","getActivationPhrases","enrollProfileAsync","audioConfig","configImpl","SpeakerAudioSource","enrollProfile","deleteProfileAsync","deleteProfile","resetProfileAsync","resetProfile","close","dispose","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioImpl","disposing","_super","call","createRecognizerConfig","getResult","result","successReason","response","ok","Canceled","statusText"],"sources":["src/sdk/VoiceProfileClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,SAGIA,gBAAgB,EAGhBC,6BAA6B,EAC7BC,sBAAsB,QACnB,6BAA6B;AACpC,SAASC,WAAW,QAAyB,wBAAwB;AACrE,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SACIC,gBAAgB,EAEhBC,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,YAAY,EAGZC,kBAAkB,QAEf,cAAc;AAGrB;;;;;AAKA,OAAM,MAAOC,kBAAmB,SAAQJ,UAAU;EAK9C;;;;;EAKAK,YAAmBC,YAA0B;IACzCT,SAAS,CAACU,sBAAsB,CAACD,YAAY,EAAE,cAAc,CAAC;IAC9D,MAAME,gBAAgB,GAAqBF,YAAgC;IAC3ET,SAAS,CAACY,WAAW,CAACD,gBAAgB,EAAE,cAAc,CAAC;IAEvD,KAAK,CAACZ,WAAW,CAACc,eAAe,CAACZ,gBAAgB,CAACa,gBAAgB,EAAE,CAAC,EAAEH,gBAAgB,CAACI,UAAU,EAAE,IAAIlB,6BAA6B,EAAE,CAAC;IAEzI,IAAI,CAACmB,cAAc,GAAGL,gBAAgB,CAACI,UAAU,CAACE,KAAK,EAAE;IACzD,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACC,QAAkC;IAC/D,IAAI,CAACC,wBAAwB,GAAG,KAAK;EACzC;EAEA;;;;;;;EAOA,IAAWL,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACC,cAAc;EAC9B;EAEA;;;;;;;EAOA,IAAWK,kBAAkBA,CAAA;IACzB,OAAO,IAAI,CAACN,UAAU,CAACO,WAAW,CAACpB,UAAU,CAACqB,gCAAgC,CAAC;EACnF;EAEA;;;;;;;EAOA,IAAWF,kBAAkBA,CAACG,KAAa;IACvCxB,SAAS,CAACyB,uBAAuB,CAACD,KAAK,EAAE,OAAO,CAAC;IACjD,IAAI,CAACT,UAAU,CAACW,WAAW,CAACxB,UAAU,CAACqB,gCAAgC,EAAEC,KAAK,CAAC;EACnF;EAEA;;;;;;;;;;EAUaG,kBAAkBA,CAACC,WAA6B,EAAEC,IAAY;;MACvE,MAAMC,UAAU,GAAa,MAAM,IAAI,CAACZ,gBAAgB,CAACa,aAAa,CAACH,WAAW,EAAEC,IAAI,CAAC;MACzF,OAAO,IAAIxB,YAAY,CAACyB,UAAU,CAAC,CAAC,CAAC,EAAEF,WAAW,CAAC;IACvD,CAAC;;EAED;;;;;;;;;EASaI,6BAA6BA,CAACC,OAAqB;;MAC5D,OAAO,IAAI,CAACf,gBAAgB,CAACgB,wBAAwB,CAACD,OAAO,CAAC;IAClE,CAAC;;EAED;;;;;;;;;EASaE,mBAAmBA,CAACP,WAA6B;;MAC1D,OAAO,IAAI,CAACV,gBAAgB,CAACkB,cAAc,CAACR,WAAW,CAAC;MACxD;;;;;;;IAOJ,CAAC;;EAED;;;;;;;;;EASaS,yBAAyBA,CAACT,WAA6B,EAAEC,IAAY;;MAC9E,OAAO,IAAI,CAACX,gBAAgB,CAACoB,oBAAoB,CAACV,WAAW,EAAEC,IAAI,CAAC;IACxE,CAAC;;EAED;;;;;;;;;;EAUaU,kBAAkBA,CAACN,OAAqB,EAAEO,WAAwB;;MAC3E,MAAMC,UAAU,GAAoBD,WAA8B;MAClExC,SAAS,CAACU,sBAAsB,CAAC+B,UAAU,EAAE,aAAa,CAAC;MAC3D,IAAI,CAACD,WAAW,GAAGA,WAAW;MAC9B,IAAI,CAACtB,gBAAgB,CAACwB,kBAAkB,GAAGD,UAAU;MAErD,OAAO,IAAI,CAACvB,gBAAgB,CAACyB,aAAa,CAACV,OAAO,CAAC;IACvD,CAAC;;EAED;;;;;;;;;EASaW,kBAAkBA,CAACX,OAAqB;;MACjD,OAAO,IAAI,CAACf,gBAAgB,CAAC2B,aAAa,CAACZ,OAAO,CAAC;IACvD,CAAC;;EAED;;;;;;;;;EASaa,iBAAiBA,CAACb,OAAqB;;MAChD,OAAO,IAAI,CAACf,gBAAgB,CAAC6B,YAAY,CAACd,OAAO,CAAC;IACtD,CAAC;;EAED;;;;;;;EAOae,KAAKA,CAAA;;MACd,MAAM,IAAI,CAACC,OAAO,CAAC,IAAI,CAAC;IAC5B,CAAC;;EAESC,uBAAuBA,CAACC,cAA+B,EAAEC,iBAAqC,EAAEZ,WAAwB,EAAEa,gBAAkC;IAClK,MAAMC,SAAS,GAAoBd,WAA8B;IACjE,OAAO,IAAI1C,sBAAsB,CAACqD,cAAc,EAAEC,iBAAiB,EAAEE,SAAS,EAAED,gBAAgB,EAAE,IAAI,CAAC;EAC3G;EAEgBJ,OAAOA,CAACM,SAAkB;;;;;;;MACtC,IAAI,IAAI,CAACnC,wBAAwB,EAAE;QAC/B;;MAGJ,IAAI,CAACA,wBAAwB,GAAG,IAAI;MAEpC,IAAImC,SAAS,EAAE;QACX,MAAMC,MAAA,CAAMP,OAAO,CAAAQ,IAAA,OAACF,SAAS,CAAC;;IAEtC,CAAC;;EAESG,sBAAsBA,CAACjD,YAAiC;IAC9D,OAAO,IAAIb,gBAAgB,CAACa,YAAY,EAAE,IAAI,CAACM,UAAU,CAAC;EAC9D;EAEQ4C,SAASA,CAACC,MAAqB,EAAEC,aAA2B;IAChE,MAAMC,QAAQ,GACV,IAAIxD,kBAAkB,CAClBsD,MAAM,CAACG,EAAE,GAAGF,aAAa,GAAGzD,YAAY,CAAC4D,QAAQ,EACjDJ,MAAM,CAACK,UAAU,CACpB;IACL,OAAQH,QAAQ;EACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}