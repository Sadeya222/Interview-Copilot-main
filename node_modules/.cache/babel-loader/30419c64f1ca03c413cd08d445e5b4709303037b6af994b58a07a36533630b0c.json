{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports.js\";\nimport { StringUtils } from \"../common/StringUtils.js\";\nimport { PropertyId } from \"../sdk/Exports.js\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\nimport { RecognitionMode, WebsocketMessageFormatter } from \"./Exports.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    const endpoint = this.getEndpointUrl(config);\n    const queryParams = {};\n    if (config.autoDetectSourceLanguages !== undefined) {\n      queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n    }\n    this.setQueryParams(queryParams, config, endpoint);\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n  getEndpointUrl(config, returnRegionPlaceholder) {\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    let endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    if (!endpointUrl) {\n      if (config.autoDetectSourceLanguages !== undefined) {\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\n        endpointUrl = host + \"/speech/universal/v2\";\n      } else {\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\n        endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\n      }\n    }\n    if (returnRegionPlaceholder === true) {\n      return endpointUrl;\n    }\n    return StringUtils.formatString(endpointUrl, {\n      region\n    });\n  }\n  setQueryParams(queryParams, config, endpointUrl) {\n    queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\n    queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" : config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\n    this.setCommonUrlParams(config, queryParams, endpointUrl);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, QueryParameterNames.StableTranslation, config, queryParams, endpointUrl);\n    const translationVoice = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n    if (translationVoice !== undefined) {\n      queryParams.voice = translationVoice;\n      queryParams.features = \"texttospeech\";\n    }\n  }\n}","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","StringUtils","PropertyId","ConnectionFactoryBase","RecognitionMode","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","TranslationConnectionFactory","create","config","authInfo","connectionId","endpoint","getEndpointUrl","queryParams","autoDetectSourceLanguages","undefined","EnableLanguageId","setQueryParams","headers","token","headerName","ConnectionId","parameters","setProperty","SpeechServiceConnection_Url","enableCompression","getProperty","fromRecognizerConfig","returnRegionPlaceholder","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","endpointUrl","SpeechServiceConnection_Endpoint","host","SpeechServiceConnection_Host","formatString","from","SpeechServiceConnection_RecoLanguage","to","SpeechServiceConnection_TranslationToLanguages","scenario","recognitionMode","Interactive","Conversation","setCommonUrlParams","setUrlParameter","SpeechServiceResponse_TranslationRequestStablePartialResult","StableTranslation","translationVoice","SpeechServiceConnection_TranslationVoice","voice","features"],"sources":["src/common.speech/TranslationConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports.js\";\r\nimport { StringUtils } from \"../common/StringUtils.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            if (config.autoDetectSourceLanguages !== undefined) {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/universal/v2\";\r\n            } else {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n            }\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}