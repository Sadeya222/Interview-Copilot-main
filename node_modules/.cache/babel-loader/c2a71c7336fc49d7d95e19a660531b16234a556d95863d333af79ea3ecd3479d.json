{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, ConnectionMessage } from \"../common/Exports.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\nexport class SpeechConnectionMessage extends ConnectionMessage {\n  constructor(messageType, path, requestId, contentType, body, streamId, additionalHeaders, id) {\n    if (!path) {\n      throw new ArgumentNullError(\"path\");\n    }\n    if (!requestId) {\n      throw new ArgumentNullError(\"requestId\");\n    }\n    const headers = {};\n    headers[HeaderNames.Path] = path;\n    headers[HeaderNames.RequestId] = requestId;\n    headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\n    if (contentType) {\n      headers[HeaderNames.ContentType] = contentType;\n    }\n    if (streamId) {\n      headers[HeaderNames.RequestStreamId] = streamId;\n    }\n    if (additionalHeaders) {\n      for (const headerName in additionalHeaders) {\n        if (headerName) {\n          headers[headerName] = additionalHeaders[headerName];\n        }\n      }\n    }\n    if (id) {\n      super(messageType, body, headers, id);\n    } else {\n      super(messageType, body, headers);\n    }\n    this.privPath = path;\n    this.privRequestId = requestId;\n    this.privContentType = contentType;\n    this.privStreamId = streamId;\n    this.privAdditionalHeaders = additionalHeaders;\n  }\n  get path() {\n    return this.privPath;\n  }\n  get requestId() {\n    return this.privRequestId;\n  }\n  get contentType() {\n    return this.privContentType;\n  }\n  get streamId() {\n    return this.privStreamId;\n  }\n  get additionalHeaders() {\n    return this.privAdditionalHeaders;\n  }\n  static fromConnectionMessage(message) {\n    let path = null;\n    let requestId = null;\n    let contentType = null;\n    // let requestTimestamp = null;\n    let streamId = null;\n    const additionalHeaders = {};\n    if (message.headers) {\n      for (const headerName in message.headers) {\n        if (headerName) {\n          if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\n            path = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\n            requestId = message.headers[headerName];\n            // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\n            //  requestTimestamp = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\n            contentType = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\n            streamId = message.headers[headerName];\n          } else {\n            additionalHeaders[headerName] = message.headers[headerName];\n          }\n        }\n      }\n    }\n    return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, streamId, additionalHeaders, message.id);\n  }\n}","map":{"version":3,"names":["ArgumentNullError","ConnectionMessage","HeaderNames","SpeechConnectionMessage","constructor","messageType","path","requestId","contentType","body","streamId","additionalHeaders","id","headers","Path","RequestId","RequestTimestamp","Date","toISOString","ContentType","RequestStreamId","headerName","privPath","privRequestId","privContentType","privStreamId","privAdditionalHeaders","fromConnectionMessage","message","toLowerCase"],"sources":["src/common.speech/SpeechConnectionMessage.Internal.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SAASA,iBAAiB,EAAEC,iBAAiB,QAAwC,sBAAsB;AAC3G,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAM,MAAOC,uBAAwB,SAAQF,iBAAiB;EAQ1DG,YACIC,WAAwB,EACxBC,IAAY,EACZC,SAAiB,EACjBC,WAAmB,EACnBC,IAAS,EACTC,QAAiB,EACjBC,iBAA6C,EAC7CC,EAAW;IAEX,IAAI,CAACN,IAAI,EAAE;MACP,MAAM,IAAIN,iBAAiB,CAAC,MAAM,CAAC;;IAGvC,IAAI,CAACO,SAAS,EAAE;MACZ,MAAM,IAAIP,iBAAiB,CAAC,WAAW,CAAC;;IAG5C,MAAMa,OAAO,GAA8B,EAAE;IAC7CA,OAAO,CAACX,WAAW,CAACY,IAAI,CAAC,GAAGR,IAAI;IAChCO,OAAO,CAACX,WAAW,CAACa,SAAS,CAAC,GAAGR,SAAS;IAC1CM,OAAO,CAACX,WAAW,CAACc,gBAAgB,CAAC,GAAG,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;IAChE,IAAIV,WAAW,EAAE;MACbK,OAAO,CAACX,WAAW,CAACiB,WAAW,CAAC,GAAGX,WAAW;;IAGlD,IAAIE,QAAQ,EAAE;MACVG,OAAO,CAACX,WAAW,CAACkB,eAAe,CAAC,GAAGV,QAAQ;;IAGnD,IAAIC,iBAAiB,EAAE;MACnB,KAAK,MAAMU,UAAU,IAAIV,iBAAiB,EAAE;QACxC,IAAIU,UAAU,EAAE;UACZR,OAAO,CAACQ,UAAU,CAAC,GAAGV,iBAAiB,CAACU,UAAU,CAAC;;;;IAM/D,IAAIT,EAAE,EAAE;MACJ,KAAK,CAACP,WAAW,EAAEI,IAAI,EAAEI,OAAO,EAAED,EAAE,CAAC;KACxC,MAAM;MACH,KAAK,CAACP,WAAW,EAAEI,IAAI,EAAEI,OAAO,CAAC;;IAGrC,IAAI,CAACS,QAAQ,GAAGhB,IAAI;IACpB,IAAI,CAACiB,aAAa,GAAGhB,SAAS;IAC9B,IAAI,CAACiB,eAAe,GAAGhB,WAAW;IAClC,IAAI,CAACiB,YAAY,GAAGf,QAAQ;IAC5B,IAAI,CAACgB,qBAAqB,GAAGf,iBAAiB;EAClD;EAEA,IAAWL,IAAIA,CAAA;IACX,OAAO,IAAI,CAACgB,QAAQ;EACxB;EAEA,IAAWf,SAASA,CAAA;IAChB,OAAO,IAAI,CAACgB,aAAa;EAC7B;EAEA,IAAWf,WAAWA,CAAA;IAClB,OAAO,IAAI,CAACgB,eAAe;EAC/B;EAEA,IAAWd,QAAQA,CAAA;IACf,OAAO,IAAI,CAACe,YAAY;EAC5B;EAEA,IAAWd,iBAAiBA,CAAA;IACxB,OAAO,IAAI,CAACe,qBAAqB;EACrC;EAEO,OAAOC,qBAAqBA,CAACC,OAA0B;IAC1D,IAAItB,IAAI,GAAG,IAAI;IACf,IAAIC,SAAS,GAAG,IAAI;IACpB,IAAIC,WAAW,GAAG,IAAI;IACtB;IACA,IAAIE,QAAQ,GAAG,IAAI;IACnB,MAAMC,iBAAiB,GAA8B,EAAE;IAEvD,IAAIiB,OAAO,CAACf,OAAO,EAAE;MACjB,KAAK,MAAMQ,UAAU,IAAIO,OAAO,CAACf,OAAO,EAAE;QACtC,IAAIQ,UAAU,EAAE;UACZ,IAAIA,UAAU,CAACQ,WAAW,EAAE,KAAK3B,WAAW,CAACY,IAAI,CAACe,WAAW,EAAE,EAAE;YAC7DvB,IAAI,GAAGsB,OAAO,CAACf,OAAO,CAACQ,UAAU,CAAC;WACrC,MAAM,IAAIA,UAAU,CAACQ,WAAW,EAAE,KAAK3B,WAAW,CAACa,SAAS,CAACc,WAAW,EAAE,EAAE;YACzEtB,SAAS,GAAGqB,OAAO,CAACf,OAAO,CAACQ,UAAU,CAAC;YAC3C;YACG;WACF,MAAM,IAAIA,UAAU,CAACQ,WAAW,EAAE,KAAK3B,WAAW,CAACiB,WAAW,CAACU,WAAW,EAAE,EAAE;YAC3ErB,WAAW,GAAGoB,OAAO,CAACf,OAAO,CAACQ,UAAU,CAAC;WAC5C,MAAM,IAAIA,UAAU,CAACQ,WAAW,EAAE,KAAK3B,WAAW,CAACkB,eAAe,CAACS,WAAW,EAAE,EAAE;YAC/EnB,QAAQ,GAAGkB,OAAO,CAACf,OAAO,CAACQ,UAAU,CAAC;WACzC,MAAM;YACHV,iBAAiB,CAACU,UAAU,CAAC,GAAGO,OAAO,CAACf,OAAO,CAACQ,UAAU,CAAC;;;;;IAM3E,OAAO,IAAIlB,uBAAuB,CAC9ByB,OAAO,CAACvB,WAAW,EACnBC,IAAI,EACJC,SAAS,EACTC,WAAW,EACXoB,OAAO,CAACnB,IAAI,EACZC,QAAQ,EACRC,iBAAiB,EACjBiB,OAAO,CAAChB,EAAE,CAAC;EACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}