{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file */\nimport { Contracts } from \"./Contracts.js\";\nimport { PropertyId } from \"./Exports.js\";\nexport class ContentAssessmentResult {\n  /**\n   * @Internal\n   * Do not use externally.\n   */\n  constructor(detailResult) {\n    this.privPronJson = detailResult;\n  }\n  /**\n   * Correctness in using grammar and variety of sentence patterns.\n   * Grammatical errors are jointly evaluated by lexical accuracy,\n   * grammatical accuracy and diversity of sentence structures.\n   * @member ContentAssessmentResult.prototype.grammarScore\n   * @function\n   * @public\n   * @returns {number} Grammar score.\n   */\n  get grammarScore() {\n    return this.privPronJson.ContentAssessment.GrammarScore;\n  }\n  /**\n   * Proficiency in lexical usage. It evaluates the speaker's effective usage\n   * of words and their appropriateness within the given context to express\n   * ideas accurately, as well as level of lexical complexity.\n   * @member ContentAssessmentResult.prototype.vocabularyScore\n   * @function\n   * @public\n   * @returns {number} Vocabulary score.\n   */\n  get vocabularyScore() {\n    return this.privPronJson.ContentAssessment.VocabularyScore;\n  }\n  /**\n   * Level of understanding and engagement with the topic, which provides\n   * insights into the speaker’s ability to express their thoughts and ideas\n   * effectively and the ability to engage with the topic.\n   * @member ContentAssessmentResult.prototype.topicScore\n   * @function\n   * @public\n   * @returns {number} Topic score.\n   */\n  get topicScore() {\n    return this.privPronJson.ContentAssessment.TopicScore;\n  }\n}\n/**\n * Pronunciation assessment results.\n * @class PronunciationAssessmentResult\n * Added in version 1.15.0.\n */\nexport class PronunciationAssessmentResult {\n  constructor(jsonString) {\n    const j = JSON.parse(jsonString);\n    Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\n    this.privPronJson = j.NBest[0];\n  }\n  /**\n   * @member PronunciationAssessmentResult.fromResult\n   * @function\n   * @public\n   * @param {RecognitionResult} result The recognition result.\n   * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\n   * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\n   */\n  static fromResult(result) {\n    Contracts.throwIfNullOrUndefined(result, \"result\");\n    const json = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\n    Contracts.throwIfNullOrUndefined(json, \"json\");\n    return new PronunciationAssessmentResult(json);\n  }\n  /**\n   * Gets the detail result of pronunciation assessment.\n   * @member PronunciationAssessmentConfig.prototype.detailResult\n   * @function\n   * @public\n   * @returns {DetailResult} detail result.\n   */\n  get detailResult() {\n    return this.privPronJson;\n  }\n  /**\n   * The score indicating the pronunciation accuracy of the given speech, which indicates\n   * how closely the phonemes match a native speaker's pronunciation.\n   * @member PronunciationAssessmentResult.prototype.accuracyScore\n   * @function\n   * @public\n   * @returns {number} Accuracy score.\n   */\n  get accuracyScore() {\n    var _a;\n    return (_a = this.detailResult.PronunciationAssessment) === null || _a === void 0 ? void 0 : _a.AccuracyScore;\n  }\n  /**\n   * The overall score indicating the pronunciation quality of the given speech.\n   * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\n   * @member PronunciationAssessmentResult.prototype.pronunciationScore\n   * @function\n   * @public\n   * @returns {number} Pronunciation score.\n   */\n  get pronunciationScore() {\n    var _a;\n    return (_a = this.detailResult.PronunciationAssessment) === null || _a === void 0 ? void 0 : _a.PronScore;\n  }\n  /**\n   * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\n   * @member PronunciationAssessmentResult.prototype.completenessScore\n   * @function\n   * @public\n   * @returns {number} Completeness score.\n   */\n  get completenessScore() {\n    var _a;\n    return (_a = this.detailResult.PronunciationAssessment) === null || _a === void 0 ? void 0 : _a.CompletenessScore;\n  }\n  /**\n   * The score indicating the fluency of the given speech.\n   * @member PronunciationAssessmentResult.prototype.fluencyScore\n   * @function\n   * @public\n   * @returns {number} Fluency score.\n   */\n  get fluencyScore() {\n    var _a;\n    return (_a = this.detailResult.PronunciationAssessment) === null || _a === void 0 ? void 0 : _a.FluencyScore;\n  }\n  /**\n   * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\n   * @member PronunciationAssessmentResult.prototype.prosodyScore\n   * @function\n   * @public\n   * @returns {number} Prosody score.\n   */\n  get prosodyScore() {\n    var _a;\n    return (_a = this.detailResult.PronunciationAssessment) === null || _a === void 0 ? void 0 : _a.ProsodyScore;\n  }\n  /**\n   * The concent assessment result.\n   * Only available when content assessment is enabled.\n   * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\n   * @function\n   * @public\n   * @returns {ContentAssessmentResult} Content assessment result.\n   */\n  get contentAssessmentResult() {\n    if (this.detailResult.ContentAssessment === undefined) {\n      return undefined;\n    }\n    return new ContentAssessmentResult(this.detailResult);\n  }\n}","map":{"version":3,"names":["Contracts","PropertyId","ContentAssessmentResult","constructor","detailResult","privPronJson","grammarScore","ContentAssessment","GrammarScore","vocabularyScore","VocabularyScore","topicScore","TopicScore","PronunciationAssessmentResult","jsonString","j","JSON","parse","throwIfNullOrUndefined","NBest","fromResult","result","json","properties","getProperty","SpeechServiceResponse_JsonResult","accuracyScore","_a","PronunciationAssessment","AccuracyScore","pronunciationScore","PronScore","completenessScore","CompletenessScore","fluencyScore","FluencyScore","prosodyScore","ProsodyScore","contentAssessmentResult","undefined"],"sources":["src/sdk/PronunciationAssessmentResult.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports.js\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n        ProsodyScore: number;\r\n    };\r\n    ContentAssessment: {\r\n        GrammarScore: number;\r\n        VocabularyScore: number;\r\n        TopicScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\nexport class ContentAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally.\r\n     */\r\n    public constructor(detailResult: DetailResult) {\r\n        this.privPronJson = detailResult;\r\n    }\r\n\r\n    /**\r\n     * Correctness in using grammar and variety of sentence patterns.\r\n     * Grammatical errors are jointly evaluated by lexical accuracy,\r\n     * grammatical accuracy and diversity of sentence structures.\r\n     * @member ContentAssessmentResult.prototype.grammarScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Grammar score.\r\n     */\r\n    public get grammarScore(): number {\r\n        return this.privPronJson.ContentAssessment.GrammarScore;\r\n    }\r\n\r\n    /**\r\n     * Proficiency in lexical usage. It evaluates the speaker's effective usage\r\n     * of words and their appropriateness within the given context to express\r\n     * ideas accurately, as well as level of lexical complexity.\r\n     * @member ContentAssessmentResult.prototype.vocabularyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Vocabulary score.\r\n     */\r\n    public get vocabularyScore(): number {\r\n        return this.privPronJson.ContentAssessment.VocabularyScore;\r\n    }\r\n\r\n    /**\r\n     * Level of understanding and engagement with the topic, which provides\r\n     * insights into the speaker’s ability to express their thoughts and ideas\r\n     * effectively and the ability to engage with the topic.\r\n     * @member ContentAssessmentResult.prototype.topicScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Topic score.\r\n     */\r\n    public get topicScore(): number {\r\n        return this.privPronJson.ContentAssessment.TopicScore;\r\n    }\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.FluencyScore;\r\n    }\r\n\r\n    /**\r\n     * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\r\n     * @member PronunciationAssessmentResult.prototype.prosodyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Prosody score.\r\n     */\r\n    public get prosodyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.ProsodyScore;\r\n    }\r\n\r\n    /**\r\n     * The concent assessment result.\r\n     * Only available when content assessment is enabled.\r\n     * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\r\n     * @function\r\n     * @public\r\n     * @returns {ContentAssessmentResult} Content assessment result.\r\n     */\r\n    public get contentAssessmentResult(): ContentAssessmentResult {\r\n        if (this.detailResult.ContentAssessment === undefined) {\r\n            return undefined;\r\n        }\r\n        return new ContentAssessmentResult(this.detailResult);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA;AAEA,SAAQA,SAAS,QAAO,gBAAgB;AACxC,SACIC,UAAU,QAEP,cAAc;AAqCrB,OAAM,MAAOC,uBAAuB;EAGhC;;;;EAIAC,YAAmBC,YAA0B;IACzC,IAAI,CAACC,YAAY,GAAGD,YAAY;EACpC;EAEA;;;;;;;;;EASA,IAAWE,YAAYA,CAAA;IACnB,OAAO,IAAI,CAACD,YAAY,CAACE,iBAAiB,CAACC,YAAY;EAC3D;EAEA;;;;;;;;;EASA,IAAWC,eAAeA,CAAA;IACtB,OAAO,IAAI,CAACJ,YAAY,CAACE,iBAAiB,CAACG,eAAe;EAC9D;EAEA;;;;;;;;;EASA,IAAWC,UAAUA,CAAA;IACjB,OAAO,IAAI,CAACN,YAAY,CAACE,iBAAiB,CAACK,UAAU;EACzD;;AAGJ;;;;;AAKA,OAAM,MAAOC,6BAA6B;EAGtCV,YAAoBW,UAAkB;IAClC,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAqB;IACpDd,SAAS,CAACkB,sBAAsB,CAACH,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;IACrD,IAAI,CAACd,YAAY,GAAGU,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC;EAClC;EAEA;;;;;;;;EAQO,OAAOC,UAAUA,CAACC,MAAyB;IAC9CrB,SAAS,CAACkB,sBAAsB,CAACG,MAAM,EAAE,QAAQ,CAAC;IAClD,MAAMC,IAAI,GAAWD,MAAM,CAACE,UAAU,CAACC,WAAW,CAACvB,UAAU,CAACwB,gCAAgC,CAAC;IAC/FzB,SAAS,CAACkB,sBAAsB,CAACI,IAAI,EAAE,MAAM,CAAC;IAC9C,OAAO,IAAIT,6BAA6B,CAACS,IAAI,CAAC;EAClD;EAEA;;;;;;;EAOA,IAAWlB,YAAYA,CAAA;IACnB,OAAO,IAAI,CAACC,YAAY;EAC5B;EAEA;;;;;;;;EAQA,IAAWqB,aAAaA,CAAA;;IACpB,QAAAC,EAAA,GAAO,IAAI,CAACvB,YAAY,CAACwB,uBAAuB,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,aAAa;EACnE;EAEA;;;;;;;;EAQA,IAAWC,kBAAkBA,CAAA;;IACzB,QAAAH,EAAA,GAAO,IAAI,CAACvB,YAAY,CAACwB,uBAAuB,cAAAD,EAAA,uBAAAA,EAAA,CAAEI,SAAS;EAC/D;EAEA;;;;;;;EAOA,IAAWC,iBAAiBA,CAAA;;IACxB,QAAAL,EAAA,GAAO,IAAI,CAACvB,YAAY,CAACwB,uBAAuB,cAAAD,EAAA,uBAAAA,EAAA,CAAEM,iBAAiB;EACvE;EAEA;;;;;;;EAOA,IAAWC,YAAYA,CAAA;;IACnB,QAAAP,EAAA,GAAO,IAAI,CAACvB,YAAY,CAACwB,uBAAuB,cAAAD,EAAA,uBAAAA,EAAA,CAAEQ,YAAY;EAClE;EAEA;;;;;;;EAOA,IAAWC,YAAYA,CAAA;;IACnB,QAAAT,EAAA,GAAO,IAAI,CAACvB,YAAY,CAACwB,uBAAuB,cAAAD,EAAA,uBAAAA,EAAA,CAAEU,YAAY;EAClE;EAEA;;;;;;;;EAQA,IAAWC,uBAAuBA,CAAA;IAC9B,IAAI,IAAI,CAAClC,YAAY,CAACG,iBAAiB,KAAKgC,SAAS,EAAE;MACnD,OAAOA,SAAS;;IAEpB,OAAO,IAAIrC,uBAAuB,CAAC,IAAI,CAACE,YAAY,CAAC;EACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}