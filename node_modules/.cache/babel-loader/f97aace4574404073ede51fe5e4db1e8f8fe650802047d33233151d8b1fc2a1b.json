{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ObjectDisposedError } from \"./Error.js\";\nexport class List {\n  constructor(list) {\n    this.privSubscriptionIdCounter = 0;\n    this.privAddSubscriptions = {};\n    this.privRemoveSubscriptions = {};\n    this.privDisposedSubscriptions = {};\n    this.privDisposeReason = null;\n    this.privList = [];\n    // copy the list rather than taking as is.\n    if (list) {\n      for (const item of list) {\n        this.privList.push(item);\n      }\n    }\n  }\n  get(itemIndex) {\n    this.throwIfDisposed();\n    return this.privList[itemIndex];\n  }\n  first() {\n    return this.get(0);\n  }\n  last() {\n    return this.get(this.length() - 1);\n  }\n  add(item) {\n    this.throwIfDisposed();\n    this.insertAt(this.privList.length, item);\n  }\n  insertAt(index, item) {\n    this.throwIfDisposed();\n    if (index === 0) {\n      this.privList.unshift(item);\n    } else if (index === this.privList.length) {\n      this.privList.push(item);\n    } else {\n      this.privList.splice(index, 0, item);\n    }\n    this.triggerSubscriptions(this.privAddSubscriptions);\n  }\n  removeFirst() {\n    this.throwIfDisposed();\n    return this.removeAt(0);\n  }\n  removeLast() {\n    this.throwIfDisposed();\n    return this.removeAt(this.length() - 1);\n  }\n  removeAt(index) {\n    this.throwIfDisposed();\n    return this.remove(index, 1)[0];\n  }\n  remove(index, count) {\n    this.throwIfDisposed();\n    const removedElements = this.privList.splice(index, count);\n    this.triggerSubscriptions(this.privRemoveSubscriptions);\n    return removedElements;\n  }\n  clear() {\n    this.throwIfDisposed();\n    this.remove(0, this.length());\n  }\n  length() {\n    this.throwIfDisposed();\n    return this.privList.length;\n  }\n  onAdded(addedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privAddSubscriptions[subscriptionId] = addedCallback;\n    return {\n      detach: () => {\n        delete this.privAddSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n  onRemoved(removedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n    return {\n      detach: () => {\n        delete this.privRemoveSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n  onDisposed(disposedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n    return {\n      detach: () => {\n        delete this.privDisposedSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n  join(seperator) {\n    this.throwIfDisposed();\n    return this.privList.join(seperator);\n  }\n  toArray() {\n    const cloneCopy = Array();\n    this.privList.forEach(val => {\n      cloneCopy.push(val);\n    });\n    return cloneCopy;\n  }\n  any(callback) {\n    this.throwIfDisposed();\n    if (callback) {\n      return this.where(callback).length() > 0;\n    } else {\n      return this.length() > 0;\n    }\n  }\n  all(callback) {\n    this.throwIfDisposed();\n    return this.where(callback).length() === this.length();\n  }\n  forEach(callback) {\n    this.throwIfDisposed();\n    for (let i = 0; i < this.length(); i++) {\n      callback(this.privList[i], i);\n    }\n  }\n  select(callback) {\n    this.throwIfDisposed();\n    const selectList = [];\n    for (let i = 0; i < this.privList.length; i++) {\n      selectList.push(callback(this.privList[i], i));\n    }\n    return new List(selectList);\n  }\n  where(callback) {\n    this.throwIfDisposed();\n    const filteredList = new List();\n    for (let i = 0; i < this.privList.length; i++) {\n      if (callback(this.privList[i], i)) {\n        filteredList.add(this.privList[i]);\n      }\n    }\n    return filteredList;\n  }\n  orderBy(compareFn) {\n    this.throwIfDisposed();\n    const clonedArray = this.toArray();\n    const orderedArray = clonedArray.sort(compareFn);\n    return new List(orderedArray);\n  }\n  orderByDesc(compareFn) {\n    this.throwIfDisposed();\n    return this.orderBy((a, b) => compareFn(b, a));\n  }\n  clone() {\n    this.throwIfDisposed();\n    return new List(this.toArray());\n  }\n  concat(list) {\n    this.throwIfDisposed();\n    return new List(this.privList.concat(list.toArray()));\n  }\n  concatArray(array) {\n    this.throwIfDisposed();\n    return new List(this.privList.concat(array));\n  }\n  isDisposed() {\n    return this.privList == null;\n  }\n  dispose(reason) {\n    if (!this.isDisposed()) {\n      this.privDisposeReason = reason;\n      this.privList = null;\n      this.privAddSubscriptions = null;\n      this.privRemoveSubscriptions = null;\n      this.triggerSubscriptions(this.privDisposedSubscriptions);\n    }\n  }\n  throwIfDisposed() {\n    if (this.isDisposed()) {\n      throw new ObjectDisposedError(\"List\", this.privDisposeReason);\n    }\n  }\n  triggerSubscriptions(subscriptions) {\n    if (subscriptions) {\n      for (const subscriptionId in subscriptions) {\n        if (subscriptionId) {\n          subscriptions[subscriptionId]();\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["ObjectDisposedError","List","constructor","list","privSubscriptionIdCounter","privAddSubscriptions","privRemoveSubscriptions","privDisposedSubscriptions","privDisposeReason","privList","item","push","get","itemIndex","throwIfDisposed","first","last","length","add","insertAt","index","unshift","splice","triggerSubscriptions","removeFirst","removeAt","removeLast","remove","count","removedElements","clear","onAdded","addedCallback","subscriptionId","detach","Promise","resolve","onRemoved","removedCallback","onDisposed","disposedCallback","join","seperator","toArray","cloneCopy","Array","forEach","val","any","callback","where","all","i","select","selectList","filteredList","orderBy","compareFn","clonedArray","orderedArray","sort","orderByDesc","a","b","clone","concat","concatArray","array","isDisposed","dispose","reason","subscriptions"],"sources":["src/common/List.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}