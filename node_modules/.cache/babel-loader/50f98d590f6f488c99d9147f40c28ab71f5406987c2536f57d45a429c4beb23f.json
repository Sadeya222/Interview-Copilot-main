{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file */\nimport { PropertyId } from \"../sdk/Exports.js\";\nimport { Context, SpeechServiceConfig } from \"./Exports.js\";\nexport var RecognitionMode;\n(function (RecognitionMode) {\n  RecognitionMode[RecognitionMode[\"Interactive\"] = 0] = \"Interactive\";\n  RecognitionMode[RecognitionMode[\"Conversation\"] = 1] = \"Conversation\";\n  RecognitionMode[RecognitionMode[\"Dictation\"] = 2] = \"Dictation\";\n})(RecognitionMode || (RecognitionMode = {}));\nexport var SpeechResultFormat;\n(function (SpeechResultFormat) {\n  SpeechResultFormat[SpeechResultFormat[\"Simple\"] = 0] = \"Simple\";\n  SpeechResultFormat[SpeechResultFormat[\"Detailed\"] = 1] = \"Detailed\";\n})(SpeechResultFormat || (SpeechResultFormat = {}));\nexport class RecognizerConfig {\n  constructor(speechServiceConfig, parameters) {\n    this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n    this.privParameters = parameters;\n    this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\n    this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\n    this.privEnableSpeakerId = false;\n  }\n  get parameters() {\n    return this.privParameters;\n  }\n  get recognitionMode() {\n    return this.privRecognitionMode;\n  }\n  set recognitionMode(value) {\n    this.privRecognitionMode = value;\n    this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\n    this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\n  }\n  get SpeechServiceConfig() {\n    return this.privSpeechServiceConfig;\n  }\n  get recognitionActivityTimeout() {\n    return this.privRecognitionActivityTimeout;\n  }\n  get isContinuousRecognition() {\n    return this.privRecognitionMode !== RecognitionMode.Interactive;\n  }\n  get languageIdMode() {\n    return this.privLanguageIdMode;\n  }\n  get autoDetectSourceLanguages() {\n    return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\n  }\n  get recognitionEndpointVersion() {\n    return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\n  }\n  get sourceLanguageModels() {\n    const models = [];\n    let modelsExist = false;\n    if (this.autoDetectSourceLanguages !== undefined) {\n      for (const language of this.autoDetectSourceLanguages.split(\",\")) {\n        const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\n        const modelId = this.parameters.getProperty(customProperty, undefined);\n        if (modelId !== undefined) {\n          models.push({\n            language,\n            endpoint: modelId\n          });\n          modelsExist = true;\n        } else {\n          models.push({\n            language,\n            endpoint: \"\"\n          });\n        }\n      }\n    }\n    return modelsExist ? models : undefined;\n  }\n  get maxRetryCount() {\n    return this.privMaxRetryCount;\n  }\n  get isSpeakerDiarizationEnabled() {\n    return this.privEnableSpeakerId;\n  }\n  set isSpeakerDiarizationEnabled(value) {\n    this.privEnableSpeakerId = value;\n  }\n}","map":{"version":3,"names":["PropertyId","Context","SpeechServiceConfig","RecognitionMode","SpeechResultFormat","RecognizerConfig","constructor","speechServiceConfig","parameters","privSpeechServiceConfig","privParameters","privMaxRetryCount","parseInt","getProperty","privLanguageIdMode","SpeechServiceConnection_LanguageIdMode","undefined","privEnableSpeakerId","recognitionMode","privRecognitionMode","value","privRecognitionActivityTimeout","Interactive","Recognition","recognitionActivityTimeout","isContinuousRecognition","languageIdMode","autoDetectSourceLanguages","SpeechServiceConnection_AutoDetectSourceLanguages","recognitionEndpointVersion","SpeechServiceConnection_RecognitionEndpointVersion","sourceLanguageModels","models","modelsExist","language","split","customProperty","SpeechServiceConnection_EndpointId","toString","modelId","push","endpoint","maxRetryCount","isSpeakerDiarizationEnabled"],"sources":["src/common.speech/RecognizerConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\nimport { Context, SpeechServiceConfig } from \"./Exports.js\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}