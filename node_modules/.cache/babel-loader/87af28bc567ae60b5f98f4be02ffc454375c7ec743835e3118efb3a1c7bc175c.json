{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports.js\";\nimport { PropertyId } from \"../sdk/Exports.js\";\nimport { ServicePropertiesPropertyName } from \"../common.speech/Exports.js\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\nimport { WebsocketMessageFormatter } from \"./Exports.js\";\nimport { HeaderNames } from \"./HeaderNames.js\";\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.universalUri = \"/speech/universal/v2\";\n  }\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n    const queryParams = {};\n    const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n    const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n    if (endpointId) {\n      if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n        queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n      }\n    } else if (language) {\n      if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n        queryParams[QueryParameterNames.Language] = language;\n      }\n    }\n    if (config.autoDetectSourceLanguages !== undefined) {\n      queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n    }\n    this.setV2UrlParams(config, queryParams, endpoint);\n    if (!endpoint) {\n      endpoint = `${host}${this.universalUri}`;\n    }\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\n    // URI that was used to make the connection (including query parameters).\n    const uri = webSocketConnection.uri;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\n    return webSocketConnection;\n  }\n  setV2UrlParams(config, queryParams, endpoint) {\n    const propertyIdToParameterMap = new Map([[PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs], [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging], [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs], [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs], [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing], [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity], [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold]]);\n    propertyIdToParameterMap.forEach((parameterName, propertyId) => {\n      this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\n    });\n    const serviceProperties = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    Object.keys(serviceProperties).forEach(value => {\n      queryParams[value] = serviceProperties[value];\n    });\n  }\n}","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","PropertyId","ServicePropertiesPropertyName","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","ConversationTranscriberConnectionFactory","constructor","universalUri","create","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","queryParams","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","search","CustomSpeechDeploymentId","Language","autoDetectSourceLanguages","EnableLanguageId","setV2UrlParams","headers","token","headerName","ConnectionId","enableCompression","webSocketConnection","fromRecognizerConfig","uri","setProperty","SpeechServiceConnection_Url","propertyIdToParameterMap","Map","Speech_SegmentationSilenceTimeoutMs","SegmentationSilenceTimeoutMs","SpeechServiceConnection_EnableAudioLogging","EnableAudioLogging","SpeechServiceConnection_EndSilenceTimeoutMs","EndSilenceTimeoutMs","SpeechServiceConnection_InitialSilenceTimeoutMs","InitialSilenceTimeoutMs","SpeechServiceResponse_PostProcessingOption","Postprocessing","SpeechServiceResponse_ProfanityOption","Profanity","SpeechServiceResponse_StablePartialResultThreshold","StableIntermediateThreshold","forEach","parameterName","propertyId","setUrlParameter","serviceProperties","JSON","parse","Object","keys","value"],"sources":["src/common.speech/ConversationTranscriberConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}